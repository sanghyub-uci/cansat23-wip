/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2023 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
#include "bme280.h" // Pressure sensor
#include "mpu6050.h" // Accel/Gyro sensor
#include "mission_data.h" //
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */
#define TEAM_ID 1037

// Pressure Sensor
#define BME280_I2C_ADDR_PRIM                      UINT8_C(0x76)
#define BME280_I2C_ADDR_SEC                       UINT8_C(0x77)

//GPS
#define PA1010D_I2C_ADDR_PRIM                      UINT8_C(0x76)
#define PA1010D_I2C_ADDR_SEC                       UINT8_C(0x77)

//Temperature Sensor
#define TMP117_I2C_ADDR_PRIM                      UINT8_C(0x76)
#define TMP117_I2C_ADDR_SEC                       UINT8_C(0x77)

#define TEMP_AT_SEA_LEVEL 293
#define TEMP_LAPSE_RATE -0.0065
#define PRESS_AT_SEA_LEVEL 101325 //(Pa)

#define RX_BFR_SIZE 255
#define TX_BFR_SIZE 255

#define RESET_FLAG ((uint32_t) 0x0F0F0F0F)
#define CLEAR_FLAG ((uint32_t) 0x00000000)

#define TIM2_CLK 		9000000UL
/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */
uint8_t CONTAINER_MAC_ADDR[8] = {0x00,0x13,0xA2,0x00,0x41,0xC4,0x69,0x27}; //FIXME need to change
uint8_t SP_MAC_ADDR[8] = {0x00,0x13,0xA2,0x00,0x41,0xC1,0x36,0x4F}; //FIXME need to change
/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/
I2C_HandleTypeDef hi2c1;

TIM_HandleTypeDef htim2;

UART_HandleTypeDef huart1;
UART_HandleTypeDef huart3;

/* USER CODE BEGIN PV */
typedef struct MotorEncoder {
	volatile uint8_t gu8_State;
	volatile uint8_t gu8_MSG[50];
	volatile uint32_t gu32_T1;
	volatile uint32_t gu32_T2;
	volatile uint32_t gu32_Ticks;
	volatile uint16_t gu16_TIM3_OVC;
	volatile uint32_t gu32_Freq;
	int num;
};
int32_t CH_DC = 0;

volatile struct MissionData mission_data;
uint8_t CanSat_Mission_Data_SP[200] = {0x00};
volatile struct bme280_dev bme280_d;
volatile struct bme280_data comp_data;

static char * time_format = "%02d:%02d:%02d";
static char * container_telemetry = "%d,%s,%d,%c,%c,%c,%s,%s,%s,%s,%s,%s,%s,%s,%s,%d,%s\n";
static char * sp_telemetry = "%d,%s,%d,%s,%s,%s,%s\n";
static char * simp = "SIMP";
volatile uint8_t altitude_string[6];
volatile uint8_t temperature_string[5];
volatile uint8_t voltage_string[5];

uint8_t RxRollover1 = 0;
uint8_t RxCounter1 = 0;
uint16_t RxBfrPos1 = 0;
uint8_t TxCounter1 = 0;
uint8_t TxBuffer1[TX_BFR_SIZE] = {0x00};
uint8_t RxBuffer1[RX_BFR_SIZE] = {0x00};
uint16_t TxSize1 = 0;

uint8_t RxRollover2 = 0x00;
uint8_t RxCounter2 = 0;
uint16_t RxBfrPos2 = 0;
uint8_t TxCounter2 = 0;
uint8_t TxBuffer2[TX_BFR_SIZE] = {0x00};
uint8_t RxBuffer2[RX_BFR_SIZE] = {0x00};
uint16_t TxSize2 = 0;

uint8_t flag = 0;
uint16_t datalen = 0;

float ADCvoltage = 0;

static float altitude_history[5];
static float sim_altitude_history[5];

float altitude_zero = 0;
volatile uint8_t state[20] = "LAUNCH_WAIT";
volatile uint8_t sim_data_received = 0; // used to prevent errors when checking altitude history in sim mode
volatile uint8_t first_sim_data_val = 0;
uint8_t last_cmd[20];

static uint8_t buffer_gps[128];
static uint8_t temp_gps[280];
static uint8_t lastMessage[128];


volatile struct MotorEncoder m1;
volatile uint32_t m1_rpm[5] = {0};

//uint8_t CanSat_Mission_Data_Buffer[TX_BFR_SIZE];
//uint8_t CanSat_Mission_Packet_Buffer[TX_BFR_SIZE];
uint8_t	Source_MAC_Addr [8];
/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_TIM2_Init(void);
static void MX_I2C1_Init(void);
static void MX_USART1_UART_Init(void);
static void MX_USART3_UART_Init(void);
/* USER CODE BEGIN PFP */

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
//TODO pressure sensor read
int8_t bme280_read(uint8_t reg_addr, uint8_t *data_regp, uint32_t len, void *intf_ptr)
{
    int8_t rslt = 0; /* Return 0 for Success, non-zero for failure */
    uint8_t buf[64];
    HAL_StatusTypeDef ret;
    ret = HAL_I2C_Master_Transmit(&hi2c1, (uint16_t)(BME280_I2C_ADDR_PRIM << 1), data_regp, I2C_MEMADD_SIZE_8BIT, HAL_MAX_DELAY);
    HAL_Delay(20);
    ret = HAL_I2C_Master_Receive(&hi2c1, (uint16_t)(BME280_I2C_ADDR_PRIM << 1), data_regp, len, HAL_MAX_DELAY);
    if (ret != HAL_OK)
    {
    	strcpy((char*)buf, "BME Read Error \r\n");
    	rslt = 1;
    }
    else
    {
    	strcpy((char*)buf, "BME Read Transmitted \r\n");
    }
    return rslt;
}

//TODO pressure sensor write
int8_t bme280_write(uint8_t reg_addr, uint8_t *data_regp, uint32_t len, void *intf_ptr)
{
    int8_t rslt = 0; /* Return 0 for Success, non-zero for failure */
    uint8_t buf[64];
    HAL_StatusTypeDef ret;
    //reg_data[0] = reg_addr;
	ret = HAL_I2C_Master_Transmit(&hi2c1, BME280_I2C_ADDR_PRIM << 1, data_regp, 1, HAL_MAX_DELAY);
	if (ret != HAL_OK)
	{
		strcpy((char*)buf, "BME Write Error Tx\r\n");
		rslt = 1;
	}
	else
	{
		strcpy((char*)buf, "BME Write Transmitted \r\n");
	}

	ret = HAL_I2C_Mem_Write(&hi2c1, BME280_I2C_ADDR_PRIM << 1, reg_addr, I2C_MEMADD_SIZE_8BIT, data_regp, len, HAL_MAX_DELAY);
	if (ret != HAL_OK)
	{
		strcpy((char*)buf, "BME Write Error Mem Write\r\n");
		rslt = 1;
	}
	else
	{
		strcpy((char*)buf, "BME Written Mem Write \r\n");
	}
	HAL_UART_Transmit(&huart1, buf, strlen((char*)buf), HAL_MAX_DELAY);
    return rslt;
}

//TODO calculate altitude from pressure
double calculate_altitude(struct bme280_data * bd)
{
	double t_over_l = (double)TEMP_AT_SEA_LEVEL/TEMP_LAPSE_RATE;
	double p_over_pb = (double)(bd->pressure)/(double)PRESS_AT_SEA_LEVEL;
	if(!mission_data.sim_enabled || !mission_data.sim_active) {
		p_over_pb = p_over_pb/100.0;
}

//TODO reset altitude to zero

//TODO read all sensors

//TODO telemetry creation

//TODO telemetry send to ground station

//TODO telemetry send to payload

//TODO receive command from ground station

//TODO mission time increment

/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */
  mission_data.flight_or_sim = 'F'; //Simulation Mode Toggle
  mission_data.sp_released = 'N';   //Payload released
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_TIM2_Init();
  MX_I2C1_Init();
  MX_USART1_UART_Init();
  MX_USART3_UART_Init();
  /* USER CODE BEGIN 2 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  GPIO_InitStruct.Pin = I2C_SDA_Pin | I2C_SCL_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

  HAL_TIM_Base_Start_IT(&htim1);
  //HAL_TIM_Base_Start_IT(&htim1);

  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);

  HAL_TIM_Base_Start_IT(&htim3);
  HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_1);
  HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_2);
  HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_3);
  HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_4);


//  memset(RxBuffer1,0,RX_BFR_SIZE);
//    memset(TxBuffer1,0,TX_BFR_SIZE);
//  __HAL_UART_CLEAR_IDLEFLAG(&huart1);
//  //  __HAL_UART_CLEAR_FEFLAG(&huart2);
//    __HAL_UART_ENABLE_IT(&huart1, UART_IT_IDLE);
//    HAL_UART_Receive_DMA(&huart1, RxBuffer1, RX_BFR_SIZE);

  //  HAL_GPIO_WritePin(GPIOA, MOTOR_DIRECTION_CONTROL_Pin, GPIO_PIN_SET);
  //  HAL_GPIO_WritePin(GPIOA, MOTOR_SLEEP_ALL_Pin, GPIO_PIN_RESET);
  //  HAL_GPIO_WritePin(GPIOB, ENABLE_5V_1_Pin, GPIO_PIN_SET);
  //  HAL_GPIO_WritePin(GPIOB, ENABLE_5V_2_Pin, GPIO_PIN_SET);
  HAL_Delay(10);
  //HAL_GPIO_WritePin(GPIOB, PWM4_Pin, GPIO_PIN_SET);

  TIM2->CCR1 = 180;
  TIM2->CCR2 = 180;
  TIM2->CCR3 = 180;
  TIM2->CCR4 = 180;

  uint8_t bme280_addr = BME280_I2C_ADDR_PRIM;
    	bme280_d.intf_ptr = &bme280_addr;
    	bme280_d.intf = BME280_I2C_INTF;
    	bme280_d.read = bme280_read;
    	bme280_d.write = bme280_write;
    	bme280_d.delay_us = delay_test;

    	uint8_t check,data;
    	data = 0xB6;
    	HAL_I2C_Mem_Write(&hi2c1, BME280_I2C_ADDR_PRIM << 1, BME280_RESET_ADDR, 1, &data, 1 , 1000);
    	HAL_Delay(30);
    	bme280_init(&bme280_d);


		stream_bme280_data_normal_mode(&bme280_d);
		MPU6050_init();
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  while (CH_DC < 299)
	  	 {
	  		 CH_DC += 10;
	  //		 TIM2->CCR1 = CH_DC;
	  //		 TIM2->CCR2 = CH_DC;
	  //		 TIM2->CCR3 = CH_DC;
	  //		 TIM2->CCR4 = CH_DC;
	  //		 HAL_Delay(100);
	  	 }
	  	 //	 HAL_GPIO_WritePin(GPIOA, SOLENOID_DRIVE_Pin, GPIO_PIN_SET);
	  	 while (CH_DC > 0)
	  	 {
	  		 CH_DC -= 10;
	  //		 TIM2->CCR1 = CH_DC;
	  //		 TIM2->CCR2 = CH_DC;
	  //		 TIM2->CCR3 = CH_DC;
	  //		 TIM2->CCR4 = CH_DC;
	  //		 HAL_Delay(100);
	  	 }

	  	 HAL_Delay(200);
	  //	 HAL_GPIO_WritePin(GPIOA, SOLENOID_DRIVE_Pin, GPIO_PIN_RESET);
	  	 readSensors(&mission_data);
	  	 uint32_t test_1 = TIM1->CCR1;
	  	 HAL_Delay(200);
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
  {
    Error_Handler();
  }
}

/**
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{

  /* USER CODE BEGIN I2C1_Init 0 */

  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
  hi2c1.Init.ClockSpeed = 100000;
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
  hi2c1.Init.OwnAddress1 = 0;
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
  hi2c1.Init.OwnAddress2 = 0;
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}

/**
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
  TIM_MasterConfigTypeDef sMasterConfig = {0};
  TIM_OC_InitTypeDef sConfigOC = {0};

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
  htim2.Init.Prescaler = 0;
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim2.Init.Period = 65535;
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
  {
    Error_Handler();
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
  {
    Error_Handler();
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
  {
    Error_Handler();
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
  sConfigOC.Pulse = 0;
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);

}

/**
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{

  /* USER CODE BEGIN USART1_Init 0 */

  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
  huart1.Init.BaudRate = 115200;
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
  huart1.Init.StopBits = UART_STOPBITS_1;
  huart1.Init.Parity = UART_PARITY_NONE;
  huart1.Init.Mode = UART_MODE_TX_RX;
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
  if (HAL_MultiProcessor_Init(&huart1, 0, UART_WAKEUPMETHOD_IDLELINE) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}

/**
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{

  /* USER CODE BEGIN USART3_Init 0 */

  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
  huart3.Init.BaudRate = 115200;
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
  huart3.Init.StopBits = UART_STOPBITS_1;
  huart3.Init.Parity = UART_PARITY_NONE;
  huart3.Init.Mode = UART_MODE_TX_RX;
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
  if (HAL_UART_Init(&huart3) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}

/**
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SOLENOID1_Pin|SOLENOID2_Pin|XBEE1_SLEEP_Pin|MPU_INT_Pin
                          |GPIO_PI_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, BUZZER_Pin|TESTLED_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  /*Configure GPIO pin : PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  /*Configure GPIO pins : SWDIO_Pin SWCLK_Pin MPU_INTA14_Pin */
  GPIO_InitStruct.Pin = SWDIO_Pin|SWCLK_Pin|MPU_INTA14_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  /*Configure GPIO pins : SOLENOID1_Pin SOLENOID2_Pin XBEE1_SLEEP_Pin MPU_INT_Pin
                           GPIO_PI_Pin */
  GPIO_InitStruct.Pin = SOLENOID1_Pin|SOLENOID2_Pin|XBEE1_SLEEP_Pin|MPU_INT_Pin
                          |GPIO_PI_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  /*Configure GPIO pins : BOOT1_Pin MAG_INT_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin|MAG_INT_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

  /*Configure GPIO pins : PB12 PB13 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

  /*Configure GPIO pins : BUZZER_Pin TESTLED_Pin */
  GPIO_InitStruct.Pin = BUZZER_Pin|TESTLED_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

}

/* USER CODE BEGIN 4 */

/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
