/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2023 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
#include "bme280.h" // Pressure sensor
#include "mpu6050.h" // Accel/Gyro sensor
#include "mission_data.h" //
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */
#define TEAM_ID 1037

// Pressure Sensor
#define BME280_I2C_ADDR_PRIM                      UINT8_C(0x76)
#define BME280_I2C_ADDR_SEC                       UINT8_C(0x77)

//GPS
#define PA1010D_I2C_ADDR_PRIM                      UINT8_C(0x76)
#define PA1010D_I2C_ADDR_SEC                       UINT8_C(0x77)

//Temperature Sensor
#define TMP117_I2C_ADDR_PRIM                      UINT8_C(0x76)
#define TMP117_I2C_ADDR_SEC                       UINT8_C(0x77)

#define TEMP_AT_SEA_LEVEL 293
#define TEMP_LAPSE_RATE -0.0065
#define PRESS_AT_SEA_LEVEL 101325 //(Pa)

#define RX_BFR_SIZE 255
#define TX_BFR_SIZE 255

#define RESET_FLAG ((uint32_t) 0x0F0F0F0F)
#define CLEAR_FLAG ((uint32_t) 0x00000000)

#define TIM2_CLK 		9000000UL
/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */
uint8_t CONTAINER_MAC_ADDR[8] = {0x00,0x13,0xA2,0x00,0x41,0xC4,0x69,0x27}; //FIXME need to change
uint8_t SP_MAC_ADDR[8] = {0x00,0x13,0xA2,0x00,0x41,0xC1,0x36,0x4F}; //FIXME need to change
/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/
I2C_HandleTypeDef hi2c1;

TIM_HandleTypeDef htim2;

UART_HandleTypeDef huart1;
UART_HandleTypeDef huart3;

/* USER CODE BEGIN PV */
typedef struct MotorEncoder {
	volatile uint8_t gu8_State;
	volatile uint8_t gu8_MSG[50];
	volatile uint32_t gu32_T1;
	volatile uint32_t gu32_T2;
	volatile uint32_t gu32_Ticks;
	volatile uint16_t gu16_TIM3_OVC;
	volatile uint32_t gu32_Freq;
	int num;
};
int32_t CH_DC = 0;

volatile struct MissionData mission_data;
uint8_t CanSat_Mission_Data_SP[200] = {0x00};
volatile struct bme280_dev bme280_d;
volatile struct bme280_data comp_data;

static char * time_format = "%02d:%02d:%02d";
static char * container_telemetry = "%d,%s,%d,%c,%c,%c,%s,%s,%s,%s,%s,%s,%s,%s,%s,%d,%s\n";
static char * sp_telemetry = "%d,%s,%d,%s,%s,%s,%s\n";
static char * simp = "SIMP";
volatile uint8_t altitude_string[6];
volatile uint8_t temperature_string[5];
volatile uint8_t voltage_string[5];

uint8_t RxRollover1 = 0;
uint8_t RxCounter1 = 0;
uint16_t RxBfrPos1 = 0;
uint8_t TxCounter1 = 0;
uint8_t TxBuffer1[TX_BFR_SIZE] = {0x00};
uint8_t RxBuffer1[RX_BFR_SIZE] = {0x00};
uint16_t TxSize1 = 0;

uint8_t RxRollover2 = 0x00;
uint8_t RxCounter2 = 0;
uint16_t RxBfrPos2 = 0;
uint8_t TxCounter2 = 0;
uint8_t TxBuffer2[TX_BFR_SIZE] = {0x00};
uint8_t RxBuffer2[RX_BFR_SIZE] = {0x00};
uint16_t TxSize2 = 0;

uint8_t flag = 0;
uint16_t datalen = 0;

float ADCvoltage = 0;

static float altitude_history[5];
static float sim_altitude_history[5];

float altitude_zero = 0;
volatile uint8_t state[20] = "LAUNCH_WAIT";
volatile uint8_t sim_data_received = 0; // used to prevent errors when checking altitude history in sim mode
volatile uint8_t first_sim_data_val = 0;
uint8_t last_cmd[20];

static uint8_t buffer_gps[128];
static uint8_t temp_gps[280];
static uint8_t lastMessage[128];


volatile struct MotorEncoder m1;
volatile uint32_t m1_rpm[5] = {0};

//uint8_t CanSat_Mission_Data_Buffer[TX_BFR_SIZE];
//uint8_t CanSat_Mission_Packet_Buffer[TX_BFR_SIZE];
uint8_t	Source_MAC_Addr [8];
/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_TIM2_Init(void);
static void MX_I2C1_Init(void);
static void MX_USART1_UART_Init(void);
static void MX_USART3_UART_Init(void);
/* USER CODE BEGIN PFP */

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
//pressure sensor read
int8_t bme280_read(uint8_t reg_addr, uint8_t *data_regp, uint32_t len, void *intf_ptr)
{
    int8_t rslt = 0; /* Return 0 for Success, non-zero for failure */
    uint8_t buf[64];
    HAL_StatusTypeDef ret;
    ret = HAL_I2C_Master_Transmit(&hi2c1, (uint16_t)(BME280_I2C_ADDR_PRIM << 1), data_regp, I2C_MEMADD_SIZE_8BIT, HAL_MAX_DELAY);
    HAL_Delay(20);
    ret = HAL_I2C_Master_Receive(&hi2c1, (uint16_t)(BME280_I2C_ADDR_PRIM << 1), data_regp, len, HAL_MAX_DELAY);
    if (ret != HAL_OK)
    {
    	strcpy((char*)buf, "BME Read Error \r\n");
    	rslt = 1;
    }
    else
    {
    	strcpy((char*)buf, "BME Read Transmitted \r\n");
    }
    return rslt;
}

//pressure sensor write
int8_t bme280_write(uint8_t reg_addr, uint8_t *data_regp, uint32_t len, void *intf_ptr)
{
    int8_t rslt = 0; /* Return 0 for Success, non-zero for failure */
    uint8_t buf[64];
    HAL_StatusTypeDef ret;
    //reg_data[0] = reg_addr;
	ret = HAL_I2C_Master_Transmit(&hi2c1, BME280_I2C_ADDR_PRIM << 1, data_regp, 1, HAL_MAX_DELAY);
	if (ret != HAL_OK)
	{
		strcpy((char*)buf, "BME Write Error Tx\r\n");
		rslt = 1;
	}
	else
	{
		strcpy((char*)buf, "BME Write Transmitted \r\n");
	}

	ret = HAL_I2C_Mem_Write(&hi2c1, BME280_I2C_ADDR_PRIM << 1, reg_addr, I2C_MEMADD_SIZE_8BIT, data_regp, len, HAL_MAX_DELAY);
	if (ret != HAL_OK)
	{
		strcpy((char*)buf, "BME Write Error Mem Write\r\n");
		rslt = 1;
	}
	else
	{
		strcpy((char*)buf, "BME Written Mem Write \r\n");
	}
	HAL_UART_Transmit(&huart1, buf, strlen((char*)buf), HAL_MAX_DELAY);
    return rslt;
}

//calculate altitude from pressure
double calculate_altitude(struct bme280_data * bd)
{
	double t_over_l = (double)TEMP_AT_SEA_LEVEL/TEMP_LAPSE_RATE;
	double p_over_pb = (double)(bd->pressure)/(double)PRESS_AT_SEA_LEVEL;
	if(!mission_data.sim_enabled || !mission_data.sim_active) {
		p_over_pb = p_over_pb/100.0;
	}//	else {
	//		p_over_pb = p_over_pb/10.0;
	//	}
	double exp_term = (double)0.19026; //calculated prior
	double altitude = pow(p_over_pb, exp_term);
	altitude = t_over_l * (altitude - 1);
	return altitude; //meters
}

//FIXME reset altitude to zero
void setAltitudeZeroLevel(void)
{
	for(int i =0;i<20;i++){
		bme280_get_sensor_data(BME280_ALL, &comp_data, &bme280_d);
		altitude_zero = calculate_altitude(&comp_data);
	}
}

//FIXME read all sensors
void readSensors(struct MissionData * md)
{
	float holder;
	//
	//	Temperature and Altitude
	//
	bme280_get_sensor_data(BME280_ALL, &comp_data, &bme280_d);
	md->temperature = (comp_data.temperature)/100.0; //(comp_data->pressure)/100
	if(md->sim_enabled && md->sim_active)
	{
		comp_data.pressure = (md->sim_data);
	}
	holder = calculate_altitude(&comp_data);
	if(!md->sim_active) {
		md->altitude = holder - altitude_zero;
	} else {
		if(!sim_data_received)
		{
			md->altitude = holder;
			sim_data_received = 1;
		}
		if(md->apogee && labs((long)(holder) - (long)(md->altitude)) < 50)
		{
			md->altitude = holder;
		}
		else if(!md->apogee)
		{
			md->altitude = holder;
		}
	}
	//
	//	Voltage
	//
//	readVoltage(md);
	long temp_int = floor(md->temperature);
	long alt_int = floor(md->altitude);
	if(md->altitude < 0) {
		alt_int = ceil(md->altitude);
	}
//
	//
	//	Accel/Gyro
	//
	float accX, accY, accZ = 0.0;
	MPU6050_Read_Accel(&accX, &accY, &accZ);
	long volt_int = floor(md->voltage);
	long temp_dec = 10*(md->temperature - temp_int);
	long alt_dec = 10*(md->altitude - alt_int);
	long volt_dec = 100*(md->voltage - volt_int);
//	snprintf(temperature_string, 5,"%04d.%1d",temp_int, temp_dec);
	printf(temperature_string,5,"%04.1f",md->temperature);
//	snprintf(altitude_string,6,"%05d.%1d",alt_int, alt_dec);
	printf(altitude_string,6,"%05.1f",md->altitude);
//	snprintf(voltage_string,5,"%04d.%2d", volt_int, volt_dec);
	printf(voltage_string,5,"%04.2f", md->voltage);
	//checkpoint
}

//TODO telemetry creation
void create_telemetry(char * ret, struct MissionData * md, char type) //, struct SPData * sp1, struct SPData * sp2, char * type)
{
	char tel_buf[255];
	char md_time[15];
	char gps_time [15];

	//"%d,%s,%d,%s,%c,%c,%c,%5.1f,%4.1f,%4.2f,%s,%8.4f,%8.4f,%5.1f,%d,%s,%d,%d,%s\n";
	snprintf(md_time, 15, time_format, md->hours,md->minutes,md->seconds);
	if (type == 'C') //Container data
	{//%d,%s,%d,%c,%c,%c,%c,%s,%s,%s,%s,%s,%s,%s,%s,%d,%d,%s\n"
		//"%d,%s,%d,%s,%c,%c,%c,%5.1f,%4.1f,%4.2f,%s,%8.4f,%8.4f,%5.1f,%d,%s,%d,%d,%s\n"
		snprintf(gps_time, 15, "%s:%s:%s", md->gps_h,md->gps_m,md->gps_s);
		int debug = snprintf(tel_buf, 201, container_telemetry,
		//"%d,%s,%d,%c,%c,%c,%c,%s,%s,%s,%s,%s,%s,%s,%s,%s,%d,%d,%s\n";
		/*%d*/		TEAM_ID,
		/*%s*/		md_time,					//X
		/*%d*/		md->packet_num_C,
		/*%c*/		type,
		/*%c*/		md->flight_or_sim,
		/*%c*/		md->sp_released,			//X
		/*%s*/	altitude_string,				//No float conversions with Timer
		/*%s*/	temperature_string,			//No float conversions with Timer
		/*%s*/	voltage_string,				//No float conversions with Timer
		/*%s*/		gps_time,
		/*%s*/		md->gps_lat_str,
		/*%s*/		md->gps_lon_str,
		/*%s*/		md->gps_altitude,
		/*%s*/		md->gps_sats,
		/*%s*/		state,
		/*%d*/		md->packet_num_SP,
		/*%s*/		last_cmd);
		if(debug  < 0) {
			while(1);
		}
	strcpy(ret, tel_buf);
	}
}

//TODO telemetry send to ground station
void send_telemetry_ground(uint8_t *CanSat_Mission_Data_Buffer)
{
	HAL_UART_Transmit(&huart1, 	CanSat_Mission_Data_Buffer,
								strlen(CanSat_Mission_Data_Buffer),
								HAL_MAX_DELAY);
	if (mission_data.sp_tele == 1)	//active
	{
		HAL_Delay(100);
		HAL_UART_Transmit(&huart1, 	CanSat_Mission_Data_SP,
										strlen(CanSat_Mission_Data_SP),
										HAL_MAX_DELAY);
	}
}

//TODO receive command from ground station
uint8_t receive_cmd_telemetry (char * cmd_buf, volatile struct MissionData * md, uint16_t cmd_length)
{
	cmd_buf[cmd_length] = 0x00;
//	char payload_on[3] = "ON";
//	char payload_off[4] = "OFF";
	//<CMD,TEAMID,SETTING,ARGUEMENT>

	char * strtok_ptr;
	char * cmd_segment[4];
	enum cmd_enum { CMD, TEAMID, SETTING, ARGUEMENT };
//	commas_to_string(cmd_buf, cmd_segment,"," , 4);


	char * cmd_CMD;
	char * cmd_TEAMID;
	char * cmd_SETTING;
	char * cmd_ARGUEMENT;

	cmd_CMD			= strtok_r( cmd_buf ,",", &strtok_ptr );
	cmd_TEAMID		= strtok_r( cmd_CMD+strlen(cmd_CMD)+1,",", &strtok_ptr );
	cmd_SETTING		= strtok_r( cmd_TEAMID+strlen(cmd_TEAMID)+1,",", &strtok_ptr );
	cmd_ARGUEMENT	= strtok_r( cmd_SETTING+strlen(cmd_SETTING)+1,",", &strtok_ptr );

	//INITIALIZE PAYLOAD MESSAGE
	char payload_message[15];
	snprintf((char *)payload_message, 15, "%d,%d,%d,%s",md->hours,md->minutes,md->seconds, cmd_ARGUEMENT);

	//CORRECT PACKET STRUCTURE CHECKS
	if(strcmp(cmd_CMD, "CMD"))
	{
		return 1;
	}
	if(strcmp(cmd_TEAMID, "1011"))
	{
		return 2;
	}


	//ACTIVATE CONTAINER TELEMETRY
	if(!strcmp(cmd_SETTING, "CX"))
	{
		if(!strcmp(cmd_ARGUEMENT, "ON"))
		{
			md->telemetry_on = 1;
			HAL_TIM_Base_Start_IT(&htim2);
		} else if (!strcmp(cmd_ARGUEMENT, "OFF"))
		{
			md->telemetry_on = 0;
			HAL_TIM_Base_Stop_IT(&htim2);
		} else
		{
			return 4;
		}

	} else if (!strcmp(cmd_SETTING, "ST"))
	{

		char * st_TIME[3];
//		enum time_enum {HH, MM, SS};
//		commas_to_string(cmd_segment[ARGUEMENT], st_TIME, ".", 4);

		char * HH;
		char * MM;
		char * SS;

		HH = strtok_r( cmd_ARGUEMENT,":", &strtok_ptr );
		MM = strtok_r( NULL,":", &strtok_ptr );
		SS = strtok_r( NULL,":", &strtok_ptr );

		md->hours = atoi(HH);
		md->minutes = atoi(MM);
		md->seconds = atoi(SS);

	} else if (!strcmp(cmd_SETTING, "SIM"))
	{
//		if(!strstr(cmd_ARGUEMENT, "ENABLE") != NULL)
		if(!strcmp(cmd_ARGUEMENT, "ENABLE"))
		{
			md->sim_enabled = 1;
		} else if (!strcmp(cmd_ARGUEMENT, "ACTIVATE"))
		{
			md->sim_active = 1;
			md->flight_or_sim = 'S';
			md->telemetry_on = 0;
		} else if (!strcmp(cmd_ARGUEMENT, "DISABLE"))
		{
			md->sim_enabled = 0;
			md->sim_active = 0;
			md->flight_or_sim = 'F';
			sim_data_received = 0;
			first_sim_data_val = 0;
			sim_altitude_history[0] = 0;
			sim_altitude_history[1] = 0;
			sim_altitude_history[2] = 0;
			sim_altitude_history[3] = 0;
			sim_altitude_history[4] = 0;
		} else
		{
			return 5;
		}

	} else if (!strcmp(cmd_SETTING, "SPX"))
	{
		if(!strcmp(cmd_ARGUEMENT, "ON"))
		{
			md->sp_tele = 1;
			//
		} else if (!strcmp(cmd_ARGUEMENT, "OFF"))
		{
			md->sp_tele = 0;
			//send_telemetry_payload(payload_off, SP1_MAC_ADDR);
		} else
		{
			return 6;
		}
		send_telemetry_payload(payload_message, SP_MAC_ADDR);

	} else if (!strcmp(cmd_SETTING, "SIMP"))
	{
		md->telemetry_on = 1;
		if( !(md->sim_active && md->sim_enabled) ) //shouldn't listen to SIMP commands w/o receiving active and enable first
		{
			return 8;
		}
		md->sim_data = strtol(cmd_ARGUEMENT, NULL, 0);

	} else if (!strcmp(cmd_SETTING, "CLR"))
	{
		snprintf((char *)payload_message, 15, "%d,%d,%d,%s", md->hours,md->minutes,md->seconds,cmd_SETTING);
		send_telemetry_payload(cmd_SETTING, SP_MAC_ADDR);
//		clearFlash();
	}
	else
	{
		return 3;
	}

	sprintf(last_cmd, "%s%s", cmd_SETTING, cmd_ARGUEMENT);

}

//TODO mission time increment
void incrementTime(volatile struct MissionData * md)
{
	uint8_t s_flag = 0;
	uint8_t m_flag = 0;
	uint8_t h_flag = 0;
	md->seconds = (md->seconds + 1);
	if (md->seconds == 60)
	{
		md->seconds = 0;
		s_flag = 1;
	}

	if (s_flag == 1)
	{
		md->minutes = (md->minutes + 1);
		s_flag = 0;
		if (md->minutes == 60){
			md->minutes = 0;
			m_flag = 1;
		}
	}
	if (m_flag == 1)
	{
		md->hours = (md->hours + 1);
		m_flag = 0;
		if (md->hours == 24){
			md->hours = 0;
			//h_flag = 1;
		}
	}
}

/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */
  mission_data.flight_or_sim = 'F'; //Simulation Mode Toggle
  mission_data.sp_released = 'N';   //Payload released
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_TIM2_Init();
  MX_I2C1_Init();
  MX_USART1_UART_Init();
  MX_USART3_UART_Init();
  /* USER CODE BEGIN 2 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  GPIO_InitStruct.Pin = I2C_SDA_Pin | I2C_SCL_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);


  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);									//lead screw actuator

  HAL_Delay(10);

  TIM2->CCR1 = 180;

  uint8_t bme280_addr = BME280_I2C_ADDR_PRIM;
    	bme280_d.intf_ptr = &bme280_addr;
    	bme280_d.intf = BME280_I2C_INTF;
    	bme280_d.read = bme280_read;
    	bme280_d.write = bme280_write;
    	bme280_d.delay_us = delay_test;

    	uint8_t check,data;
    	data = 0xB6;
    	HAL_I2C_Mem_Write(&hi2c1, BME280_I2C_ADDR_PRIM << 1, BME280_RESET_ADDR, 1, &data, 1 , 1000);
    	HAL_Delay(30);
    	bme280_init(&bme280_d);


		stream_bme280_data_normal_mode(&bme280_d);
		MPU6050_init();
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  //CH_DC = 0;				//speed setting for lead screw
	  //TIM2->CCR1 = CH_DC;		//set speed

	  	 HAL_Delay(200);
	  //	 HAL_GPIO_WritePin(GPIOA, SOLENOID_DRIVE_Pin, GPIO_PIN_RESET);
	  	 readSensors(&mission_data);
	  	 uint32_t test_1 = TIM1->CCR1;
	  	 HAL_Delay(200);
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
  {
    Error_Handler();
  }
}

/**
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{

  /* USER CODE BEGIN I2C1_Init 0 */

  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
  hi2c1.Init.ClockSpeed = 100000;
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
  hi2c1.Init.OwnAddress1 = 0;
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
  hi2c1.Init.OwnAddress2 = 0;
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}

/**
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
  TIM_MasterConfigTypeDef sMasterConfig = {0};
  TIM_OC_InitTypeDef sConfigOC = {0};

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
  htim2.Init.Prescaler = 0;
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim2.Init.Period = 65535;
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
  {
    Error_Handler();
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
  {
    Error_Handler();
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
  {
    Error_Handler();
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
  sConfigOC.Pulse = 0;
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);

}

/**
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{

  /* USER CODE BEGIN USART1_Init 0 */

  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
  huart1.Init.BaudRate = 115200;
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
  huart1.Init.StopBits = UART_STOPBITS_1;
  huart1.Init.Parity = UART_PARITY_NONE;
  huart1.Init.Mode = UART_MODE_TX_RX;
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
  if (HAL_MultiProcessor_Init(&huart1, 0, UART_WAKEUPMETHOD_IDLELINE) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}

/**
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{

  /* USER CODE BEGIN USART3_Init 0 */

  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
  huart3.Init.BaudRate = 115200;
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
  huart3.Init.StopBits = UART_STOPBITS_1;
  huart3.Init.Parity = UART_PARITY_NONE;
  huart3.Init.Mode = UART_MODE_TX_RX;
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
  if (HAL_UART_Init(&huart3) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}

/**
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SOLENOID1_Pin|SOLENOID2_Pin|XBEE1_SLEEP_Pin|MPU_INT_Pin
                          |GPIO_PI_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, BUZZER_Pin|TESTLED_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  /*Configure GPIO pin : PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  /*Configure GPIO pins : SWDIO_Pin SWCLK_Pin MPU_INTA14_Pin */
  GPIO_InitStruct.Pin = SWDIO_Pin|SWCLK_Pin|MPU_INTA14_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  /*Configure GPIO pins : SOLENOID1_Pin SOLENOID2_Pin XBEE1_SLEEP_Pin MPU_INT_Pin
                           GPIO_PI_Pin */
  GPIO_InitStruct.Pin = SOLENOID1_Pin|SOLENOID2_Pin|XBEE1_SLEEP_Pin|MPU_INT_Pin
                          |GPIO_PI_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  /*Configure GPIO pins : BOOT1_Pin MAG_INT_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin|MAG_INT_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

  /*Configure GPIO pins : PB12 PB13 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

  /*Configure GPIO pins : BUZZER_Pin TESTLED_Pin */
  GPIO_InitStruct.Pin = BUZZER_Pin|TESTLED_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

}

/* USER CODE BEGIN 4 */

/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
