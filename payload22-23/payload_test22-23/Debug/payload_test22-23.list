
payload_test22-23.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000098f4  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000518  08009a08  08009a08  00019a08  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009f20  08009f20  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  08009f20  08009f20  00019f20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009f28  08009f28  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009f28  08009f28  00019f28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009f2c  08009f2c  00019f2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08009f30  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001b4  200001dc  0800a10c  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000390  0800a10c  00020390  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ebdf  00000000  00000000  00020205  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001ff4  00000000  00000000  0002ede4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001038  00000000  00000000  00030dd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f88  00000000  00000000  00031e10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018cac  00000000  00000000  00032d98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010db5  00000000  00000000  0004ba44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008f596  00000000  00000000  0005c7f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000ebd8f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000592c  00000000  00000000  000ebde0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001dc 	.word	0x200001dc
 800012c:	00000000 	.word	0x00000000
 8000130:	080099ec 	.word	0x080099ec

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e0 	.word	0x200001e0
 800014c:	080099ec 	.word	0x080099ec

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2f>:
 8000a88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a8c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a90:	bf24      	itt	cs
 8000a92:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a96:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a9a:	d90d      	bls.n	8000ab8 <__aeabi_d2f+0x30>
 8000a9c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000aa0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aa8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aac:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ab0:	bf08      	it	eq
 8000ab2:	f020 0001 	biceq.w	r0, r0, #1
 8000ab6:	4770      	bx	lr
 8000ab8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000abc:	d121      	bne.n	8000b02 <__aeabi_d2f+0x7a>
 8000abe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ac2:	bfbc      	itt	lt
 8000ac4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ac8:	4770      	bxlt	lr
 8000aca:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ace:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ad2:	f1c2 0218 	rsb	r2, r2, #24
 8000ad6:	f1c2 0c20 	rsb	ip, r2, #32
 8000ada:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ade:	fa20 f002 	lsr.w	r0, r0, r2
 8000ae2:	bf18      	it	ne
 8000ae4:	f040 0001 	orrne.w	r0, r0, #1
 8000ae8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aec:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000af0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af4:	ea40 000c 	orr.w	r0, r0, ip
 8000af8:	fa23 f302 	lsr.w	r3, r3, r2
 8000afc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b00:	e7cc      	b.n	8000a9c <__aeabi_d2f+0x14>
 8000b02:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b06:	d107      	bne.n	8000b18 <__aeabi_d2f+0x90>
 8000b08:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b0c:	bf1e      	ittt	ne
 8000b0e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b12:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b16:	4770      	bxne	lr
 8000b18:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b1c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b20:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop

08000b28 <__aeabi_ldivmod>:
 8000b28:	b97b      	cbnz	r3, 8000b4a <__aeabi_ldivmod+0x22>
 8000b2a:	b972      	cbnz	r2, 8000b4a <__aeabi_ldivmod+0x22>
 8000b2c:	2900      	cmp	r1, #0
 8000b2e:	bfbe      	ittt	lt
 8000b30:	2000      	movlt	r0, #0
 8000b32:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000b36:	e006      	blt.n	8000b46 <__aeabi_ldivmod+0x1e>
 8000b38:	bf08      	it	eq
 8000b3a:	2800      	cmpeq	r0, #0
 8000b3c:	bf1c      	itt	ne
 8000b3e:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000b42:	f04f 30ff 	movne.w	r0, #4294967295
 8000b46:	f000 b9a9 	b.w	8000e9c <__aeabi_idiv0>
 8000b4a:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b4e:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b52:	2900      	cmp	r1, #0
 8000b54:	db09      	blt.n	8000b6a <__aeabi_ldivmod+0x42>
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	db1a      	blt.n	8000b90 <__aeabi_ldivmod+0x68>
 8000b5a:	f000 f835 	bl	8000bc8 <__udivmoddi4>
 8000b5e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b62:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b66:	b004      	add	sp, #16
 8000b68:	4770      	bx	lr
 8000b6a:	4240      	negs	r0, r0
 8000b6c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	db1b      	blt.n	8000bac <__aeabi_ldivmod+0x84>
 8000b74:	f000 f828 	bl	8000bc8 <__udivmoddi4>
 8000b78:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b7c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b80:	b004      	add	sp, #16
 8000b82:	4240      	negs	r0, r0
 8000b84:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b88:	4252      	negs	r2, r2
 8000b8a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000b8e:	4770      	bx	lr
 8000b90:	4252      	negs	r2, r2
 8000b92:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000b96:	f000 f817 	bl	8000bc8 <__udivmoddi4>
 8000b9a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b9e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ba2:	b004      	add	sp, #16
 8000ba4:	4240      	negs	r0, r0
 8000ba6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000baa:	4770      	bx	lr
 8000bac:	4252      	negs	r2, r2
 8000bae:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000bb2:	f000 f809 	bl	8000bc8 <__udivmoddi4>
 8000bb6:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bba:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bbe:	b004      	add	sp, #16
 8000bc0:	4252      	negs	r2, r2
 8000bc2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000bc6:	4770      	bx	lr

08000bc8 <__udivmoddi4>:
 8000bc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bcc:	9e08      	ldr	r6, [sp, #32]
 8000bce:	460d      	mov	r5, r1
 8000bd0:	4604      	mov	r4, r0
 8000bd2:	4688      	mov	r8, r1
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d14d      	bne.n	8000c74 <__udivmoddi4+0xac>
 8000bd8:	428a      	cmp	r2, r1
 8000bda:	4694      	mov	ip, r2
 8000bdc:	d968      	bls.n	8000cb0 <__udivmoddi4+0xe8>
 8000bde:	fab2 f282 	clz	r2, r2
 8000be2:	b152      	cbz	r2, 8000bfa <__udivmoddi4+0x32>
 8000be4:	fa01 f302 	lsl.w	r3, r1, r2
 8000be8:	f1c2 0120 	rsb	r1, r2, #32
 8000bec:	fa20 f101 	lsr.w	r1, r0, r1
 8000bf0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000bf4:	ea41 0803 	orr.w	r8, r1, r3
 8000bf8:	4094      	lsls	r4, r2
 8000bfa:	ea4f 411c 	mov.w	r1, ip, lsr #16
 8000bfe:	fbb8 f7f1 	udiv	r7, r8, r1
 8000c02:	fa1f fe8c 	uxth.w	lr, ip
 8000c06:	fb01 8817 	mls	r8, r1, r7, r8
 8000c0a:	fb07 f00e 	mul.w	r0, r7, lr
 8000c0e:	0c23      	lsrs	r3, r4, #16
 8000c10:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c14:	4298      	cmp	r0, r3
 8000c16:	d90a      	bls.n	8000c2e <__udivmoddi4+0x66>
 8000c18:	eb1c 0303 	adds.w	r3, ip, r3
 8000c1c:	f107 35ff 	add.w	r5, r7, #4294967295
 8000c20:	f080 811e 	bcs.w	8000e60 <__udivmoddi4+0x298>
 8000c24:	4298      	cmp	r0, r3
 8000c26:	f240 811b 	bls.w	8000e60 <__udivmoddi4+0x298>
 8000c2a:	3f02      	subs	r7, #2
 8000c2c:	4463      	add	r3, ip
 8000c2e:	1a1b      	subs	r3, r3, r0
 8000c30:	fbb3 f0f1 	udiv	r0, r3, r1
 8000c34:	fb01 3310 	mls	r3, r1, r0, r3
 8000c38:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c3c:	b2a4      	uxth	r4, r4
 8000c3e:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c42:	45a6      	cmp	lr, r4
 8000c44:	d90a      	bls.n	8000c5c <__udivmoddi4+0x94>
 8000c46:	eb1c 0404 	adds.w	r4, ip, r4
 8000c4a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c4e:	f080 8109 	bcs.w	8000e64 <__udivmoddi4+0x29c>
 8000c52:	45a6      	cmp	lr, r4
 8000c54:	f240 8106 	bls.w	8000e64 <__udivmoddi4+0x29c>
 8000c58:	4464      	add	r4, ip
 8000c5a:	3802      	subs	r0, #2
 8000c5c:	2100      	movs	r1, #0
 8000c5e:	eba4 040e 	sub.w	r4, r4, lr
 8000c62:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000c66:	b11e      	cbz	r6, 8000c70 <__udivmoddi4+0xa8>
 8000c68:	2300      	movs	r3, #0
 8000c6a:	40d4      	lsrs	r4, r2
 8000c6c:	e9c6 4300 	strd	r4, r3, [r6]
 8000c70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c74:	428b      	cmp	r3, r1
 8000c76:	d908      	bls.n	8000c8a <__udivmoddi4+0xc2>
 8000c78:	2e00      	cmp	r6, #0
 8000c7a:	f000 80ee 	beq.w	8000e5a <__udivmoddi4+0x292>
 8000c7e:	2100      	movs	r1, #0
 8000c80:	e9c6 0500 	strd	r0, r5, [r6]
 8000c84:	4608      	mov	r0, r1
 8000c86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c8a:	fab3 f183 	clz	r1, r3
 8000c8e:	2900      	cmp	r1, #0
 8000c90:	d14a      	bne.n	8000d28 <__udivmoddi4+0x160>
 8000c92:	42ab      	cmp	r3, r5
 8000c94:	d302      	bcc.n	8000c9c <__udivmoddi4+0xd4>
 8000c96:	4282      	cmp	r2, r0
 8000c98:	f200 80fc 	bhi.w	8000e94 <__udivmoddi4+0x2cc>
 8000c9c:	1a84      	subs	r4, r0, r2
 8000c9e:	eb65 0303 	sbc.w	r3, r5, r3
 8000ca2:	2001      	movs	r0, #1
 8000ca4:	4698      	mov	r8, r3
 8000ca6:	2e00      	cmp	r6, #0
 8000ca8:	d0e2      	beq.n	8000c70 <__udivmoddi4+0xa8>
 8000caa:	e9c6 4800 	strd	r4, r8, [r6]
 8000cae:	e7df      	b.n	8000c70 <__udivmoddi4+0xa8>
 8000cb0:	b902      	cbnz	r2, 8000cb4 <__udivmoddi4+0xec>
 8000cb2:	deff      	udf	#255	; 0xff
 8000cb4:	fab2 f282 	clz	r2, r2
 8000cb8:	2a00      	cmp	r2, #0
 8000cba:	f040 8091 	bne.w	8000de0 <__udivmoddi4+0x218>
 8000cbe:	eba1 000c 	sub.w	r0, r1, ip
 8000cc2:	2101      	movs	r1, #1
 8000cc4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cc8:	fa1f fe8c 	uxth.w	lr, ip
 8000ccc:	fbb0 f3f7 	udiv	r3, r0, r7
 8000cd0:	fb07 0013 	mls	r0, r7, r3, r0
 8000cd4:	0c25      	lsrs	r5, r4, #16
 8000cd6:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8000cda:	fb0e f003 	mul.w	r0, lr, r3
 8000cde:	42a8      	cmp	r0, r5
 8000ce0:	d908      	bls.n	8000cf4 <__udivmoddi4+0x12c>
 8000ce2:	eb1c 0505 	adds.w	r5, ip, r5
 8000ce6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000cea:	d202      	bcs.n	8000cf2 <__udivmoddi4+0x12a>
 8000cec:	42a8      	cmp	r0, r5
 8000cee:	f200 80ce 	bhi.w	8000e8e <__udivmoddi4+0x2c6>
 8000cf2:	4643      	mov	r3, r8
 8000cf4:	1a2d      	subs	r5, r5, r0
 8000cf6:	fbb5 f0f7 	udiv	r0, r5, r7
 8000cfa:	fb07 5510 	mls	r5, r7, r0, r5
 8000cfe:	fb0e fe00 	mul.w	lr, lr, r0
 8000d02:	b2a4      	uxth	r4, r4
 8000d04:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d08:	45a6      	cmp	lr, r4
 8000d0a:	d908      	bls.n	8000d1e <__udivmoddi4+0x156>
 8000d0c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d10:	f100 35ff 	add.w	r5, r0, #4294967295
 8000d14:	d202      	bcs.n	8000d1c <__udivmoddi4+0x154>
 8000d16:	45a6      	cmp	lr, r4
 8000d18:	f200 80b6 	bhi.w	8000e88 <__udivmoddi4+0x2c0>
 8000d1c:	4628      	mov	r0, r5
 8000d1e:	eba4 040e 	sub.w	r4, r4, lr
 8000d22:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d26:	e79e      	b.n	8000c66 <__udivmoddi4+0x9e>
 8000d28:	f1c1 0720 	rsb	r7, r1, #32
 8000d2c:	408b      	lsls	r3, r1
 8000d2e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d32:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d36:	fa25 fa07 	lsr.w	sl, r5, r7
 8000d3a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d3e:	fbba f8f9 	udiv	r8, sl, r9
 8000d42:	fa20 f307 	lsr.w	r3, r0, r7
 8000d46:	fb09 aa18 	mls	sl, r9, r8, sl
 8000d4a:	408d      	lsls	r5, r1
 8000d4c:	fa1f fe8c 	uxth.w	lr, ip
 8000d50:	431d      	orrs	r5, r3
 8000d52:	fa00 f301 	lsl.w	r3, r0, r1
 8000d56:	fb08 f00e 	mul.w	r0, r8, lr
 8000d5a:	0c2c      	lsrs	r4, r5, #16
 8000d5c:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8000d60:	42a0      	cmp	r0, r4
 8000d62:	fa02 f201 	lsl.w	r2, r2, r1
 8000d66:	d90b      	bls.n	8000d80 <__udivmoddi4+0x1b8>
 8000d68:	eb1c 0404 	adds.w	r4, ip, r4
 8000d6c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d70:	f080 8088 	bcs.w	8000e84 <__udivmoddi4+0x2bc>
 8000d74:	42a0      	cmp	r0, r4
 8000d76:	f240 8085 	bls.w	8000e84 <__udivmoddi4+0x2bc>
 8000d7a:	f1a8 0802 	sub.w	r8, r8, #2
 8000d7e:	4464      	add	r4, ip
 8000d80:	1a24      	subs	r4, r4, r0
 8000d82:	fbb4 f0f9 	udiv	r0, r4, r9
 8000d86:	fb09 4410 	mls	r4, r9, r0, r4
 8000d8a:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d8e:	b2ad      	uxth	r5, r5
 8000d90:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000d94:	45a6      	cmp	lr, r4
 8000d96:	d908      	bls.n	8000daa <__udivmoddi4+0x1e2>
 8000d98:	eb1c 0404 	adds.w	r4, ip, r4
 8000d9c:	f100 35ff 	add.w	r5, r0, #4294967295
 8000da0:	d26c      	bcs.n	8000e7c <__udivmoddi4+0x2b4>
 8000da2:	45a6      	cmp	lr, r4
 8000da4:	d96a      	bls.n	8000e7c <__udivmoddi4+0x2b4>
 8000da6:	3802      	subs	r0, #2
 8000da8:	4464      	add	r4, ip
 8000daa:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dae:	fba0 9502 	umull	r9, r5, r0, r2
 8000db2:	eba4 040e 	sub.w	r4, r4, lr
 8000db6:	42ac      	cmp	r4, r5
 8000db8:	46c8      	mov	r8, r9
 8000dba:	46ae      	mov	lr, r5
 8000dbc:	d356      	bcc.n	8000e6c <__udivmoddi4+0x2a4>
 8000dbe:	d053      	beq.n	8000e68 <__udivmoddi4+0x2a0>
 8000dc0:	2e00      	cmp	r6, #0
 8000dc2:	d069      	beq.n	8000e98 <__udivmoddi4+0x2d0>
 8000dc4:	ebb3 0208 	subs.w	r2, r3, r8
 8000dc8:	eb64 040e 	sbc.w	r4, r4, lr
 8000dcc:	fa22 f301 	lsr.w	r3, r2, r1
 8000dd0:	fa04 f707 	lsl.w	r7, r4, r7
 8000dd4:	431f      	orrs	r7, r3
 8000dd6:	40cc      	lsrs	r4, r1
 8000dd8:	e9c6 7400 	strd	r7, r4, [r6]
 8000ddc:	2100      	movs	r1, #0
 8000dde:	e747      	b.n	8000c70 <__udivmoddi4+0xa8>
 8000de0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000de4:	f1c2 0120 	rsb	r1, r2, #32
 8000de8:	fa25 f301 	lsr.w	r3, r5, r1
 8000dec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000df0:	fa20 f101 	lsr.w	r1, r0, r1
 8000df4:	4095      	lsls	r5, r2
 8000df6:	430d      	orrs	r5, r1
 8000df8:	fbb3 f1f7 	udiv	r1, r3, r7
 8000dfc:	fb07 3311 	mls	r3, r7, r1, r3
 8000e00:	fa1f fe8c 	uxth.w	lr, ip
 8000e04:	0c28      	lsrs	r0, r5, #16
 8000e06:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e0a:	fb01 f30e 	mul.w	r3, r1, lr
 8000e0e:	4283      	cmp	r3, r0
 8000e10:	fa04 f402 	lsl.w	r4, r4, r2
 8000e14:	d908      	bls.n	8000e28 <__udivmoddi4+0x260>
 8000e16:	eb1c 0000 	adds.w	r0, ip, r0
 8000e1a:	f101 38ff 	add.w	r8, r1, #4294967295
 8000e1e:	d22f      	bcs.n	8000e80 <__udivmoddi4+0x2b8>
 8000e20:	4283      	cmp	r3, r0
 8000e22:	d92d      	bls.n	8000e80 <__udivmoddi4+0x2b8>
 8000e24:	3902      	subs	r1, #2
 8000e26:	4460      	add	r0, ip
 8000e28:	1ac0      	subs	r0, r0, r3
 8000e2a:	fbb0 f3f7 	udiv	r3, r0, r7
 8000e2e:	fb07 0013 	mls	r0, r7, r3, r0
 8000e32:	b2ad      	uxth	r5, r5
 8000e34:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8000e38:	fb03 f00e 	mul.w	r0, r3, lr
 8000e3c:	42a8      	cmp	r0, r5
 8000e3e:	d908      	bls.n	8000e52 <__udivmoddi4+0x28a>
 8000e40:	eb1c 0505 	adds.w	r5, ip, r5
 8000e44:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e48:	d216      	bcs.n	8000e78 <__udivmoddi4+0x2b0>
 8000e4a:	42a8      	cmp	r0, r5
 8000e4c:	d914      	bls.n	8000e78 <__udivmoddi4+0x2b0>
 8000e4e:	3b02      	subs	r3, #2
 8000e50:	4465      	add	r5, ip
 8000e52:	1a28      	subs	r0, r5, r0
 8000e54:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e58:	e738      	b.n	8000ccc <__udivmoddi4+0x104>
 8000e5a:	4631      	mov	r1, r6
 8000e5c:	4630      	mov	r0, r6
 8000e5e:	e707      	b.n	8000c70 <__udivmoddi4+0xa8>
 8000e60:	462f      	mov	r7, r5
 8000e62:	e6e4      	b.n	8000c2e <__udivmoddi4+0x66>
 8000e64:	4618      	mov	r0, r3
 8000e66:	e6f9      	b.n	8000c5c <__udivmoddi4+0x94>
 8000e68:	454b      	cmp	r3, r9
 8000e6a:	d2a9      	bcs.n	8000dc0 <__udivmoddi4+0x1f8>
 8000e6c:	ebb9 0802 	subs.w	r8, r9, r2
 8000e70:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000e74:	3801      	subs	r0, #1
 8000e76:	e7a3      	b.n	8000dc0 <__udivmoddi4+0x1f8>
 8000e78:	4643      	mov	r3, r8
 8000e7a:	e7ea      	b.n	8000e52 <__udivmoddi4+0x28a>
 8000e7c:	4628      	mov	r0, r5
 8000e7e:	e794      	b.n	8000daa <__udivmoddi4+0x1e2>
 8000e80:	4641      	mov	r1, r8
 8000e82:	e7d1      	b.n	8000e28 <__udivmoddi4+0x260>
 8000e84:	46d0      	mov	r8, sl
 8000e86:	e77b      	b.n	8000d80 <__udivmoddi4+0x1b8>
 8000e88:	4464      	add	r4, ip
 8000e8a:	3802      	subs	r0, #2
 8000e8c:	e747      	b.n	8000d1e <__udivmoddi4+0x156>
 8000e8e:	3b02      	subs	r3, #2
 8000e90:	4465      	add	r5, ip
 8000e92:	e72f      	b.n	8000cf4 <__udivmoddi4+0x12c>
 8000e94:	4608      	mov	r0, r1
 8000e96:	e706      	b.n	8000ca6 <__udivmoddi4+0xde>
 8000e98:	4631      	mov	r1, r6
 8000e9a:	e6e9      	b.n	8000c70 <__udivmoddi4+0xa8>

08000e9c <__aeabi_idiv0>:
 8000e9c:	4770      	bx	lr
 8000e9e:	bf00      	nop

08000ea0 <bme280_init>:
/*!
 *  @brief This API is the entry point.
 *  It reads the chip-id and calibration data from the sensor.
 */
int8_t bme280_init(struct bme280_dev *dev)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b084      	sub	sp, #16
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
    int8_t rslt;

    /* chip id read try count */
    uint8_t try_count = 5;
 8000ea8:	2305      	movs	r3, #5
 8000eaa:	73bb      	strb	r3, [r7, #14]
    uint8_t chip_id = 0;
 8000eac:	2300      	movs	r3, #0
 8000eae:	737b      	strb	r3, [r7, #13]

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 8000eb0:	6878      	ldr	r0, [r7, #4]
 8000eb2:	f001 f835 	bl	8001f20 <null_ptr_check>
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	73fb      	strb	r3, [r7, #15]

    /* Proceed if null check is fine */

    if (rslt == BME280_OK)
 8000eba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d136      	bne.n	8000f30 <bme280_init+0x90>
    {
        while (try_count)
 8000ec2:	e02b      	b.n	8000f1c <bme280_init+0x7c>
        {
            /* Read the chip-id of bme280 sensor */
            rslt = bme280_get_regs(BME280_CHIP_ID_ADDR, &chip_id, 1, dev);
 8000ec4:	f107 010d 	add.w	r1, r7, #13
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	2201      	movs	r2, #1
 8000ecc:	20d0      	movs	r0, #208	; 0xd0
 8000ece:	f000 f835 	bl	8000f3c <bme280_get_regs>
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	73fb      	strb	r3, [r7, #15]

            /* Check for chip id validity */
            if ((rslt == BME280_OK) && (chip_id == BME280_CHIP_ID))
 8000ed6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d114      	bne.n	8000f08 <bme280_init+0x68>
 8000ede:	7b7b      	ldrb	r3, [r7, #13]
 8000ee0:	2b60      	cmp	r3, #96	; 0x60
 8000ee2:	d111      	bne.n	8000f08 <bme280_init+0x68>
            {
                dev->chip_id = chip_id;
 8000ee4:	7b7a      	ldrb	r2, [r7, #13]
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	701a      	strb	r2, [r3, #0]

                /* Reset the sensor */
                rslt = bme280_soft_reset(dev);
 8000eea:	6878      	ldr	r0, [r7, #4]
 8000eec:	f000 f8dc 	bl	80010a8 <bme280_soft_reset>
 8000ef0:	4603      	mov	r3, r0
 8000ef2:	73fb      	strb	r3, [r7, #15]

                if (rslt == BME280_OK)
 8000ef4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d113      	bne.n	8000f24 <bme280_init+0x84>
                {
                    /* Read the calibration data */
                    rslt = get_calib_data(dev);
 8000efc:	6878      	ldr	r0, [r7, #4]
 8000efe:	f000 fea4 	bl	8001c4a <get_calib_data>
 8000f02:	4603      	mov	r3, r0
 8000f04:	73fb      	strb	r3, [r7, #15]
                }

                break;
 8000f06:	e00d      	b.n	8000f24 <bme280_init+0x84>
            }

            /* Wait for 1 ms */
            dev->delay_us(100, dev->intf_ptr);
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	695b      	ldr	r3, [r3, #20]
 8000f0c:	687a      	ldr	r2, [r7, #4]
 8000f0e:	6852      	ldr	r2, [r2, #4]
 8000f10:	4611      	mov	r1, r2
 8000f12:	2064      	movs	r0, #100	; 0x64
 8000f14:	4798      	blx	r3
            --try_count;
 8000f16:	7bbb      	ldrb	r3, [r7, #14]
 8000f18:	3b01      	subs	r3, #1
 8000f1a:	73bb      	strb	r3, [r7, #14]
        while (try_count)
 8000f1c:	7bbb      	ldrb	r3, [r7, #14]
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d1d0      	bne.n	8000ec4 <bme280_init+0x24>
 8000f22:	e000      	b.n	8000f26 <bme280_init+0x86>
                break;
 8000f24:	bf00      	nop
        }

        /* Chip id check failed */
        if (!try_count)
 8000f26:	7bbb      	ldrb	r3, [r7, #14]
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d101      	bne.n	8000f30 <bme280_init+0x90>
        {
            rslt = BME280_E_DEV_NOT_FOUND;
 8000f2c:	23fe      	movs	r3, #254	; 0xfe
 8000f2e:	73fb      	strb	r3, [r7, #15]
        }
    }

    return rslt;
 8000f30:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000f34:	4618      	mov	r0, r3
 8000f36:	3710      	adds	r7, #16
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	bd80      	pop	{r7, pc}

08000f3c <bme280_get_regs>:

/*!
 * @brief This API reads the data from the given register address of the sensor.
 */
int8_t bme280_get_regs(uint8_t reg_addr, uint8_t *reg_data, uint16_t len, struct bme280_dev *dev)
{
 8000f3c:	b590      	push	{r4, r7, lr}
 8000f3e:	b087      	sub	sp, #28
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	60b9      	str	r1, [r7, #8]
 8000f44:	607b      	str	r3, [r7, #4]
 8000f46:	4603      	mov	r3, r0
 8000f48:	73fb      	strb	r3, [r7, #15]
 8000f4a:	4613      	mov	r3, r2
 8000f4c:	81bb      	strh	r3, [r7, #12]
    int8_t rslt;

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 8000f4e:	6878      	ldr	r0, [r7, #4]
 8000f50:	f000 ffe6 	bl	8001f20 <null_ptr_check>
 8000f54:	4603      	mov	r3, r0
 8000f56:	75fb      	strb	r3, [r7, #23]

    /* Proceed if null check is fine */
    if ((rslt == BME280_OK) && (reg_data != NULL))
 8000f58:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d11f      	bne.n	8000fa0 <bme280_get_regs+0x64>
 8000f60:	68bb      	ldr	r3, [r7, #8]
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d01c      	beq.n	8000fa0 <bme280_get_regs+0x64>
    {
        /* If interface selected is SPI */
        if (dev->intf != BME280_I2C_INTF)
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	7a1b      	ldrb	r3, [r3, #8]
 8000f6a:	2b01      	cmp	r3, #1
 8000f6c:	d003      	beq.n	8000f76 <bme280_get_regs+0x3a>
        {
            reg_addr = reg_addr | 0x80;
 8000f6e:	7bfb      	ldrb	r3, [r7, #15]
 8000f70:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000f74:	73fb      	strb	r3, [r7, #15]
        }

        /* Read the data  */
        dev->intf_rslt = dev->read(reg_addr, reg_data, len, dev->intf_ptr);
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	68dc      	ldr	r4, [r3, #12]
 8000f7a:	89ba      	ldrh	r2, [r7, #12]
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	685b      	ldr	r3, [r3, #4]
 8000f80:	7bf8      	ldrb	r0, [r7, #15]
 8000f82:	68b9      	ldr	r1, [r7, #8]
 8000f84:	47a0      	blx	r4
 8000f86:	4603      	mov	r3, r0
 8000f88:	461a      	mov	r2, r3
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

        /* Check for communication error */
        if (dev->intf_rslt != BME280_INTF_RET_SUCCESS)
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	f993 3045 	ldrsb.w	r3, [r3, #69]	; 0x45
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d004      	beq.n	8000fa4 <bme280_get_regs+0x68>
        {
            rslt = BME280_E_COMM_FAIL;
 8000f9a:	23fc      	movs	r3, #252	; 0xfc
 8000f9c:	75fb      	strb	r3, [r7, #23]
        if (dev->intf_rslt != BME280_INTF_RET_SUCCESS)
 8000f9e:	e001      	b.n	8000fa4 <bme280_get_regs+0x68>
        }
    }
    else
    {
        rslt = BME280_E_NULL_PTR;
 8000fa0:	23ff      	movs	r3, #255	; 0xff
 8000fa2:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8000fa4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8000fa8:	4618      	mov	r0, r3
 8000faa:	371c      	adds	r7, #28
 8000fac:	46bd      	mov	sp, r7
 8000fae:	bd90      	pop	{r4, r7, pc}

08000fb0 <bme280_set_regs>:
/*!
 * @brief This API writes the given data to the register address
 * of the sensor.
 */
int8_t bme280_set_regs(uint8_t *reg_addr, const uint8_t *reg_data, uint8_t len, struct bme280_dev *dev)
{
 8000fb0:	b590      	push	{r4, r7, lr}
 8000fb2:	b08d      	sub	sp, #52	; 0x34
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	60f8      	str	r0, [r7, #12]
 8000fb8:	60b9      	str	r1, [r7, #8]
 8000fba:	603b      	str	r3, [r7, #0]
 8000fbc:	4613      	mov	r3, r2
 8000fbe:	71fb      	strb	r3, [r7, #7]
    int8_t rslt;
    uint8_t temp_buff[20]; /* Typically not to write more than 10 registers */

    if (len > 10)
 8000fc0:	79fb      	ldrb	r3, [r7, #7]
 8000fc2:	2b0a      	cmp	r3, #10
 8000fc4:	d901      	bls.n	8000fca <bme280_set_regs+0x1a>
    {
        len = 10;
 8000fc6:	230a      	movs	r3, #10
 8000fc8:	71fb      	strb	r3, [r7, #7]

    uint16_t temp_len;
    uint8_t reg_addr_cnt;

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 8000fca:	6838      	ldr	r0, [r7, #0]
 8000fcc:	f000 ffa8 	bl	8001f20 <null_ptr_check>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check for arguments validity */
    if ((rslt == BME280_OK) && (reg_addr != NULL) && (reg_data != NULL))
 8000fd6:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d159      	bne.n	8001092 <bme280_set_regs+0xe2>
 8000fde:	68fb      	ldr	r3, [r7, #12]
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d056      	beq.n	8001092 <bme280_set_regs+0xe2>
 8000fe4:	68bb      	ldr	r3, [r7, #8]
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d053      	beq.n	8001092 <bme280_set_regs+0xe2>
    {
        if (len != 0)
 8000fea:	79fb      	ldrb	r3, [r7, #7]
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d04c      	beq.n	800108a <bme280_set_regs+0xda>
        {
            temp_buff[0] = reg_data[0];
 8000ff0:	68bb      	ldr	r3, [r7, #8]
 8000ff2:	781b      	ldrb	r3, [r3, #0]
 8000ff4:	753b      	strb	r3, [r7, #20]

            /* If interface selected is SPI */
            if (dev->intf != BME280_I2C_INTF)
 8000ff6:	683b      	ldr	r3, [r7, #0]
 8000ff8:	7a1b      	ldrb	r3, [r3, #8]
 8000ffa:	2b01      	cmp	r3, #1
 8000ffc:	d01a      	beq.n	8001034 <bme280_set_regs+0x84>
            {
                for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 8000ffe:	2300      	movs	r3, #0
 8001000:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8001004:	e011      	b.n	800102a <bme280_set_regs+0x7a>
                {
                    reg_addr[reg_addr_cnt] = reg_addr[reg_addr_cnt] & 0x7F;
 8001006:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800100a:	68fa      	ldr	r2, [r7, #12]
 800100c:	4413      	add	r3, r2
 800100e:	781a      	ldrb	r2, [r3, #0]
 8001010:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8001014:	68f9      	ldr	r1, [r7, #12]
 8001016:	440b      	add	r3, r1
 8001018:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800101c:	b2d2      	uxtb	r2, r2
 800101e:	701a      	strb	r2, [r3, #0]
                for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 8001020:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8001024:	3301      	adds	r3, #1
 8001026:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800102a:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 800102e:	79fb      	ldrb	r3, [r7, #7]
 8001030:	429a      	cmp	r2, r3
 8001032:	d3e8      	bcc.n	8001006 <bme280_set_regs+0x56>
                }
            }

            /* Burst write mode */
            if (len > 1)
 8001034:	79fb      	ldrb	r3, [r7, #7]
 8001036:	2b01      	cmp	r3, #1
 8001038:	d90d      	bls.n	8001056 <bme280_set_regs+0xa6>
            {
                /* Interleave register address w.r.t data for
                 * burst write
                 */
                interleave_reg_addr(reg_addr, temp_buff, reg_data, len);
 800103a:	79fb      	ldrb	r3, [r7, #7]
 800103c:	f107 0114 	add.w	r1, r7, #20
 8001040:	68ba      	ldr	r2, [r7, #8]
 8001042:	68f8      	ldr	r0, [r7, #12]
 8001044:	f000 fe46 	bl	8001cd4 <interleave_reg_addr>
                temp_len = ((len * 2) - 1);
 8001048:	79fb      	ldrb	r3, [r7, #7]
 800104a:	b29b      	uxth	r3, r3
 800104c:	005b      	lsls	r3, r3, #1
 800104e:	b29b      	uxth	r3, r3
 8001050:	3b01      	subs	r3, #1
 8001052:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8001054:	e001      	b.n	800105a <bme280_set_regs+0xaa>
            }
            else
            {
                temp_len = len;
 8001056:	79fb      	ldrb	r3, [r7, #7]
 8001058:	85bb      	strh	r3, [r7, #44]	; 0x2c
            }

            dev->intf_rslt = dev->write(reg_addr[0], temp_buff, temp_len, dev->intf_ptr);
 800105a:	683b      	ldr	r3, [r7, #0]
 800105c:	691c      	ldr	r4, [r3, #16]
 800105e:	68fb      	ldr	r3, [r7, #12]
 8001060:	7818      	ldrb	r0, [r3, #0]
 8001062:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8001064:	683b      	ldr	r3, [r7, #0]
 8001066:	685b      	ldr	r3, [r3, #4]
 8001068:	f107 0114 	add.w	r1, r7, #20
 800106c:	47a0      	blx	r4
 800106e:	4603      	mov	r3, r0
 8001070:	461a      	mov	r2, r3
 8001072:	683b      	ldr	r3, [r7, #0]
 8001074:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

            /* Check for communication error */
            if (dev->intf_rslt != BME280_INTF_RET_SUCCESS)
 8001078:	683b      	ldr	r3, [r7, #0]
 800107a:	f993 3045 	ldrsb.w	r3, [r3, #69]	; 0x45
 800107e:	2b00      	cmp	r3, #0
 8001080:	d00b      	beq.n	800109a <bme280_set_regs+0xea>
            {
                rslt = BME280_E_COMM_FAIL;
 8001082:	23fc      	movs	r3, #252	; 0xfc
 8001084:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        if (len != 0)
 8001088:	e007      	b.n	800109a <bme280_set_regs+0xea>
            }
        }
        else
        {
            rslt = BME280_E_INVALID_LEN;
 800108a:	23fd      	movs	r3, #253	; 0xfd
 800108c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        if (len != 0)
 8001090:	e003      	b.n	800109a <bme280_set_regs+0xea>
        }
    }
    else
    {
        rslt = BME280_E_NULL_PTR;
 8001092:	23ff      	movs	r3, #255	; 0xff
 8001094:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8001098:	e000      	b.n	800109c <bme280_set_regs+0xec>
        if (len != 0)
 800109a:	bf00      	nop
    }

    return rslt;
 800109c:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 80010a0:	4618      	mov	r0, r3
 80010a2:	3734      	adds	r7, #52	; 0x34
 80010a4:	46bd      	mov	sp, r7
 80010a6:	bd90      	pop	{r4, r7, pc}

080010a8 <bme280_soft_reset>:

/*!
 * @brief This API performs the soft reset of the sensor.
 */
int8_t bme280_soft_reset(struct bme280_dev *dev)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b084      	sub	sp, #16
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t reg_addr = BME280_RESET_ADDR;
 80010b0:	23e0      	movs	r3, #224	; 0xe0
 80010b2:	737b      	strb	r3, [r7, #13]
    uint8_t status_reg = 0;
 80010b4:	2300      	movs	r3, #0
 80010b6:	733b      	strb	r3, [r7, #12]
    uint8_t try_run = 5;
 80010b8:	2305      	movs	r3, #5
 80010ba:	73bb      	strb	r3, [r7, #14]

    /* 0xB6 is the soft reset command */
    uint8_t soft_rst_cmd = BME280_SOFT_RESET_COMMAND;
 80010bc:	23b6      	movs	r3, #182	; 0xb6
 80010be:	72fb      	strb	r3, [r7, #11]

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 80010c0:	6878      	ldr	r0, [r7, #4]
 80010c2:	f000 ff2d 	bl	8001f20 <null_ptr_check>
 80010c6:	4603      	mov	r3, r0
 80010c8:	73fb      	strb	r3, [r7, #15]

    /* Proceed if null check is fine */
    if (rslt == BME280_OK)
 80010ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d133      	bne.n	800113a <bme280_soft_reset+0x92>
    {
        /* Write the soft reset command in the sensor */
        rslt = bme280_set_regs(&reg_addr, &soft_rst_cmd, 1, dev);
 80010d2:	f107 010b 	add.w	r1, r7, #11
 80010d6:	f107 000d 	add.w	r0, r7, #13
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	2201      	movs	r2, #1
 80010de:	f7ff ff67 	bl	8000fb0 <bme280_set_regs>
 80010e2:	4603      	mov	r3, r0
 80010e4:	73fb      	strb	r3, [r7, #15]

        if (rslt == BME280_OK)
 80010e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d125      	bne.n	800113a <bme280_soft_reset+0x92>
        {
            /* If NVM not copied yet, Wait for NVM to copy */
            do
            {
                /* As per data sheet - Table 1, startup time is 2 ms. */
                dev->delay_us(2000, dev->intf_ptr);
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	695b      	ldr	r3, [r3, #20]
 80010f2:	687a      	ldr	r2, [r7, #4]
 80010f4:	6852      	ldr	r2, [r2, #4]
 80010f6:	4611      	mov	r1, r2
 80010f8:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80010fc:	4798      	blx	r3
                rslt = bme280_get_regs(BME280_STATUS_REG_ADDR, &status_reg, 1, dev);
 80010fe:	f107 010c 	add.w	r1, r7, #12
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	2201      	movs	r2, #1
 8001106:	20f3      	movs	r0, #243	; 0xf3
 8001108:	f7ff ff18 	bl	8000f3c <bme280_get_regs>
 800110c:	4603      	mov	r3, r0
 800110e:	73fb      	strb	r3, [r7, #15]

            } while ((rslt == BME280_OK) && (try_run--) && (status_reg & BME280_STATUS_IM_UPDATE));
 8001110:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001114:	2b00      	cmp	r3, #0
 8001116:	d109      	bne.n	800112c <bme280_soft_reset+0x84>
 8001118:	7bbb      	ldrb	r3, [r7, #14]
 800111a:	1e5a      	subs	r2, r3, #1
 800111c:	73ba      	strb	r2, [r7, #14]
 800111e:	2b00      	cmp	r3, #0
 8001120:	d004      	beq.n	800112c <bme280_soft_reset+0x84>
 8001122:	7b3b      	ldrb	r3, [r7, #12]
 8001124:	f003 0301 	and.w	r3, r3, #1
 8001128:	2b00      	cmp	r3, #0
 800112a:	d1e0      	bne.n	80010ee <bme280_soft_reset+0x46>

            if (status_reg & BME280_STATUS_IM_UPDATE)
 800112c:	7b3b      	ldrb	r3, [r7, #12]
 800112e:	f003 0301 	and.w	r3, r3, #1
 8001132:	2b00      	cmp	r3, #0
 8001134:	d001      	beq.n	800113a <bme280_soft_reset+0x92>
            {
                rslt = BME280_E_NVM_COPY_FAILED;
 8001136:	23fa      	movs	r3, #250	; 0xfa
 8001138:	73fb      	strb	r3, [r7, #15]
            }
        }
    }

    return rslt;
 800113a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800113e:	4618      	mov	r0, r3
 8001140:	3710      	adds	r7, #16
 8001142:	46bd      	mov	sp, r7
 8001144:	bd80      	pop	{r7, pc}

08001146 <bme280_get_sensor_data>:
 * @brief This API reads the pressure, temperature and humidity data from the
 * sensor, compensates the data and store it in the bme280_data structure
 * instance passed by the user.
 */
int8_t bme280_get_sensor_data(uint8_t sensor_comp, struct bme280_data *comp_data, struct bme280_dev *dev)
{
 8001146:	b580      	push	{r7, lr}
 8001148:	b08a      	sub	sp, #40	; 0x28
 800114a:	af00      	add	r7, sp, #0
 800114c:	4603      	mov	r3, r0
 800114e:	60b9      	str	r1, [r7, #8]
 8001150:	607a      	str	r2, [r7, #4]
 8001152:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;

    /* Array to store the pressure, temperature and humidity data read from
     * the sensor
     */
    uint8_t reg_data[BME280_P_T_H_DATA_LEN] = { 0 };
 8001154:	2300      	movs	r3, #0
 8001156:	61fb      	str	r3, [r7, #28]
 8001158:	2300      	movs	r3, #0
 800115a:	623b      	str	r3, [r7, #32]
    struct bme280_uncomp_data uncomp_data = { 0 };
 800115c:	f107 0310 	add.w	r3, r7, #16
 8001160:	2200      	movs	r2, #0
 8001162:	601a      	str	r2, [r3, #0]
 8001164:	605a      	str	r2, [r3, #4]
 8001166:	609a      	str	r2, [r3, #8]

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 8001168:	6878      	ldr	r0, [r7, #4]
 800116a:	f000 fed9 	bl	8001f20 <null_ptr_check>
 800116e:	4603      	mov	r3, r0
 8001170:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    if ((rslt == BME280_OK) && (comp_data != NULL))
 8001174:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8001178:	2b00      	cmp	r3, #0
 800117a:	d124      	bne.n	80011c6 <bme280_get_sensor_data+0x80>
 800117c:	68bb      	ldr	r3, [r7, #8]
 800117e:	2b00      	cmp	r3, #0
 8001180:	d021      	beq.n	80011c6 <bme280_get_sensor_data+0x80>
    {
        /* Read the pressure and temperature data from the sensor */
        rslt = bme280_get_regs(BME280_DATA_ADDR, reg_data, BME280_P_T_H_DATA_LEN, dev);
 8001182:	f107 011c 	add.w	r1, r7, #28
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	2208      	movs	r2, #8
 800118a:	20f7      	movs	r0, #247	; 0xf7
 800118c:	f7ff fed6 	bl	8000f3c <bme280_get_regs>
 8001190:	4603      	mov	r3, r0
 8001192:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

        if (rslt == BME280_OK)
 8001196:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800119a:	2b00      	cmp	r3, #0
 800119c:	d116      	bne.n	80011cc <bme280_get_sensor_data+0x86>
        {
            /* Parse the read data from the sensor */
            bme280_parse_sensor_data(reg_data, &uncomp_data);
 800119e:	f107 0210 	add.w	r2, r7, #16
 80011a2:	f107 031c 	add.w	r3, r7, #28
 80011a6:	4611      	mov	r1, r2
 80011a8:	4618      	mov	r0, r3
 80011aa:	f000 f815 	bl	80011d8 <bme280_parse_sensor_data>

            /* Compensate the pressure and/or temperature and/or
             * humidity data from the sensor
             */
            rslt = bme280_compensate_data(sensor_comp, &uncomp_data, comp_data, &dev->calib_data);
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	3318      	adds	r3, #24
 80011b2:	f107 0110 	add.w	r1, r7, #16
 80011b6:	7bf8      	ldrb	r0, [r7, #15]
 80011b8:	68ba      	ldr	r2, [r7, #8]
 80011ba:	f000 f852 	bl	8001262 <bme280_compensate_data>
 80011be:	4603      	mov	r3, r0
 80011c0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        if (rslt == BME280_OK)
 80011c4:	e002      	b.n	80011cc <bme280_get_sensor_data+0x86>
        }
    }
    else
    {
        rslt = BME280_E_NULL_PTR;
 80011c6:	23ff      	movs	r3, #255	; 0xff
 80011c8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    return rslt;
 80011cc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 80011d0:	4618      	mov	r0, r3
 80011d2:	3728      	adds	r7, #40	; 0x28
 80011d4:	46bd      	mov	sp, r7
 80011d6:	bd80      	pop	{r7, pc}

080011d8 <bme280_parse_sensor_data>:
/*!
 *  @brief This API is used to parse the pressure, temperature and
 *  humidity data and store it in the bme280_uncomp_data structure instance.
 */
void bme280_parse_sensor_data(const uint8_t *reg_data, struct bme280_uncomp_data *uncomp_data)
{
 80011d8:	b480      	push	{r7}
 80011da:	b087      	sub	sp, #28
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
 80011e0:	6039      	str	r1, [r7, #0]
    uint32_t data_xlsb;
    uint32_t data_lsb;
    uint32_t data_msb;

    /* Store the parsed register values for pressure data */
    data_msb = (uint32_t)reg_data[0] << 12;
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	781b      	ldrb	r3, [r3, #0]
 80011e6:	031b      	lsls	r3, r3, #12
 80011e8:	617b      	str	r3, [r7, #20]
    data_lsb = (uint32_t)reg_data[1] << 4;
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	3301      	adds	r3, #1
 80011ee:	781b      	ldrb	r3, [r3, #0]
 80011f0:	011b      	lsls	r3, r3, #4
 80011f2:	613b      	str	r3, [r7, #16]
    data_xlsb = (uint32_t)reg_data[2] >> 4;
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	3302      	adds	r3, #2
 80011f8:	781b      	ldrb	r3, [r3, #0]
 80011fa:	091b      	lsrs	r3, r3, #4
 80011fc:	b2db      	uxtb	r3, r3
 80011fe:	60fb      	str	r3, [r7, #12]
    uncomp_data->pressure = data_msb | data_lsb | data_xlsb;
 8001200:	697a      	ldr	r2, [r7, #20]
 8001202:	693b      	ldr	r3, [r7, #16]
 8001204:	431a      	orrs	r2, r3
 8001206:	68fb      	ldr	r3, [r7, #12]
 8001208:	431a      	orrs	r2, r3
 800120a:	683b      	ldr	r3, [r7, #0]
 800120c:	601a      	str	r2, [r3, #0]

    /* Store the parsed register values for temperature data */
    data_msb = (uint32_t)reg_data[3] << 12;
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	3303      	adds	r3, #3
 8001212:	781b      	ldrb	r3, [r3, #0]
 8001214:	031b      	lsls	r3, r3, #12
 8001216:	617b      	str	r3, [r7, #20]
    data_lsb = (uint32_t)reg_data[4] << 4;
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	3304      	adds	r3, #4
 800121c:	781b      	ldrb	r3, [r3, #0]
 800121e:	011b      	lsls	r3, r3, #4
 8001220:	613b      	str	r3, [r7, #16]
    data_xlsb = (uint32_t)reg_data[5] >> 4;
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	3305      	adds	r3, #5
 8001226:	781b      	ldrb	r3, [r3, #0]
 8001228:	091b      	lsrs	r3, r3, #4
 800122a:	b2db      	uxtb	r3, r3
 800122c:	60fb      	str	r3, [r7, #12]
    uncomp_data->temperature = data_msb | data_lsb | data_xlsb;
 800122e:	697a      	ldr	r2, [r7, #20]
 8001230:	693b      	ldr	r3, [r7, #16]
 8001232:	431a      	orrs	r2, r3
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	431a      	orrs	r2, r3
 8001238:	683b      	ldr	r3, [r7, #0]
 800123a:	605a      	str	r2, [r3, #4]

    /* Store the parsed register values for humidity data */
    data_msb = (uint32_t)reg_data[6] << 8;
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	3306      	adds	r3, #6
 8001240:	781b      	ldrb	r3, [r3, #0]
 8001242:	021b      	lsls	r3, r3, #8
 8001244:	617b      	str	r3, [r7, #20]
    data_lsb = (uint32_t)reg_data[7];
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	3307      	adds	r3, #7
 800124a:	781b      	ldrb	r3, [r3, #0]
 800124c:	613b      	str	r3, [r7, #16]
    uncomp_data->humidity = data_msb | data_lsb;
 800124e:	697a      	ldr	r2, [r7, #20]
 8001250:	693b      	ldr	r3, [r7, #16]
 8001252:	431a      	orrs	r2, r3
 8001254:	683b      	ldr	r3, [r7, #0]
 8001256:	609a      	str	r2, [r3, #8]
}
 8001258:	bf00      	nop
 800125a:	371c      	adds	r7, #28
 800125c:	46bd      	mov	sp, r7
 800125e:	bc80      	pop	{r7}
 8001260:	4770      	bx	lr

08001262 <bme280_compensate_data>:
 */
int8_t bme280_compensate_data(uint8_t sensor_comp,
                              const struct bme280_uncomp_data *uncomp_data,
                              struct bme280_data *comp_data,
                              struct bme280_calib_data *calib_data)
{
 8001262:	b580      	push	{r7, lr}
 8001264:	b086      	sub	sp, #24
 8001266:	af00      	add	r7, sp, #0
 8001268:	60b9      	str	r1, [r7, #8]
 800126a:	607a      	str	r2, [r7, #4]
 800126c:	603b      	str	r3, [r7, #0]
 800126e:	4603      	mov	r3, r0
 8001270:	73fb      	strb	r3, [r7, #15]
    int8_t rslt = BME280_OK;
 8001272:	2300      	movs	r3, #0
 8001274:	75fb      	strb	r3, [r7, #23]

    if ((uncomp_data != NULL) && (comp_data != NULL) && (calib_data != NULL))
 8001276:	68bb      	ldr	r3, [r7, #8]
 8001278:	2b00      	cmp	r3, #0
 800127a:	d033      	beq.n	80012e4 <bme280_compensate_data+0x82>
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	2b00      	cmp	r3, #0
 8001280:	d030      	beq.n	80012e4 <bme280_compensate_data+0x82>
 8001282:	683b      	ldr	r3, [r7, #0]
 8001284:	2b00      	cmp	r3, #0
 8001286:	d02d      	beq.n	80012e4 <bme280_compensate_data+0x82>
    {
        /* Initialize to zero */
        comp_data->temperature = 0;
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	2200      	movs	r2, #0
 800128c:	605a      	str	r2, [r3, #4]
        comp_data->pressure = 0;
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	2200      	movs	r2, #0
 8001292:	601a      	str	r2, [r3, #0]
        comp_data->humidity = 0;
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	2200      	movs	r2, #0
 8001298:	609a      	str	r2, [r3, #8]

        /* If pressure or temperature component is selected */
        if (sensor_comp & (BME280_PRESS | BME280_TEMP | BME280_HUM))
 800129a:	7bfb      	ldrb	r3, [r7, #15]
 800129c:	f003 0307 	and.w	r3, r3, #7
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d006      	beq.n	80012b2 <bme280_compensate_data+0x50>
        {
            /* Compensate the temperature data */
            comp_data->temperature = compensate_temperature(uncomp_data, calib_data);
 80012a4:	6839      	ldr	r1, [r7, #0]
 80012a6:	68b8      	ldr	r0, [r7, #8]
 80012a8:	f000 f824 	bl	80012f4 <compensate_temperature>
 80012ac:	4602      	mov	r2, r0
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	605a      	str	r2, [r3, #4]
        }

        if (sensor_comp & BME280_PRESS)
 80012b2:	7bfb      	ldrb	r3, [r7, #15]
 80012b4:	f003 0301 	and.w	r3, r3, #1
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d006      	beq.n	80012ca <bme280_compensate_data+0x68>
        {
            /* Compensate the pressure data */
            comp_data->pressure = compensate_pressure(uncomp_data, calib_data);
 80012bc:	6839      	ldr	r1, [r7, #0]
 80012be:	68b8      	ldr	r0, [r7, #8]
 80012c0:	f000 f878 	bl	80013b4 <compensate_pressure>
 80012c4:	4602      	mov	r2, r0
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	601a      	str	r2, [r3, #0]
        }

        if (sensor_comp & BME280_HUM)
 80012ca:	7bfb      	ldrb	r3, [r7, #15]
 80012cc:	f003 0304 	and.w	r3, r3, #4
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d009      	beq.n	80012e8 <bme280_compensate_data+0x86>
        {
            /* Compensate the humidity data */
            comp_data->humidity = compensate_humidity(uncomp_data, calib_data);
 80012d4:	6839      	ldr	r1, [r7, #0]
 80012d6:	68b8      	ldr	r0, [r7, #8]
 80012d8:	f000 fc0c 	bl	8001af4 <compensate_humidity>
 80012dc:	4602      	mov	r2, r0
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	609a      	str	r2, [r3, #8]
        if (sensor_comp & BME280_HUM)
 80012e2:	e001      	b.n	80012e8 <bme280_compensate_data+0x86>
        }
    }
    else
    {
        rslt = BME280_E_NULL_PTR;
 80012e4:	23ff      	movs	r3, #255	; 0xff
 80012e6:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 80012e8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80012ec:	4618      	mov	r0, r3
 80012ee:	3718      	adds	r7, #24
 80012f0:	46bd      	mov	sp, r7
 80012f2:	bd80      	pop	{r7, pc}

080012f4 <compensate_temperature>:
 * @brief This internal API is used to compensate the raw temperature data and
 * return the compensated temperature data in integer data type.
 */
static int32_t compensate_temperature(const struct bme280_uncomp_data *uncomp_data,
                                      struct bme280_calib_data *calib_data)
{
 80012f4:	b480      	push	{r7}
 80012f6:	b089      	sub	sp, #36	; 0x24
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
 80012fc:	6039      	str	r1, [r7, #0]
    int32_t var1;
    int32_t var2;
    int32_t temperature;
    int32_t temperature_min = -4000;
 80012fe:	4b2c      	ldr	r3, [pc, #176]	; (80013b0 <compensate_temperature+0xbc>)
 8001300:	61bb      	str	r3, [r7, #24]
    int32_t temperature_max = 8500;
 8001302:	f242 1334 	movw	r3, #8500	; 0x2134
 8001306:	617b      	str	r3, [r7, #20]

    var1 = (int32_t)((uncomp_data->temperature / 8) - ((int32_t)calib_data->dig_t1 * 2));
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	685b      	ldr	r3, [r3, #4]
 800130c:	08db      	lsrs	r3, r3, #3
 800130e:	683a      	ldr	r2, [r7, #0]
 8001310:	8812      	ldrh	r2, [r2, #0]
 8001312:	0052      	lsls	r2, r2, #1
 8001314:	1a9b      	subs	r3, r3, r2
 8001316:	613b      	str	r3, [r7, #16]
    var1 = (var1 * ((int32_t)calib_data->dig_t2)) / 2048;
 8001318:	683b      	ldr	r3, [r7, #0]
 800131a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800131e:	461a      	mov	r2, r3
 8001320:	693b      	ldr	r3, [r7, #16]
 8001322:	fb02 f303 	mul.w	r3, r2, r3
 8001326:	2b00      	cmp	r3, #0
 8001328:	da01      	bge.n	800132e <compensate_temperature+0x3a>
 800132a:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 800132e:	12db      	asrs	r3, r3, #11
 8001330:	613b      	str	r3, [r7, #16]
    var2 = (int32_t)((uncomp_data->temperature / 16) - ((int32_t)calib_data->dig_t1));
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	685b      	ldr	r3, [r3, #4]
 8001336:	091b      	lsrs	r3, r3, #4
 8001338:	683a      	ldr	r2, [r7, #0]
 800133a:	8812      	ldrh	r2, [r2, #0]
 800133c:	1a9b      	subs	r3, r3, r2
 800133e:	60fb      	str	r3, [r7, #12]
    var2 = (((var2 * var2) / 4096) * ((int32_t)calib_data->dig_t3)) / 16384;
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	fb03 f303 	mul.w	r3, r3, r3
 8001346:	2b00      	cmp	r3, #0
 8001348:	da01      	bge.n	800134e <compensate_temperature+0x5a>
 800134a:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 800134e:	131b      	asrs	r3, r3, #12
 8001350:	461a      	mov	r2, r3
 8001352:	683b      	ldr	r3, [r7, #0]
 8001354:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001358:	fb02 f303 	mul.w	r3, r2, r3
 800135c:	2b00      	cmp	r3, #0
 800135e:	da02      	bge.n	8001366 <compensate_temperature+0x72>
 8001360:	f503 537f 	add.w	r3, r3, #16320	; 0x3fc0
 8001364:	333f      	adds	r3, #63	; 0x3f
 8001366:	139b      	asrs	r3, r3, #14
 8001368:	60fb      	str	r3, [r7, #12]
    calib_data->t_fine = var1 + var2;
 800136a:	693a      	ldr	r2, [r7, #16]
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	441a      	add	r2, r3
 8001370:	683b      	ldr	r3, [r7, #0]
 8001372:	625a      	str	r2, [r3, #36]	; 0x24
    temperature = (calib_data->t_fine * 5 + 128) / 256;
 8001374:	683b      	ldr	r3, [r7, #0]
 8001376:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001378:	4613      	mov	r3, r2
 800137a:	009b      	lsls	r3, r3, #2
 800137c:	4413      	add	r3, r2
 800137e:	3380      	adds	r3, #128	; 0x80
 8001380:	2b00      	cmp	r3, #0
 8001382:	da00      	bge.n	8001386 <compensate_temperature+0x92>
 8001384:	33ff      	adds	r3, #255	; 0xff
 8001386:	121b      	asrs	r3, r3, #8
 8001388:	61fb      	str	r3, [r7, #28]

    if (temperature < temperature_min)
 800138a:	69fa      	ldr	r2, [r7, #28]
 800138c:	69bb      	ldr	r3, [r7, #24]
 800138e:	429a      	cmp	r2, r3
 8001390:	da02      	bge.n	8001398 <compensate_temperature+0xa4>
    {
        temperature = temperature_min;
 8001392:	69bb      	ldr	r3, [r7, #24]
 8001394:	61fb      	str	r3, [r7, #28]
 8001396:	e005      	b.n	80013a4 <compensate_temperature+0xb0>
    }
    else if (temperature > temperature_max)
 8001398:	69fa      	ldr	r2, [r7, #28]
 800139a:	697b      	ldr	r3, [r7, #20]
 800139c:	429a      	cmp	r2, r3
 800139e:	dd01      	ble.n	80013a4 <compensate_temperature+0xb0>
    {
        temperature = temperature_max;
 80013a0:	697b      	ldr	r3, [r7, #20]
 80013a2:	61fb      	str	r3, [r7, #28]
    }

    return temperature;
 80013a4:	69fb      	ldr	r3, [r7, #28]
}
 80013a6:	4618      	mov	r0, r3
 80013a8:	3724      	adds	r7, #36	; 0x24
 80013aa:	46bd      	mov	sp, r7
 80013ac:	bc80      	pop	{r7}
 80013ae:	4770      	bx	lr
 80013b0:	fffff060 	.word	0xfffff060

080013b4 <compensate_pressure>:
 * return the compensated pressure data in integer data type with higher
 * accuracy.
 */
static uint32_t compensate_pressure(const struct bme280_uncomp_data *uncomp_data,
                                    const struct bme280_calib_data *calib_data)
{
 80013b4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80013b8:	b0ea      	sub	sp, #424	; 0x1a8
 80013ba:	af00      	add	r7, sp, #0
 80013bc:	f8c7 0174 	str.w	r0, [r7, #372]	; 0x174
 80013c0:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
    int64_t var1;
    int64_t var2;
    int64_t var3;
    int64_t var4;
    uint32_t pressure;
    uint32_t pressure_min = 3000000;
 80013c4:	4bbe      	ldr	r3, [pc, #760]	; (80016c0 <compensate_pressure+0x30c>)
 80013c6:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
    uint32_t pressure_max = 11000000;
 80013ca:	4bbe      	ldr	r3, [pc, #760]	; (80016c4 <compensate_pressure+0x310>)
 80013cc:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c

    var1 = ((int64_t)calib_data->t_fine) - 128000;
 80013d0:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 80013d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013d6:	17da      	asrs	r2, r3, #31
 80013d8:	4698      	mov	r8, r3
 80013da:	4691      	mov	r9, r2
 80013dc:	f5b8 3afa 	subs.w	sl, r8, #128000	; 0x1f400
 80013e0:	f149 3bff 	adc.w	fp, r9, #4294967295
 80013e4:	e9c7 ab64 	strd	sl, fp, [r7, #400]	; 0x190
    var2 = var1 * var1 * (int64_t)calib_data->dig_p6;
 80013e8:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 80013ec:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 80013f0:	fb03 f102 	mul.w	r1, r3, r2
 80013f4:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 80013f8:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 80013fc:	fb02 f303 	mul.w	r3, r2, r3
 8001400:	18ca      	adds	r2, r1, r3
 8001402:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8001406:	fba3 4503 	umull	r4, r5, r3, r3
 800140a:	1953      	adds	r3, r2, r5
 800140c:	461d      	mov	r5, r3
 800140e:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 8001412:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8001416:	b21b      	sxth	r3, r3
 8001418:	17da      	asrs	r2, r3, #31
 800141a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800141e:	f8c7 2124 	str.w	r2, [r7, #292]	; 0x124
 8001422:	e9d7 0148 	ldrd	r0, r1, [r7, #288]	; 0x120
 8001426:	4603      	mov	r3, r0
 8001428:	fb03 f205 	mul.w	r2, r3, r5
 800142c:	460b      	mov	r3, r1
 800142e:	fb04 f303 	mul.w	r3, r4, r3
 8001432:	4413      	add	r3, r2
 8001434:	4602      	mov	r2, r0
 8001436:	fba4 2102 	umull	r2, r1, r4, r2
 800143a:	f8c7 112c 	str.w	r1, [r7, #300]	; 0x12c
 800143e:	f8c7 2128 	str.w	r2, [r7, #296]	; 0x128
 8001442:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8001446:	4413      	add	r3, r2
 8001448:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 800144c:	e9d7 344a 	ldrd	r3, r4, [r7, #296]	; 0x128
 8001450:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
 8001454:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
    var2 = var2 + ((var1 * (int64_t)calib_data->dig_p5) * 131072);
 8001458:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 800145c:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8001460:	b21b      	sxth	r3, r3
 8001462:	17da      	asrs	r2, r3, #31
 8001464:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8001468:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 800146c:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8001470:	e9d7 4546 	ldrd	r4, r5, [r7, #280]	; 0x118
 8001474:	462a      	mov	r2, r5
 8001476:	fb02 f203 	mul.w	r2, r2, r3
 800147a:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 800147e:	4621      	mov	r1, r4
 8001480:	fb01 f303 	mul.w	r3, r1, r3
 8001484:	441a      	add	r2, r3
 8001486:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800148a:	4621      	mov	r1, r4
 800148c:	fba3 3101 	umull	r3, r1, r3, r1
 8001490:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
 8001494:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
 8001498:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 800149c:	18d3      	adds	r3, r2, r3
 800149e:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 80014a2:	f04f 0000 	mov.w	r0, #0
 80014a6:	f04f 0100 	mov.w	r1, #0
 80014aa:	e9d7 455a 	ldrd	r4, r5, [r7, #360]	; 0x168
 80014ae:	462b      	mov	r3, r5
 80014b0:	0459      	lsls	r1, r3, #17
 80014b2:	4622      	mov	r2, r4
 80014b4:	ea41 31d2 	orr.w	r1, r1, r2, lsr #15
 80014b8:	4623      	mov	r3, r4
 80014ba:	0458      	lsls	r0, r3, #17
 80014bc:	e9d7 2362 	ldrd	r2, r3, [r7, #392]	; 0x188
 80014c0:	1814      	adds	r4, r2, r0
 80014c2:	f8c7 40a8 	str.w	r4, [r7, #168]	; 0xa8
 80014c6:	414b      	adcs	r3, r1
 80014c8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80014cc:	e9d7 342a 	ldrd	r3, r4, [r7, #168]	; 0xa8
 80014d0:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
    var2 = var2 + (((int64_t)calib_data->dig_p4) * 34359738368);
 80014d4:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 80014d8:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80014dc:	b21b      	sxth	r3, r3
 80014de:	17da      	asrs	r2, r3, #31
 80014e0:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 80014e4:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
 80014e8:	f04f 0000 	mov.w	r0, #0
 80014ec:	f04f 0100 	mov.w	r1, #0
 80014f0:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80014f4:	00d9      	lsls	r1, r3, #3
 80014f6:	2000      	movs	r0, #0
 80014f8:	e9d7 2362 	ldrd	r2, r3, [r7, #392]	; 0x188
 80014fc:	1814      	adds	r4, r2, r0
 80014fe:	f8c7 40a0 	str.w	r4, [r7, #160]	; 0xa0
 8001502:	414b      	adcs	r3, r1
 8001504:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8001508:	e9d7 3428 	ldrd	r3, r4, [r7, #160]	; 0xa0
 800150c:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
    var1 = ((var1 * var1 * (int64_t)calib_data->dig_p3) / 256) + ((var1 * ((int64_t)calib_data->dig_p2) * 4096));
 8001510:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8001514:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8001518:	fb03 f102 	mul.w	r1, r3, r2
 800151c:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8001520:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8001524:	fb02 f303 	mul.w	r3, r2, r3
 8001528:	18ca      	adds	r2, r1, r3
 800152a:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800152e:	fba3 3103 	umull	r3, r1, r3, r3
 8001532:	f8c7 1164 	str.w	r1, [r7, #356]	; 0x164
 8001536:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
 800153a:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 800153e:	18d3      	adds	r3, r2, r3
 8001540:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
 8001544:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 8001548:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800154c:	b21b      	sxth	r3, r3
 800154e:	17da      	asrs	r2, r3, #31
 8001550:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8001554:	f8c7 210c 	str.w	r2, [r7, #268]	; 0x10c
 8001558:	e9d7 3458 	ldrd	r3, r4, [r7, #352]	; 0x160
 800155c:	4622      	mov	r2, r4
 800155e:	e9d7 8942 	ldrd	r8, r9, [r7, #264]	; 0x108
 8001562:	4641      	mov	r1, r8
 8001564:	fb01 f202 	mul.w	r2, r1, r2
 8001568:	464d      	mov	r5, r9
 800156a:	4618      	mov	r0, r3
 800156c:	4621      	mov	r1, r4
 800156e:	4603      	mov	r3, r0
 8001570:	fb03 f305 	mul.w	r3, r3, r5
 8001574:	4413      	add	r3, r2
 8001576:	4602      	mov	r2, r0
 8001578:	4641      	mov	r1, r8
 800157a:	fba2 2101 	umull	r2, r1, r2, r1
 800157e:	f8c7 115c 	str.w	r1, [r7, #348]	; 0x15c
 8001582:	f8c7 2158 	str.w	r2, [r7, #344]	; 0x158
 8001586:	f8d7 215c 	ldr.w	r2, [r7, #348]	; 0x15c
 800158a:	4413      	add	r3, r2
 800158c:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
 8001590:	e9d7 2356 	ldrd	r2, r3, [r7, #344]	; 0x158
 8001594:	2b00      	cmp	r3, #0
 8001596:	da09      	bge.n	80015ac <compensate_pressure+0x1f8>
 8001598:	f112 01ff 	adds.w	r1, r2, #255	; 0xff
 800159c:	f8c7 1098 	str.w	r1, [r7, #152]	; 0x98
 80015a0:	f143 0300 	adc.w	r3, r3, #0
 80015a4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80015a8:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 80015ac:	f04f 0000 	mov.w	r0, #0
 80015b0:	f04f 0100 	mov.w	r1, #0
 80015b4:	0a10      	lsrs	r0, r2, #8
 80015b6:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 80015ba:	1219      	asrs	r1, r3, #8
 80015bc:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 80015c0:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80015c4:	b21b      	sxth	r3, r3
 80015c6:	17da      	asrs	r2, r3, #31
 80015c8:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80015cc:	f8c7 2104 	str.w	r2, [r7, #260]	; 0x104
 80015d0:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 80015d4:	e9d7 8940 	ldrd	r8, r9, [r7, #256]	; 0x100
 80015d8:	464a      	mov	r2, r9
 80015da:	fb02 f203 	mul.w	r2, r2, r3
 80015de:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 80015e2:	4644      	mov	r4, r8
 80015e4:	fb04 f303 	mul.w	r3, r4, r3
 80015e8:	441a      	add	r2, r3
 80015ea:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 80015ee:	4644      	mov	r4, r8
 80015f0:	fba3 3404 	umull	r3, r4, r3, r4
 80015f4:	f8c7 4154 	str.w	r4, [r7, #340]	; 0x154
 80015f8:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80015fc:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8001600:	18d3      	adds	r3, r2, r3
 8001602:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8001606:	f04f 0200 	mov.w	r2, #0
 800160a:	f04f 0300 	mov.w	r3, #0
 800160e:	e9d7 8954 	ldrd	r8, r9, [r7, #336]	; 0x150
 8001612:	464c      	mov	r4, r9
 8001614:	0323      	lsls	r3, r4, #12
 8001616:	46c4      	mov	ip, r8
 8001618:	ea43 531c 	orr.w	r3, r3, ip, lsr #20
 800161c:	4644      	mov	r4, r8
 800161e:	0322      	lsls	r2, r4, #12
 8001620:	1884      	adds	r4, r0, r2
 8001622:	f8c7 4090 	str.w	r4, [r7, #144]	; 0x90
 8001626:	eb41 0303 	adc.w	r3, r1, r3
 800162a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800162e:	e9d7 3424 	ldrd	r3, r4, [r7, #144]	; 0x90
 8001632:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
    var3 = ((int64_t)1) * 140737488355328;
 8001636:	f04f 0200 	mov.w	r2, #0
 800163a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800163e:	e9c7 2360 	strd	r2, r3, [r7, #384]	; 0x180
    var1 = (var3 + var1) * ((int64_t)calib_data->dig_p1) / 8589934592;
 8001642:	e9d7 0160 	ldrd	r0, r1, [r7, #384]	; 0x180
 8001646:	e9d7 2364 	ldrd	r2, r3, [r7, #400]	; 0x190
 800164a:	1884      	adds	r4, r0, r2
 800164c:	f8c7 40f8 	str.w	r4, [r7, #248]	; 0xf8
 8001650:	eb41 0303 	adc.w	r3, r1, r3
 8001654:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8001658:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 800165c:	88db      	ldrh	r3, [r3, #6]
 800165e:	b29b      	uxth	r3, r3
 8001660:	2200      	movs	r2, #0
 8001662:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8001666:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 800166a:	e9d7 343e 	ldrd	r3, r4, [r7, #248]	; 0xf8
 800166e:	4622      	mov	r2, r4
 8001670:	e9d7 893c 	ldrd	r8, r9, [r7, #240]	; 0xf0
 8001674:	4641      	mov	r1, r8
 8001676:	fb01 f202 	mul.w	r2, r1, r2
 800167a:	464d      	mov	r5, r9
 800167c:	4618      	mov	r0, r3
 800167e:	4621      	mov	r1, r4
 8001680:	4603      	mov	r3, r0
 8001682:	fb03 f305 	mul.w	r3, r3, r5
 8001686:	4413      	add	r3, r2
 8001688:	4602      	mov	r2, r0
 800168a:	4641      	mov	r1, r8
 800168c:	fba2 2101 	umull	r2, r1, r2, r1
 8001690:	f8c7 114c 	str.w	r1, [r7, #332]	; 0x14c
 8001694:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8001698:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 800169c:	4413      	add	r3, r2
 800169e:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 80016a2:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	da0e      	bge.n	80016c8 <compensate_pressure+0x314>
 80016aa:	1e51      	subs	r1, r2, #1
 80016ac:	f8c7 1088 	str.w	r1, [r7, #136]	; 0x88
 80016b0:	f143 0301 	adc.w	r3, r3, #1
 80016b4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80016b8:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 80016bc:	e004      	b.n	80016c8 <compensate_pressure+0x314>
 80016be:	bf00      	nop
 80016c0:	002dc6c0 	.word	0x002dc6c0
 80016c4:	00a7d8c0 	.word	0x00a7d8c0
 80016c8:	f04f 0000 	mov.w	r0, #0
 80016cc:	f04f 0100 	mov.w	r1, #0
 80016d0:	1058      	asrs	r0, r3, #1
 80016d2:	17d9      	asrs	r1, r3, #31
 80016d4:	e9c7 0164 	strd	r0, r1, [r7, #400]	; 0x190

    /* To avoid divide by zero exception */
    if (var1 != 0)
 80016d8:	e9d7 2364 	ldrd	r2, r3, [r7, #400]	; 0x190
 80016dc:	4313      	orrs	r3, r2
 80016de:	f000 81fa 	beq.w	8001ad6 <compensate_pressure+0x722>
    {
        var4 = 1048576 - uncomp_data->pressure;
 80016e2:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	f5c3 1380 	rsb	r3, r3, #1048576	; 0x100000
 80016ec:	2200      	movs	r2, #0
 80016ee:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80016f2:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 80016f6:	e9d7 3420 	ldrd	r3, r4, [r7, #128]	; 0x80
 80016fa:	e9c7 345e 	strd	r3, r4, [r7, #376]	; 0x178
        var4 = (((var4 * INT64_C(2147483648)) - var2) * 3125) / var1;
 80016fe:	e9d7 235e 	ldrd	r2, r3, [r7, #376]	; 0x178
 8001702:	f04f 0000 	mov.w	r0, #0
 8001706:	f04f 0100 	mov.w	r1, #0
 800170a:	07d9      	lsls	r1, r3, #31
 800170c:	ea41 0152 	orr.w	r1, r1, r2, lsr #1
 8001710:	07d0      	lsls	r0, r2, #31
 8001712:	e9d7 2362 	ldrd	r2, r3, [r7, #392]	; 0x188
 8001716:	1a84      	subs	r4, r0, r2
 8001718:	f8c7 40e8 	str.w	r4, [r7, #232]	; 0xe8
 800171c:	eb61 0303 	sbc.w	r3, r1, r3
 8001720:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8001724:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8001728:	4622      	mov	r2, r4
 800172a:	462b      	mov	r3, r5
 800172c:	1891      	adds	r1, r2, r2
 800172e:	67b9      	str	r1, [r7, #120]	; 0x78
 8001730:	415b      	adcs	r3, r3
 8001732:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001734:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8001738:	4621      	mov	r1, r4
 800173a:	1851      	adds	r1, r2, r1
 800173c:	6739      	str	r1, [r7, #112]	; 0x70
 800173e:	4629      	mov	r1, r5
 8001740:	414b      	adcs	r3, r1
 8001742:	677b      	str	r3, [r7, #116]	; 0x74
 8001744:	f04f 0200 	mov.w	r2, #0
 8001748:	f04f 0300 	mov.w	r3, #0
 800174c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8001750:	4649      	mov	r1, r9
 8001752:	018b      	lsls	r3, r1, #6
 8001754:	4641      	mov	r1, r8
 8001756:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800175a:	4641      	mov	r1, r8
 800175c:	018a      	lsls	r2, r1, #6
 800175e:	4641      	mov	r1, r8
 8001760:	1889      	adds	r1, r1, r2
 8001762:	66b9      	str	r1, [r7, #104]	; 0x68
 8001764:	4649      	mov	r1, r9
 8001766:	eb43 0101 	adc.w	r1, r3, r1
 800176a:	66f9      	str	r1, [r7, #108]	; 0x6c
 800176c:	f04f 0200 	mov.w	r2, #0
 8001770:	f04f 0300 	mov.w	r3, #0
 8001774:	e9d7 891a 	ldrd	r8, r9, [r7, #104]	; 0x68
 8001778:	4649      	mov	r1, r9
 800177a:	008b      	lsls	r3, r1, #2
 800177c:	46c4      	mov	ip, r8
 800177e:	ea43 739c 	orr.w	r3, r3, ip, lsr #30
 8001782:	4641      	mov	r1, r8
 8001784:	008a      	lsls	r2, r1, #2
 8001786:	4610      	mov	r0, r2
 8001788:	4619      	mov	r1, r3
 800178a:	4603      	mov	r3, r0
 800178c:	4622      	mov	r2, r4
 800178e:	189b      	adds	r3, r3, r2
 8001790:	663b      	str	r3, [r7, #96]	; 0x60
 8001792:	460b      	mov	r3, r1
 8001794:	462a      	mov	r2, r5
 8001796:	eb42 0303 	adc.w	r3, r2, r3
 800179a:	667b      	str	r3, [r7, #100]	; 0x64
 800179c:	f04f 0200 	mov.w	r2, #0
 80017a0:	f04f 0300 	mov.w	r3, #0
 80017a4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80017a8:	4649      	mov	r1, r9
 80017aa:	008b      	lsls	r3, r1, #2
 80017ac:	46c4      	mov	ip, r8
 80017ae:	ea43 739c 	orr.w	r3, r3, ip, lsr #30
 80017b2:	4641      	mov	r1, r8
 80017b4:	008a      	lsls	r2, r1, #2
 80017b6:	4610      	mov	r0, r2
 80017b8:	4619      	mov	r1, r3
 80017ba:	4603      	mov	r3, r0
 80017bc:	4622      	mov	r2, r4
 80017be:	189b      	adds	r3, r3, r2
 80017c0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80017c4:	462b      	mov	r3, r5
 80017c6:	460a      	mov	r2, r1
 80017c8:	eb42 0303 	adc.w	r3, r2, r3
 80017cc:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80017d0:	e9d7 2364 	ldrd	r2, r3, [r7, #400]	; 0x190
 80017d4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80017d8:	f7ff f9a6 	bl	8000b28 <__aeabi_ldivmod>
 80017dc:	4602      	mov	r2, r0
 80017de:	460b      	mov	r3, r1
 80017e0:	e9c7 235e 	strd	r2, r3, [r7, #376]	; 0x178
        var1 = (((int64_t)calib_data->dig_p9) * (var4 / 8192) * (var4 / 8192)) / 33554432;
 80017e4:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 80017e8:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 80017ec:	b21b      	sxth	r3, r3
 80017ee:	17da      	asrs	r2, r3, #31
 80017f0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80017f4:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80017f8:	e9d7 235e 	ldrd	r2, r3, [r7, #376]	; 0x178
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	da08      	bge.n	8001812 <compensate_pressure+0x45e>
 8001800:	f641 71ff 	movw	r1, #8191	; 0x1fff
 8001804:	1851      	adds	r1, r2, r1
 8001806:	65b9      	str	r1, [r7, #88]	; 0x58
 8001808:	f143 0300 	adc.w	r3, r3, #0
 800180c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800180e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001812:	f04f 0000 	mov.w	r0, #0
 8001816:	f04f 0100 	mov.w	r1, #0
 800181a:	0b50      	lsrs	r0, r2, #13
 800181c:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8001820:	1359      	asrs	r1, r3, #13
 8001822:	4602      	mov	r2, r0
 8001824:	460b      	mov	r3, r1
 8001826:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 800182a:	4629      	mov	r1, r5
 800182c:	fb02 f001 	mul.w	r0, r2, r1
 8001830:	4621      	mov	r1, r4
 8001832:	fb01 f103 	mul.w	r1, r1, r3
 8001836:	4401      	add	r1, r0
 8001838:	4620      	mov	r0, r4
 800183a:	fba0 3202 	umull	r3, r2, r0, r2
 800183e:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
 8001842:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
 8001846:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 800184a:	18cb      	adds	r3, r1, r3
 800184c:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 8001850:	e9d7 235e 	ldrd	r2, r3, [r7, #376]	; 0x178
 8001854:	2b00      	cmp	r3, #0
 8001856:	da08      	bge.n	800186a <compensate_pressure+0x4b6>
 8001858:	f641 71ff 	movw	r1, #8191	; 0x1fff
 800185c:	1851      	adds	r1, r2, r1
 800185e:	6539      	str	r1, [r7, #80]	; 0x50
 8001860:	f143 0300 	adc.w	r3, r3, #0
 8001864:	657b      	str	r3, [r7, #84]	; 0x54
 8001866:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800186a:	f04f 0000 	mov.w	r0, #0
 800186e:	f04f 0100 	mov.w	r1, #0
 8001872:	0b50      	lsrs	r0, r2, #13
 8001874:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8001878:	1359      	asrs	r1, r3, #13
 800187a:	4602      	mov	r2, r0
 800187c:	460b      	mov	r3, r1
 800187e:	e9d7 4550 	ldrd	r4, r5, [r7, #320]	; 0x140
 8001882:	4629      	mov	r1, r5
 8001884:	fb02 f001 	mul.w	r0, r2, r1
 8001888:	4621      	mov	r1, r4
 800188a:	fb01 f103 	mul.w	r1, r1, r3
 800188e:	4401      	add	r1, r0
 8001890:	4620      	mov	r0, r4
 8001892:	fba0 3202 	umull	r3, r2, r0, r2
 8001896:	f8c7 213c 	str.w	r2, [r7, #316]	; 0x13c
 800189a:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 800189e:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 80018a2:	18cb      	adds	r3, r1, r3
 80018a4:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
 80018a8:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	da08      	bge.n	80018c2 <compensate_pressure+0x50e>
 80018b0:	f06f 417e 	mvn.w	r1, #4261412864	; 0xfe000000
 80018b4:	1851      	adds	r1, r2, r1
 80018b6:	64b9      	str	r1, [r7, #72]	; 0x48
 80018b8:	f143 0300 	adc.w	r3, r3, #0
 80018bc:	64fb      	str	r3, [r7, #76]	; 0x4c
 80018be:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80018c2:	f04f 0000 	mov.w	r0, #0
 80018c6:	f04f 0100 	mov.w	r1, #0
 80018ca:	0e50      	lsrs	r0, r2, #25
 80018cc:	ea40 10c3 	orr.w	r0, r0, r3, lsl #7
 80018d0:	1659      	asrs	r1, r3, #25
 80018d2:	e9c7 0164 	strd	r0, r1, [r7, #400]	; 0x190
        var2 = (((int64_t)calib_data->dig_p8) * var4) / 524288;
 80018d6:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 80018da:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 80018de:	b21b      	sxth	r3, r3
 80018e0:	17da      	asrs	r2, r3, #31
 80018e2:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80018e6:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80018ea:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 80018ee:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 80018f2:	462a      	mov	r2, r5
 80018f4:	fb02 f203 	mul.w	r2, r2, r3
 80018f8:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 80018fc:	4621      	mov	r1, r4
 80018fe:	fb01 f303 	mul.w	r3, r1, r3
 8001902:	441a      	add	r2, r3
 8001904:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 8001908:	4621      	mov	r1, r4
 800190a:	fba3 3101 	umull	r3, r1, r3, r1
 800190e:	f8c7 1134 	str.w	r1, [r7, #308]	; 0x134
 8001912:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8001916:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800191a:	18d3      	adds	r3, r2, r3
 800191c:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 8001920:	e9d7 234c 	ldrd	r2, r3, [r7, #304]	; 0x130
 8001924:	2b00      	cmp	r3, #0
 8001926:	da07      	bge.n	8001938 <compensate_pressure+0x584>
 8001928:	4971      	ldr	r1, [pc, #452]	; (8001af0 <compensate_pressure+0x73c>)
 800192a:	1851      	adds	r1, r2, r1
 800192c:	6439      	str	r1, [r7, #64]	; 0x40
 800192e:	f143 0300 	adc.w	r3, r3, #0
 8001932:	647b      	str	r3, [r7, #68]	; 0x44
 8001934:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8001938:	f04f 0000 	mov.w	r0, #0
 800193c:	f04f 0100 	mov.w	r1, #0
 8001940:	0cd0      	lsrs	r0, r2, #19
 8001942:	ea40 3043 	orr.w	r0, r0, r3, lsl #13
 8001946:	14d9      	asrs	r1, r3, #19
 8001948:	e9c7 0162 	strd	r0, r1, [r7, #392]	; 0x188
        var4 = ((var4 + var1 + var2) / 256) + (((int64_t)calib_data->dig_p7) * 16);
 800194c:	e9d7 015e 	ldrd	r0, r1, [r7, #376]	; 0x178
 8001950:	e9d7 2364 	ldrd	r2, r3, [r7, #400]	; 0x190
 8001954:	1884      	adds	r4, r0, r2
 8001956:	f8c7 40c8 	str.w	r4, [r7, #200]	; 0xc8
 800195a:	eb41 0303 	adc.w	r3, r1, r3
 800195e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8001962:	e9d7 2362 	ldrd	r2, r3, [r7, #392]	; 0x188
 8001966:	e9d7 4532 	ldrd	r4, r5, [r7, #200]	; 0xc8
 800196a:	4621      	mov	r1, r4
 800196c:	1889      	adds	r1, r1, r2
 800196e:	f8c7 10c0 	str.w	r1, [r7, #192]	; 0xc0
 8001972:	4629      	mov	r1, r5
 8001974:	eb43 0101 	adc.w	r1, r3, r1
 8001978:	f8c7 10c4 	str.w	r1, [r7, #196]	; 0xc4
 800197c:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	; 0xc0
 8001980:	2b00      	cmp	r3, #0
 8001982:	da07      	bge.n	8001994 <compensate_pressure+0x5e0>
 8001984:	f112 01ff 	adds.w	r1, r2, #255	; 0xff
 8001988:	63b9      	str	r1, [r7, #56]	; 0x38
 800198a:	f143 0300 	adc.w	r3, r3, #0
 800198e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001990:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8001994:	f04f 0000 	mov.w	r0, #0
 8001998:	f04f 0100 	mov.w	r1, #0
 800199c:	0a10      	lsrs	r0, r2, #8
 800199e:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 80019a2:	1219      	asrs	r1, r3, #8
 80019a4:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 80019a8:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 80019ac:	b21b      	sxth	r3, r3
 80019ae:	17da      	asrs	r2, r3, #31
 80019b0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80019b4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80019b8:	f04f 0200 	mov.w	r2, #0
 80019bc:	f04f 0300 	mov.w	r3, #0
 80019c0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80019c4:	464c      	mov	r4, r9
 80019c6:	0123      	lsls	r3, r4, #4
 80019c8:	46c4      	mov	ip, r8
 80019ca:	ea43 731c 	orr.w	r3, r3, ip, lsr #28
 80019ce:	4644      	mov	r4, r8
 80019d0:	0122      	lsls	r2, r4, #4
 80019d2:	1884      	adds	r4, r0, r2
 80019d4:	633c      	str	r4, [r7, #48]	; 0x30
 80019d6:	eb41 0303 	adc.w	r3, r1, r3
 80019da:	637b      	str	r3, [r7, #52]	; 0x34
 80019dc:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 80019e0:	e9c7 345e 	strd	r3, r4, [r7, #376]	; 0x178
        pressure = (uint32_t)(((var4 / 2) * 100) / 128);
 80019e4:	e9d7 235e 	ldrd	r2, r3, [r7, #376]	; 0x178
 80019e8:	0fd9      	lsrs	r1, r3, #31
 80019ea:	2000      	movs	r0, #0
 80019ec:	62b9      	str	r1, [r7, #40]	; 0x28
 80019ee:	62f8      	str	r0, [r7, #44]	; 0x2c
 80019f0:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 80019f4:	4621      	mov	r1, r4
 80019f6:	1889      	adds	r1, r1, r2
 80019f8:	6239      	str	r1, [r7, #32]
 80019fa:	4629      	mov	r1, r5
 80019fc:	eb43 0101 	adc.w	r1, r3, r1
 8001a00:	6279      	str	r1, [r7, #36]	; 0x24
 8001a02:	f04f 0200 	mov.w	r2, #0
 8001a06:	f04f 0300 	mov.w	r3, #0
 8001a0a:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8001a0e:	4621      	mov	r1, r4
 8001a10:	084a      	lsrs	r2, r1, #1
 8001a12:	4620      	mov	r0, r4
 8001a14:	4629      	mov	r1, r5
 8001a16:	460c      	mov	r4, r1
 8001a18:	ea42 72c4 	orr.w	r2, r2, r4, lsl #31
 8001a1c:	104b      	asrs	r3, r1, #1
 8001a1e:	4610      	mov	r0, r2
 8001a20:	4619      	mov	r1, r3
 8001a22:	4602      	mov	r2, r0
 8001a24:	460b      	mov	r3, r1
 8001a26:	1894      	adds	r4, r2, r2
 8001a28:	61bc      	str	r4, [r7, #24]
 8001a2a:	415b      	adcs	r3, r3
 8001a2c:	61fb      	str	r3, [r7, #28]
 8001a2e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001a32:	1814      	adds	r4, r2, r0
 8001a34:	613c      	str	r4, [r7, #16]
 8001a36:	414b      	adcs	r3, r1
 8001a38:	617b      	str	r3, [r7, #20]
 8001a3a:	f04f 0200 	mov.w	r2, #0
 8001a3e:	f04f 0300 	mov.w	r3, #0
 8001a42:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 8001a46:	464c      	mov	r4, r9
 8001a48:	0163      	lsls	r3, r4, #5
 8001a4a:	4644      	mov	r4, r8
 8001a4c:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
 8001a50:	4644      	mov	r4, r8
 8001a52:	0162      	lsls	r2, r4, #5
 8001a54:	4644      	mov	r4, r8
 8001a56:	18a4      	adds	r4, r4, r2
 8001a58:	60bc      	str	r4, [r7, #8]
 8001a5a:	464c      	mov	r4, r9
 8001a5c:	eb43 0404 	adc.w	r4, r3, r4
 8001a60:	60fc      	str	r4, [r7, #12]
 8001a62:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001a66:	4623      	mov	r3, r4
 8001a68:	181b      	adds	r3, r3, r0
 8001a6a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8001a6e:	462b      	mov	r3, r5
 8001a70:	eb41 0303 	adc.w	r3, r1, r3
 8001a74:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001a78:	e9d7 232c 	ldrd	r2, r3, [r7, #176]	; 0xb0
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	da07      	bge.n	8001a90 <compensate_pressure+0x6dc>
 8001a80:	f112 017f 	adds.w	r1, r2, #127	; 0x7f
 8001a84:	6039      	str	r1, [r7, #0]
 8001a86:	f143 0300 	adc.w	r3, r3, #0
 8001a8a:	607b      	str	r3, [r7, #4]
 8001a8c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001a90:	f04f 0000 	mov.w	r0, #0
 8001a94:	f04f 0100 	mov.w	r1, #0
 8001a98:	09d0      	lsrs	r0, r2, #7
 8001a9a:	ea40 6043 	orr.w	r0, r0, r3, lsl #25
 8001a9e:	11d9      	asrs	r1, r3, #7
 8001aa0:	4602      	mov	r2, r0
 8001aa2:	460b      	mov	r3, r1
 8001aa4:	4613      	mov	r3, r2
 8001aa6:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4

        if (pressure < pressure_min)
 8001aaa:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 8001aae:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8001ab2:	429a      	cmp	r2, r3
 8001ab4:	d204      	bcs.n	8001ac0 <compensate_pressure+0x70c>
        {
            pressure = pressure_min;
 8001ab6:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8001aba:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8001abe:	e00e      	b.n	8001ade <compensate_pressure+0x72a>
        }
        else if (pressure > pressure_max)
 8001ac0:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 8001ac4:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8001ac8:	429a      	cmp	r2, r3
 8001aca:	d908      	bls.n	8001ade <compensate_pressure+0x72a>
        {
            pressure = pressure_max;
 8001acc:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8001ad0:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8001ad4:	e003      	b.n	8001ade <compensate_pressure+0x72a>
        }
    }
    else
    {
        pressure = pressure_min;
 8001ad6:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8001ada:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
    }

    return pressure;
 8001ade:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
}
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	f507 77d4 	add.w	r7, r7, #424	; 0x1a8
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001aee:	bf00      	nop
 8001af0:	0007ffff 	.word	0x0007ffff

08001af4 <compensate_humidity>:
 * @brief This internal API is used to compensate the raw humidity data and
 * return the compensated humidity data in integer data type.
 */
static uint32_t compensate_humidity(const struct bme280_uncomp_data *uncomp_data,
                                    const struct bme280_calib_data *calib_data)
{
 8001af4:	b480      	push	{r7}
 8001af6:	b08b      	sub	sp, #44	; 0x2c
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
 8001afc:	6039      	str	r1, [r7, #0]
    int32_t var2;
    int32_t var3;
    int32_t var4;
    int32_t var5;
    uint32_t humidity;
    uint32_t humidity_max = 102400;
 8001afe:	f44f 33c8 	mov.w	r3, #102400	; 0x19000
 8001b02:	623b      	str	r3, [r7, #32]

    var1 = calib_data->t_fine - ((int32_t)76800);
 8001b04:	683b      	ldr	r3, [r7, #0]
 8001b06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b08:	f5a3 3396 	sub.w	r3, r3, #76800	; 0x12c00
 8001b0c:	61fb      	str	r3, [r7, #28]
    var2 = (int32_t)(uncomp_data->humidity * 16384);
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	689b      	ldr	r3, [r3, #8]
 8001b12:	039b      	lsls	r3, r3, #14
 8001b14:	61bb      	str	r3, [r7, #24]
    var3 = (int32_t)(((int32_t)calib_data->dig_h4) * 1048576);
 8001b16:	683b      	ldr	r3, [r7, #0]
 8001b18:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8001b1c:	051b      	lsls	r3, r3, #20
 8001b1e:	617b      	str	r3, [r7, #20]
    var4 = ((int32_t)calib_data->dig_h5) * var1;
 8001b20:	683b      	ldr	r3, [r7, #0]
 8001b22:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8001b26:	461a      	mov	r2, r3
 8001b28:	69fb      	ldr	r3, [r7, #28]
 8001b2a:	fb02 f303 	mul.w	r3, r2, r3
 8001b2e:	613b      	str	r3, [r7, #16]
    var5 = (((var2 - var3) - var4) + (int32_t)16384) / 32768;
 8001b30:	69ba      	ldr	r2, [r7, #24]
 8001b32:	697b      	ldr	r3, [r7, #20]
 8001b34:	1ad2      	subs	r2, r2, r3
 8001b36:	693b      	ldr	r3, [r7, #16]
 8001b38:	1ad3      	subs	r3, r2, r3
 8001b3a:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	da02      	bge.n	8001b48 <compensate_humidity+0x54>
 8001b42:	f503 43ff 	add.w	r3, r3, #32640	; 0x7f80
 8001b46:	337f      	adds	r3, #127	; 0x7f
 8001b48:	13db      	asrs	r3, r3, #15
 8001b4a:	60fb      	str	r3, [r7, #12]
    var2 = (var1 * ((int32_t)calib_data->dig_h6)) / 1024;
 8001b4c:	683b      	ldr	r3, [r7, #0]
 8001b4e:	f993 3022 	ldrsb.w	r3, [r3, #34]	; 0x22
 8001b52:	461a      	mov	r2, r3
 8001b54:	69fb      	ldr	r3, [r7, #28]
 8001b56:	fb02 f303 	mul.w	r3, r2, r3
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	da01      	bge.n	8001b62 <compensate_humidity+0x6e>
 8001b5e:	f203 33ff 	addw	r3, r3, #1023	; 0x3ff
 8001b62:	129b      	asrs	r3, r3, #10
 8001b64:	61bb      	str	r3, [r7, #24]
    var3 = (var1 * ((int32_t)calib_data->dig_h3)) / 2048;
 8001b66:	683b      	ldr	r3, [r7, #0]
 8001b68:	7f1b      	ldrb	r3, [r3, #28]
 8001b6a:	461a      	mov	r2, r3
 8001b6c:	69fb      	ldr	r3, [r7, #28]
 8001b6e:	fb02 f303 	mul.w	r3, r2, r3
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	da01      	bge.n	8001b7a <compensate_humidity+0x86>
 8001b76:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 8001b7a:	12db      	asrs	r3, r3, #11
 8001b7c:	617b      	str	r3, [r7, #20]
    var4 = ((var2 * (var3 + (int32_t)32768)) / 1024) + (int32_t)2097152;
 8001b7e:	697b      	ldr	r3, [r7, #20]
 8001b80:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8001b84:	69ba      	ldr	r2, [r7, #24]
 8001b86:	fb02 f303 	mul.w	r3, r2, r3
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	da01      	bge.n	8001b92 <compensate_humidity+0x9e>
 8001b8e:	f203 33ff 	addw	r3, r3, #1023	; 0x3ff
 8001b92:	129b      	asrs	r3, r3, #10
 8001b94:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8001b98:	613b      	str	r3, [r7, #16]
    var2 = ((var4 * ((int32_t)calib_data->dig_h2)) + 8192) / 16384;
 8001b9a:	683b      	ldr	r3, [r7, #0]
 8001b9c:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 8001ba0:	461a      	mov	r2, r3
 8001ba2:	693b      	ldr	r3, [r7, #16]
 8001ba4:	fb02 f303 	mul.w	r3, r2, r3
 8001ba8:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	da02      	bge.n	8001bb6 <compensate_humidity+0xc2>
 8001bb0:	f503 537f 	add.w	r3, r3, #16320	; 0x3fc0
 8001bb4:	333f      	adds	r3, #63	; 0x3f
 8001bb6:	139b      	asrs	r3, r3, #14
 8001bb8:	61bb      	str	r3, [r7, #24]
    var3 = var5 * var2;
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	69ba      	ldr	r2, [r7, #24]
 8001bbe:	fb02 f303 	mul.w	r3, r2, r3
 8001bc2:	617b      	str	r3, [r7, #20]
    var4 = ((var3 / 32768) * (var3 / 32768)) / 128;
 8001bc4:	697b      	ldr	r3, [r7, #20]
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	da02      	bge.n	8001bd0 <compensate_humidity+0xdc>
 8001bca:	f503 43ff 	add.w	r3, r3, #32640	; 0x7f80
 8001bce:	337f      	adds	r3, #127	; 0x7f
 8001bd0:	13db      	asrs	r3, r3, #15
 8001bd2:	461a      	mov	r2, r3
 8001bd4:	697b      	ldr	r3, [r7, #20]
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	da02      	bge.n	8001be0 <compensate_humidity+0xec>
 8001bda:	f503 43ff 	add.w	r3, r3, #32640	; 0x7f80
 8001bde:	337f      	adds	r3, #127	; 0x7f
 8001be0:	13db      	asrs	r3, r3, #15
 8001be2:	fb02 f303 	mul.w	r3, r2, r3
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	da00      	bge.n	8001bec <compensate_humidity+0xf8>
 8001bea:	337f      	adds	r3, #127	; 0x7f
 8001bec:	11db      	asrs	r3, r3, #7
 8001bee:	613b      	str	r3, [r7, #16]
    var5 = var3 - ((var4 * ((int32_t)calib_data->dig_h1)) / 16);
 8001bf0:	683b      	ldr	r3, [r7, #0]
 8001bf2:	7e1b      	ldrb	r3, [r3, #24]
 8001bf4:	461a      	mov	r2, r3
 8001bf6:	693b      	ldr	r3, [r7, #16]
 8001bf8:	fb02 f303 	mul.w	r3, r2, r3
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	da00      	bge.n	8001c02 <compensate_humidity+0x10e>
 8001c00:	330f      	adds	r3, #15
 8001c02:	111b      	asrs	r3, r3, #4
 8001c04:	425b      	negs	r3, r3
 8001c06:	461a      	mov	r2, r3
 8001c08:	697b      	ldr	r3, [r7, #20]
 8001c0a:	4413      	add	r3, r2
 8001c0c:	60fb      	str	r3, [r7, #12]
    var5 = (var5 < 0 ? 0 : var5);
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8001c14:	60fb      	str	r3, [r7, #12]
    var5 = (var5 > 419430400 ? 419430400 : var5);
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	f1b3 5fc8 	cmp.w	r3, #419430400	; 0x19000000
 8001c1c:	bfa8      	it	ge
 8001c1e:	f04f 53c8 	movge.w	r3, #419430400	; 0x19000000
 8001c22:	60fb      	str	r3, [r7, #12]
    humidity = (uint32_t)(var5 / 4096);
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	da01      	bge.n	8001c2e <compensate_humidity+0x13a>
 8001c2a:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 8001c2e:	131b      	asrs	r3, r3, #12
 8001c30:	627b      	str	r3, [r7, #36]	; 0x24

    if (humidity > humidity_max)
 8001c32:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c34:	6a3b      	ldr	r3, [r7, #32]
 8001c36:	429a      	cmp	r2, r3
 8001c38:	d901      	bls.n	8001c3e <compensate_humidity+0x14a>
    {
        humidity = humidity_max;
 8001c3a:	6a3b      	ldr	r3, [r7, #32]
 8001c3c:	627b      	str	r3, [r7, #36]	; 0x24
    }

    return humidity;
 8001c3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8001c40:	4618      	mov	r0, r3
 8001c42:	372c      	adds	r7, #44	; 0x2c
 8001c44:	46bd      	mov	sp, r7
 8001c46:	bc80      	pop	{r7}
 8001c48:	4770      	bx	lr

08001c4a <get_calib_data>:
/*!
 * @brief This internal API reads the calibration data from the sensor, parse
 * it and store in the device structure.
 */
static int8_t get_calib_data(struct bme280_dev *dev)
{
 8001c4a:	b580      	push	{r7, lr}
 8001c4c:	b08a      	sub	sp, #40	; 0x28
 8001c4e:	af00      	add	r7, sp, #0
 8001c50:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t reg_addr = BME280_TEMP_PRESS_CALIB_DATA_ADDR;
 8001c52:	2388      	movs	r3, #136	; 0x88
 8001c54:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    /* Array to store calibration data */
    uint8_t calib_data[BME280_TEMP_PRESS_CALIB_DATA_LEN] = { 0 };
 8001c58:	2300      	movs	r3, #0
 8001c5a:	60fb      	str	r3, [r7, #12]
 8001c5c:	f107 0310 	add.w	r3, r7, #16
 8001c60:	2200      	movs	r2, #0
 8001c62:	601a      	str	r2, [r3, #0]
 8001c64:	605a      	str	r2, [r3, #4]
 8001c66:	609a      	str	r2, [r3, #8]
 8001c68:	60da      	str	r2, [r3, #12]
 8001c6a:	611a      	str	r2, [r3, #16]
 8001c6c:	829a      	strh	r2, [r3, #20]

    /* Read the calibration data from the sensor */
    rslt = bme280_get_regs(reg_addr, calib_data, BME280_TEMP_PRESS_CALIB_DATA_LEN, dev);
 8001c6e:	f107 010c 	add.w	r1, r7, #12
 8001c72:	f897 0026 	ldrb.w	r0, [r7, #38]	; 0x26
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	221a      	movs	r2, #26
 8001c7a:	f7ff f95f 	bl	8000f3c <bme280_get_regs>
 8001c7e:	4603      	mov	r3, r0
 8001c80:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    if (rslt == BME280_OK)
 8001c84:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d11d      	bne.n	8001cc8 <get_calib_data+0x7e>
    {
        /* Parse temperature and pressure calibration data and store
         * it in device structure
         */
        parse_temp_press_calib_data(calib_data, dev);
 8001c8c:	f107 030c 	add.w	r3, r7, #12
 8001c90:	6879      	ldr	r1, [r7, #4]
 8001c92:	4618      	mov	r0, r3
 8001c94:	f000 f849 	bl	8001d2a <parse_temp_press_calib_data>
        reg_addr = BME280_HUMIDITY_CALIB_DATA_ADDR;
 8001c98:	23e1      	movs	r3, #225	; 0xe1
 8001c9a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

        /* Read the humidity calibration data from the sensor */
        rslt = bme280_get_regs(reg_addr, calib_data, BME280_HUMIDITY_CALIB_DATA_LEN, dev);
 8001c9e:	f107 010c 	add.w	r1, r7, #12
 8001ca2:	f897 0026 	ldrb.w	r0, [r7, #38]	; 0x26
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	2207      	movs	r2, #7
 8001caa:	f7ff f947 	bl	8000f3c <bme280_get_regs>
 8001cae:	4603      	mov	r3, r0
 8001cb0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

        if (rslt == BME280_OK)
 8001cb4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d105      	bne.n	8001cc8 <get_calib_data+0x7e>
        {
            /* Parse humidity calibration data and store it in
             * device structure
             */
            parse_humidity_calib_data(calib_data, dev);
 8001cbc:	f107 030c 	add.w	r3, r7, #12
 8001cc0:	6879      	ldr	r1, [r7, #4]
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	f000 f8df 	bl	8001e86 <parse_humidity_calib_data>
        }
    }

    return rslt;
 8001cc8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8001ccc:	4618      	mov	r0, r3
 8001cce:	3728      	adds	r7, #40	; 0x28
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	bd80      	pop	{r7, pc}

08001cd4 <interleave_reg_addr>:
/*!
 * @brief This internal API interleaves the register address between the
 * register data buffer for burst write operation.
 */
static void interleave_reg_addr(const uint8_t *reg_addr, uint8_t *temp_buff, const uint8_t *reg_data, uint8_t len)
{
 8001cd4:	b480      	push	{r7}
 8001cd6:	b087      	sub	sp, #28
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	60f8      	str	r0, [r7, #12]
 8001cdc:	60b9      	str	r1, [r7, #8]
 8001cde:	607a      	str	r2, [r7, #4]
 8001ce0:	70fb      	strb	r3, [r7, #3]
    uint8_t index;

    for (index = 1; index < len; index++)
 8001ce2:	2301      	movs	r3, #1
 8001ce4:	75fb      	strb	r3, [r7, #23]
 8001ce6:	e016      	b.n	8001d16 <interleave_reg_addr+0x42>
    {
        temp_buff[(index * 2) - 1] = reg_addr[index];
 8001ce8:	7dfb      	ldrb	r3, [r7, #23]
 8001cea:	68fa      	ldr	r2, [r7, #12]
 8001cec:	441a      	add	r2, r3
 8001cee:	7dfb      	ldrb	r3, [r7, #23]
 8001cf0:	005b      	lsls	r3, r3, #1
 8001cf2:	3b01      	subs	r3, #1
 8001cf4:	68b9      	ldr	r1, [r7, #8]
 8001cf6:	440b      	add	r3, r1
 8001cf8:	7812      	ldrb	r2, [r2, #0]
 8001cfa:	701a      	strb	r2, [r3, #0]
        temp_buff[index * 2] = reg_data[index];
 8001cfc:	7dfb      	ldrb	r3, [r7, #23]
 8001cfe:	687a      	ldr	r2, [r7, #4]
 8001d00:	441a      	add	r2, r3
 8001d02:	7dfb      	ldrb	r3, [r7, #23]
 8001d04:	005b      	lsls	r3, r3, #1
 8001d06:	4619      	mov	r1, r3
 8001d08:	68bb      	ldr	r3, [r7, #8]
 8001d0a:	440b      	add	r3, r1
 8001d0c:	7812      	ldrb	r2, [r2, #0]
 8001d0e:	701a      	strb	r2, [r3, #0]
    for (index = 1; index < len; index++)
 8001d10:	7dfb      	ldrb	r3, [r7, #23]
 8001d12:	3301      	adds	r3, #1
 8001d14:	75fb      	strb	r3, [r7, #23]
 8001d16:	7dfa      	ldrb	r2, [r7, #23]
 8001d18:	78fb      	ldrb	r3, [r7, #3]
 8001d1a:	429a      	cmp	r2, r3
 8001d1c:	d3e4      	bcc.n	8001ce8 <interleave_reg_addr+0x14>
    }
}
 8001d1e:	bf00      	nop
 8001d20:	bf00      	nop
 8001d22:	371c      	adds	r7, #28
 8001d24:	46bd      	mov	sp, r7
 8001d26:	bc80      	pop	{r7}
 8001d28:	4770      	bx	lr

08001d2a <parse_temp_press_calib_data>:
/*!
 *  @brief This internal API is used to parse the temperature and
 *  pressure calibration data and store it in device structure.
 */
static void parse_temp_press_calib_data(const uint8_t *reg_data, struct bme280_dev *dev)
{
 8001d2a:	b480      	push	{r7}
 8001d2c:	b085      	sub	sp, #20
 8001d2e:	af00      	add	r7, sp, #0
 8001d30:	6078      	str	r0, [r7, #4]
 8001d32:	6039      	str	r1, [r7, #0]
    struct bme280_calib_data *calib_data = &dev->calib_data;
 8001d34:	683b      	ldr	r3, [r7, #0]
 8001d36:	3318      	adds	r3, #24
 8001d38:	60fb      	str	r3, [r7, #12]

    calib_data->dig_t1 = BME280_CONCAT_BYTES(reg_data[1], reg_data[0]);
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	3301      	adds	r3, #1
 8001d3e:	781b      	ldrb	r3, [r3, #0]
 8001d40:	021b      	lsls	r3, r3, #8
 8001d42:	b21a      	sxth	r2, r3
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	781b      	ldrb	r3, [r3, #0]
 8001d48:	b21b      	sxth	r3, r3
 8001d4a:	4313      	orrs	r3, r2
 8001d4c:	b21b      	sxth	r3, r3
 8001d4e:	b29a      	uxth	r2, r3
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	801a      	strh	r2, [r3, #0]
    calib_data->dig_t2 = (int16_t)BME280_CONCAT_BYTES(reg_data[3], reg_data[2]);
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	3303      	adds	r3, #3
 8001d58:	781b      	ldrb	r3, [r3, #0]
 8001d5a:	021b      	lsls	r3, r3, #8
 8001d5c:	b21a      	sxth	r2, r3
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	3302      	adds	r3, #2
 8001d62:	781b      	ldrb	r3, [r3, #0]
 8001d64:	b21b      	sxth	r3, r3
 8001d66:	4313      	orrs	r3, r2
 8001d68:	b21a      	sxth	r2, r3
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	805a      	strh	r2, [r3, #2]
    calib_data->dig_t3 = (int16_t)BME280_CONCAT_BYTES(reg_data[5], reg_data[4]);
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	3305      	adds	r3, #5
 8001d72:	781b      	ldrb	r3, [r3, #0]
 8001d74:	021b      	lsls	r3, r3, #8
 8001d76:	b21a      	sxth	r2, r3
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	3304      	adds	r3, #4
 8001d7c:	781b      	ldrb	r3, [r3, #0]
 8001d7e:	b21b      	sxth	r3, r3
 8001d80:	4313      	orrs	r3, r2
 8001d82:	b21a      	sxth	r2, r3
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	809a      	strh	r2, [r3, #4]
    calib_data->dig_p1 = BME280_CONCAT_BYTES(reg_data[7], reg_data[6]);
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	3307      	adds	r3, #7
 8001d8c:	781b      	ldrb	r3, [r3, #0]
 8001d8e:	021b      	lsls	r3, r3, #8
 8001d90:	b21a      	sxth	r2, r3
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	3306      	adds	r3, #6
 8001d96:	781b      	ldrb	r3, [r3, #0]
 8001d98:	b21b      	sxth	r3, r3
 8001d9a:	4313      	orrs	r3, r2
 8001d9c:	b21b      	sxth	r3, r3
 8001d9e:	b29a      	uxth	r2, r3
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	80da      	strh	r2, [r3, #6]
    calib_data->dig_p2 = (int16_t)BME280_CONCAT_BYTES(reg_data[9], reg_data[8]);
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	3309      	adds	r3, #9
 8001da8:	781b      	ldrb	r3, [r3, #0]
 8001daa:	021b      	lsls	r3, r3, #8
 8001dac:	b21a      	sxth	r2, r3
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	3308      	adds	r3, #8
 8001db2:	781b      	ldrb	r3, [r3, #0]
 8001db4:	b21b      	sxth	r3, r3
 8001db6:	4313      	orrs	r3, r2
 8001db8:	b21a      	sxth	r2, r3
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	811a      	strh	r2, [r3, #8]
    calib_data->dig_p3 = (int16_t)BME280_CONCAT_BYTES(reg_data[11], reg_data[10]);
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	330b      	adds	r3, #11
 8001dc2:	781b      	ldrb	r3, [r3, #0]
 8001dc4:	021b      	lsls	r3, r3, #8
 8001dc6:	b21a      	sxth	r2, r3
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	330a      	adds	r3, #10
 8001dcc:	781b      	ldrb	r3, [r3, #0]
 8001dce:	b21b      	sxth	r3, r3
 8001dd0:	4313      	orrs	r3, r2
 8001dd2:	b21a      	sxth	r2, r3
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	815a      	strh	r2, [r3, #10]
    calib_data->dig_p4 = (int16_t)BME280_CONCAT_BYTES(reg_data[13], reg_data[12]);
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	330d      	adds	r3, #13
 8001ddc:	781b      	ldrb	r3, [r3, #0]
 8001dde:	021b      	lsls	r3, r3, #8
 8001de0:	b21a      	sxth	r2, r3
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	330c      	adds	r3, #12
 8001de6:	781b      	ldrb	r3, [r3, #0]
 8001de8:	b21b      	sxth	r3, r3
 8001dea:	4313      	orrs	r3, r2
 8001dec:	b21a      	sxth	r2, r3
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	819a      	strh	r2, [r3, #12]
    calib_data->dig_p5 = (int16_t)BME280_CONCAT_BYTES(reg_data[15], reg_data[14]);
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	330f      	adds	r3, #15
 8001df6:	781b      	ldrb	r3, [r3, #0]
 8001df8:	021b      	lsls	r3, r3, #8
 8001dfa:	b21a      	sxth	r2, r3
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	330e      	adds	r3, #14
 8001e00:	781b      	ldrb	r3, [r3, #0]
 8001e02:	b21b      	sxth	r3, r3
 8001e04:	4313      	orrs	r3, r2
 8001e06:	b21a      	sxth	r2, r3
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	81da      	strh	r2, [r3, #14]
    calib_data->dig_p6 = (int16_t)BME280_CONCAT_BYTES(reg_data[17], reg_data[16]);
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	3311      	adds	r3, #17
 8001e10:	781b      	ldrb	r3, [r3, #0]
 8001e12:	021b      	lsls	r3, r3, #8
 8001e14:	b21a      	sxth	r2, r3
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	3310      	adds	r3, #16
 8001e1a:	781b      	ldrb	r3, [r3, #0]
 8001e1c:	b21b      	sxth	r3, r3
 8001e1e:	4313      	orrs	r3, r2
 8001e20:	b21a      	sxth	r2, r3
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	821a      	strh	r2, [r3, #16]
    calib_data->dig_p7 = (int16_t)BME280_CONCAT_BYTES(reg_data[19], reg_data[18]);
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	3313      	adds	r3, #19
 8001e2a:	781b      	ldrb	r3, [r3, #0]
 8001e2c:	021b      	lsls	r3, r3, #8
 8001e2e:	b21a      	sxth	r2, r3
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	3312      	adds	r3, #18
 8001e34:	781b      	ldrb	r3, [r3, #0]
 8001e36:	b21b      	sxth	r3, r3
 8001e38:	4313      	orrs	r3, r2
 8001e3a:	b21a      	sxth	r2, r3
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	825a      	strh	r2, [r3, #18]
    calib_data->dig_p8 = (int16_t)BME280_CONCAT_BYTES(reg_data[21], reg_data[20]);
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	3315      	adds	r3, #21
 8001e44:	781b      	ldrb	r3, [r3, #0]
 8001e46:	021b      	lsls	r3, r3, #8
 8001e48:	b21a      	sxth	r2, r3
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	3314      	adds	r3, #20
 8001e4e:	781b      	ldrb	r3, [r3, #0]
 8001e50:	b21b      	sxth	r3, r3
 8001e52:	4313      	orrs	r3, r2
 8001e54:	b21a      	sxth	r2, r3
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	829a      	strh	r2, [r3, #20]
    calib_data->dig_p9 = (int16_t)BME280_CONCAT_BYTES(reg_data[23], reg_data[22]);
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	3317      	adds	r3, #23
 8001e5e:	781b      	ldrb	r3, [r3, #0]
 8001e60:	021b      	lsls	r3, r3, #8
 8001e62:	b21a      	sxth	r2, r3
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	3316      	adds	r3, #22
 8001e68:	781b      	ldrb	r3, [r3, #0]
 8001e6a:	b21b      	sxth	r3, r3
 8001e6c:	4313      	orrs	r3, r2
 8001e6e:	b21a      	sxth	r2, r3
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	82da      	strh	r2, [r3, #22]
    calib_data->dig_h1 = reg_data[25];
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	7e5a      	ldrb	r2, [r3, #25]
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	761a      	strb	r2, [r3, #24]
}
 8001e7c:	bf00      	nop
 8001e7e:	3714      	adds	r7, #20
 8001e80:	46bd      	mov	sp, r7
 8001e82:	bc80      	pop	{r7}
 8001e84:	4770      	bx	lr

08001e86 <parse_humidity_calib_data>:
/*!
 *  @brief This internal API is used to parse the humidity calibration data
 *  and store it in device structure.
 */
static void parse_humidity_calib_data(const uint8_t *reg_data, struct bme280_dev *dev)
{
 8001e86:	b480      	push	{r7}
 8001e88:	b087      	sub	sp, #28
 8001e8a:	af00      	add	r7, sp, #0
 8001e8c:	6078      	str	r0, [r7, #4]
 8001e8e:	6039      	str	r1, [r7, #0]
    struct bme280_calib_data *calib_data = &dev->calib_data;
 8001e90:	683b      	ldr	r3, [r7, #0]
 8001e92:	3318      	adds	r3, #24
 8001e94:	617b      	str	r3, [r7, #20]
    int16_t dig_h4_lsb;
    int16_t dig_h4_msb;
    int16_t dig_h5_lsb;
    int16_t dig_h5_msb;

    calib_data->dig_h2 = (int16_t)BME280_CONCAT_BYTES(reg_data[1], reg_data[0]);
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	3301      	adds	r3, #1
 8001e9a:	781b      	ldrb	r3, [r3, #0]
 8001e9c:	021b      	lsls	r3, r3, #8
 8001e9e:	b21a      	sxth	r2, r3
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	781b      	ldrb	r3, [r3, #0]
 8001ea4:	b21b      	sxth	r3, r3
 8001ea6:	4313      	orrs	r3, r2
 8001ea8:	b21a      	sxth	r2, r3
 8001eaa:	697b      	ldr	r3, [r7, #20]
 8001eac:	835a      	strh	r2, [r3, #26]
    calib_data->dig_h3 = reg_data[2];
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	789a      	ldrb	r2, [r3, #2]
 8001eb2:	697b      	ldr	r3, [r7, #20]
 8001eb4:	771a      	strb	r2, [r3, #28]
    dig_h4_msb = (int16_t)(int8_t)reg_data[3] * 16;
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	3303      	adds	r3, #3
 8001eba:	781b      	ldrb	r3, [r3, #0]
 8001ebc:	b25b      	sxtb	r3, r3
 8001ebe:	b29b      	uxth	r3, r3
 8001ec0:	011b      	lsls	r3, r3, #4
 8001ec2:	b29b      	uxth	r3, r3
 8001ec4:	827b      	strh	r3, [r7, #18]
    dig_h4_lsb = (int16_t)(reg_data[4] & 0x0F);
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	3304      	adds	r3, #4
 8001eca:	781b      	ldrb	r3, [r3, #0]
 8001ecc:	b21b      	sxth	r3, r3
 8001ece:	f003 030f 	and.w	r3, r3, #15
 8001ed2:	823b      	strh	r3, [r7, #16]
    calib_data->dig_h4 = dig_h4_msb | dig_h4_lsb;
 8001ed4:	8a7a      	ldrh	r2, [r7, #18]
 8001ed6:	8a3b      	ldrh	r3, [r7, #16]
 8001ed8:	4313      	orrs	r3, r2
 8001eda:	b21a      	sxth	r2, r3
 8001edc:	697b      	ldr	r3, [r7, #20]
 8001ede:	83da      	strh	r2, [r3, #30]
    dig_h5_msb = (int16_t)(int8_t)reg_data[5] * 16;
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	3305      	adds	r3, #5
 8001ee4:	781b      	ldrb	r3, [r3, #0]
 8001ee6:	b25b      	sxtb	r3, r3
 8001ee8:	b29b      	uxth	r3, r3
 8001eea:	011b      	lsls	r3, r3, #4
 8001eec:	b29b      	uxth	r3, r3
 8001eee:	81fb      	strh	r3, [r7, #14]
    dig_h5_lsb = (int16_t)(reg_data[4] >> 4);
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	3304      	adds	r3, #4
 8001ef4:	781b      	ldrb	r3, [r3, #0]
 8001ef6:	091b      	lsrs	r3, r3, #4
 8001ef8:	b2db      	uxtb	r3, r3
 8001efa:	81bb      	strh	r3, [r7, #12]
    calib_data->dig_h5 = dig_h5_msb | dig_h5_lsb;
 8001efc:	89fa      	ldrh	r2, [r7, #14]
 8001efe:	89bb      	ldrh	r3, [r7, #12]
 8001f00:	4313      	orrs	r3, r2
 8001f02:	b21a      	sxth	r2, r3
 8001f04:	697b      	ldr	r3, [r7, #20]
 8001f06:	841a      	strh	r2, [r3, #32]
    calib_data->dig_h6 = (int8_t)reg_data[6];
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	3306      	adds	r3, #6
 8001f0c:	781b      	ldrb	r3, [r3, #0]
 8001f0e:	b25a      	sxtb	r2, r3
 8001f10:	697b      	ldr	r3, [r7, #20]
 8001f12:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
}
 8001f16:	bf00      	nop
 8001f18:	371c      	adds	r7, #28
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	bc80      	pop	{r7}
 8001f1e:	4770      	bx	lr

08001f20 <null_ptr_check>:
/*!
 * @brief This internal API is used to validate the device structure pointer for
 * null conditions.
 */
static int8_t null_ptr_check(const struct bme280_dev *dev)
{
 8001f20:	b480      	push	{r7}
 8001f22:	b085      	sub	sp, #20
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
    int8_t rslt;

    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_us == NULL))
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d00b      	beq.n	8001f46 <null_ptr_check+0x26>
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	68db      	ldr	r3, [r3, #12]
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d007      	beq.n	8001f46 <null_ptr_check+0x26>
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	691b      	ldr	r3, [r3, #16]
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d003      	beq.n	8001f46 <null_ptr_check+0x26>
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	695b      	ldr	r3, [r3, #20]
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d102      	bne.n	8001f4c <null_ptr_check+0x2c>
    {
        /* Device structure pointer is not valid */
        rslt = BME280_E_NULL_PTR;
 8001f46:	23ff      	movs	r3, #255	; 0xff
 8001f48:	73fb      	strb	r3, [r7, #15]
 8001f4a:	e001      	b.n	8001f50 <null_ptr_check+0x30>
    }
    else
    {
        /* Device structure is fine */
        rslt = BME280_OK;
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8001f50:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001f54:	4618      	mov	r0, r3
 8001f56:	3714      	adds	r7, #20
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	bc80      	pop	{r7}
 8001f5c:	4770      	bx	lr
	...

08001f60 <bme280_read>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
//pressure sensor read
int8_t bme280_read(uint8_t reg_addr, uint8_t *data_regp, uint32_t len, void *intf_ptr)
{
 8001f60:	b5b0      	push	{r4, r5, r7, lr}
 8001f62:	b098      	sub	sp, #96	; 0x60
 8001f64:	af02      	add	r7, sp, #8
 8001f66:	60b9      	str	r1, [r7, #8]
 8001f68:	607a      	str	r2, [r7, #4]
 8001f6a:	603b      	str	r3, [r7, #0]
 8001f6c:	4603      	mov	r3, r0
 8001f6e:	73fb      	strb	r3, [r7, #15]
    int8_t rslt = 0; /* Return 0 for Success, non-zero for failure */
 8001f70:	2300      	movs	r3, #0
 8001f72:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    uint8_t buf[64];
    HAL_StatusTypeDef ret;
    ret = HAL_I2C_Master_Transmit(&hi2c1, (uint16_t)(BME280_I2C_ADDR_PRIM << 1), data_regp, I2C_MEMADD_SIZE_8BIT, HAL_MAX_DELAY);
 8001f76:	f04f 33ff 	mov.w	r3, #4294967295
 8001f7a:	9300      	str	r3, [sp, #0]
 8001f7c:	2301      	movs	r3, #1
 8001f7e:	68ba      	ldr	r2, [r7, #8]
 8001f80:	21ec      	movs	r1, #236	; 0xec
 8001f82:	481c      	ldr	r0, [pc, #112]	; (8001ff4 <bme280_read+0x94>)
 8001f84:	f001 faac 	bl	80034e0 <HAL_I2C_Master_Transmit>
 8001f88:	4603      	mov	r3, r0
 8001f8a:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
    HAL_Delay(20);
 8001f8e:	2014      	movs	r0, #20
 8001f90:	f000 febe 	bl	8002d10 <HAL_Delay>
    ret = HAL_I2C_Master_Receive(&hi2c1, (uint16_t)(BME280_I2C_ADDR_PRIM << 1), data_regp, len, HAL_MAX_DELAY);
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	b29b      	uxth	r3, r3
 8001f98:	f04f 32ff 	mov.w	r2, #4294967295
 8001f9c:	9200      	str	r2, [sp, #0]
 8001f9e:	68ba      	ldr	r2, [r7, #8]
 8001fa0:	21ec      	movs	r1, #236	; 0xec
 8001fa2:	4814      	ldr	r0, [pc, #80]	; (8001ff4 <bme280_read+0x94>)
 8001fa4:	f001 fb9a 	bl	80036dc <HAL_I2C_Master_Receive>
 8001fa8:	4603      	mov	r3, r0
 8001faa:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
    if (ret != HAL_OK)
 8001fae:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d00c      	beq.n	8001fd0 <bme280_read+0x70>
    {
    	strcpy((char*)buf, "BME Read Error \r\n");
 8001fb6:	f107 0314 	add.w	r3, r7, #20
 8001fba:	4a0f      	ldr	r2, [pc, #60]	; (8001ff8 <bme280_read+0x98>)
 8001fbc:	461c      	mov	r4, r3
 8001fbe:	4615      	mov	r5, r2
 8001fc0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001fc2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001fc4:	682b      	ldr	r3, [r5, #0]
 8001fc6:	8023      	strh	r3, [r4, #0]
    	rslt = 1;
 8001fc8:	2301      	movs	r3, #1
 8001fca:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 8001fce:	e00a      	b.n	8001fe6 <bme280_read+0x86>
    }
    else
    {
    	strcpy((char*)buf, "BME Read Transmitted \r\n");
 8001fd0:	f107 0314 	add.w	r3, r7, #20
 8001fd4:	4a09      	ldr	r2, [pc, #36]	; (8001ffc <bme280_read+0x9c>)
 8001fd6:	461c      	mov	r4, r3
 8001fd8:	4615      	mov	r5, r2
 8001fda:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001fdc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001fde:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001fe2:	e884 0003 	stmia.w	r4, {r0, r1}
    }
    return rslt;
 8001fe6:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
}
 8001fea:	4618      	mov	r0, r3
 8001fec:	3758      	adds	r7, #88	; 0x58
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	bdb0      	pop	{r4, r5, r7, pc}
 8001ff2:	bf00      	nop
 8001ff4:	200001f8 	.word	0x200001f8
 8001ff8:	08009a08 	.word	0x08009a08
 8001ffc:	08009a1c 	.word	0x08009a1c

08002000 <calculate_altitude>:
    return rslt;
}

//calculate altitude from pressure
double calculate_altitude(struct bme280_data * bd)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	b08a      	sub	sp, #40	; 0x28
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
	double t_over_l = (double)TEMP_AT_SEA_LEVEL/TEMP_LAPSE_RATE;
 8002008:	a31b      	add	r3, pc, #108	; (adr r3, 8002078 <calculate_altitude+0x78>)
 800200a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800200e:	e9c7 2308 	strd	r2, r3, [r7, #32]
	double p_over_pb = (double)(bd->pressure)/(double)PRESS_AT_SEA_LEVEL;
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	4618      	mov	r0, r3
 8002018:	f7fe f9e4 	bl	80003e4 <__aeabi_ui2d>
 800201c:	a318      	add	r3, pc, #96	; (adr r3, 8002080 <calculate_altitude+0x80>)
 800201e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002022:	f7fe fb83 	bl	800072c <__aeabi_ddiv>
 8002026:	4602      	mov	r2, r0
 8002028:	460b      	mov	r3, r1
 800202a:	e9c7 2306 	strd	r2, r3, [r7, #24]
	double exp_term = (double)0.19026; //calculated prior
 800202e:	a316      	add	r3, pc, #88	; (adr r3, 8002088 <calculate_altitude+0x88>)
 8002030:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002034:	e9c7 2304 	strd	r2, r3, [r7, #16]
	double altitude = pow(p_over_pb, exp_term);
 8002038:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800203c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002040:	f006 fdf0 	bl	8008c24 <pow>
 8002044:	e9c7 0102 	strd	r0, r1, [r7, #8]
	altitude = t_over_l * (altitude - 1);
 8002048:	f04f 0200 	mov.w	r2, #0
 800204c:	4b10      	ldr	r3, [pc, #64]	; (8002090 <calculate_altitude+0x90>)
 800204e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002052:	f7fe f889 	bl	8000168 <__aeabi_dsub>
 8002056:	4602      	mov	r2, r0
 8002058:	460b      	mov	r3, r1
 800205a:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800205e:	f7fe fa3b 	bl	80004d8 <__aeabi_dmul>
 8002062:	4602      	mov	r2, r0
 8002064:	460b      	mov	r3, r1
 8002066:	e9c7 2302 	strd	r2, r3, [r7, #8]
	return altitude; //meters
 800206a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
}
 800206e:	4610      	mov	r0, r2
 8002070:	4619      	mov	r1, r3
 8002072:	3728      	adds	r7, #40	; 0x28
 8002074:	46bd      	mov	sp, r7
 8002076:	bd80      	pop	{r7, pc}
 8002078:	89d89d8a 	.word	0x89d89d8a
 800207c:	c0e6029d 	.word	0xc0e6029d
 8002080:	00000000 	.word	0x00000000
 8002084:	40f8bcd0 	.word	0x40f8bcd0
 8002088:	8ede54b5 	.word	0x8ede54b5
 800208c:	3fc85a70 	.word	0x3fc85a70
 8002090:	3ff00000 	.word	0x3ff00000

08002094 <readSensors>:

//FIXME read all sensors
void readSensors(void)
{
 8002094:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002098:	b088      	sub	sp, #32
 800209a:	af04      	add	r7, sp, #16
	float holder;
	//
	//	Temperature and Altitude
	//
	printf("BME280\n");
 800209c:	482b      	ldr	r0, [pc, #172]	; (800214c <readSensors+0xb8>)
 800209e:	f004 fd0f 	bl	8006ac0 <puts>
	bme280_get_sensor_data(BME280_ALL, &comp_data, &bme280_d);
 80020a2:	4a2b      	ldr	r2, [pc, #172]	; (8002150 <readSensors+0xbc>)
 80020a4:	492b      	ldr	r1, [pc, #172]	; (8002154 <readSensors+0xc0>)
 80020a6:	2007      	movs	r0, #7
 80020a8:	f7ff f84d 	bl	8001146 <bme280_get_sensor_data>
	printf("temp: %f\n", comp_data.temperature/100.0);
 80020ac:	4b29      	ldr	r3, [pc, #164]	; (8002154 <readSensors+0xc0>)
 80020ae:	685b      	ldr	r3, [r3, #4]
 80020b0:	4618      	mov	r0, r3
 80020b2:	f7fe f9a7 	bl	8000404 <__aeabi_i2d>
 80020b6:	f04f 0200 	mov.w	r2, #0
 80020ba:	4b27      	ldr	r3, [pc, #156]	; (8002158 <readSensors+0xc4>)
 80020bc:	f7fe fb36 	bl	800072c <__aeabi_ddiv>
 80020c0:	4602      	mov	r2, r0
 80020c2:	460b      	mov	r3, r1
 80020c4:	4825      	ldr	r0, [pc, #148]	; (800215c <readSensors+0xc8>)
 80020c6:	f004 fc75 	bl	80069b4 <iprintf>
	printf("calc. alt: %f\n", calculate_altitude(&comp_data));
 80020ca:	4822      	ldr	r0, [pc, #136]	; (8002154 <readSensors+0xc0>)
 80020cc:	f7ff ff98 	bl	8002000 <calculate_altitude>
 80020d0:	4602      	mov	r2, r0
 80020d2:	460b      	mov	r3, r1
 80020d4:	4822      	ldr	r0, [pc, #136]	; (8002160 <readSensors+0xcc>)
 80020d6:	f004 fc6d 	bl	80069b4 <iprintf>
	holder = calculate_altitude(&comp_data);
 80020da:	481e      	ldr	r0, [pc, #120]	; (8002154 <readSensors+0xc0>)
 80020dc:	f7ff ff90 	bl	8002000 <calculate_altitude>
 80020e0:	4602      	mov	r2, r0
 80020e2:	460b      	mov	r3, r1
 80020e4:	4610      	mov	r0, r2
 80020e6:	4619      	mov	r1, r3
 80020e8:	f7fe fcce 	bl	8000a88 <__aeabi_d2f>
 80020ec:	4603      	mov	r3, r0
 80020ee:	60fb      	str	r3, [r7, #12]
	//readVoltage(md);

	//
	//	Accel/Gyro
	//
	printf("MPU6050\n");
 80020f0:	481c      	ldr	r0, [pc, #112]	; (8002164 <readSensors+0xd0>)
 80020f2:	f004 fce5 	bl	8006ac0 <puts>
	float accX, accY, accZ = 0.0;
 80020f6:	f04f 0300 	mov.w	r3, #0
 80020fa:	603b      	str	r3, [r7, #0]
	MPU6050_Read_Accel(&accX, &accY, &accZ);
 80020fc:	463a      	mov	r2, r7
 80020fe:	1d39      	adds	r1, r7, #4
 8002100:	f107 0308 	add.w	r3, r7, #8
 8002104:	4618      	mov	r0, r3
 8002106:	f000 fac1 	bl	800268c <MPU6050_Read_Accel>
	printf("%f, %f, %f\n", accX, accY, accZ);
 800210a:	68bb      	ldr	r3, [r7, #8]
 800210c:	4618      	mov	r0, r3
 800210e:	f7fe f98b 	bl	8000428 <__aeabi_f2d>
 8002112:	4680      	mov	r8, r0
 8002114:	4689      	mov	r9, r1
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	4618      	mov	r0, r3
 800211a:	f7fe f985 	bl	8000428 <__aeabi_f2d>
 800211e:	4604      	mov	r4, r0
 8002120:	460d      	mov	r5, r1
 8002122:	683b      	ldr	r3, [r7, #0]
 8002124:	4618      	mov	r0, r3
 8002126:	f7fe f97f 	bl	8000428 <__aeabi_f2d>
 800212a:	4602      	mov	r2, r0
 800212c:	460b      	mov	r3, r1
 800212e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8002132:	e9cd 4500 	strd	r4, r5, [sp]
 8002136:	4642      	mov	r2, r8
 8002138:	464b      	mov	r3, r9
 800213a:	480b      	ldr	r0, [pc, #44]	; (8002168 <readSensors+0xd4>)
 800213c:	f004 fc3a 	bl	80069b4 <iprintf>
}
 8002140:	bf00      	nop
 8002142:	3710      	adds	r7, #16
 8002144:	46bd      	mov	sp, r7
 8002146:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800214a:	bf00      	nop
 800214c:	08009aa0 	.word	0x08009aa0
 8002150:	2000031c 	.word	0x2000031c
 8002154:	20000364 	.word	0x20000364
 8002158:	40590000 	.word	0x40590000
 800215c:	08009aa8 	.word	0x08009aa8
 8002160:	08009ab4 	.word	0x08009ab4
 8002164:	08009ac4 	.word	0x08009ac4
 8002168:	08009acc 	.word	0x08009acc

0800216c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	b08a      	sub	sp, #40	; 0x28
 8002170:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002172:	f000 fd6b 	bl	8002c4c <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002176:	f000 f851 	bl	800221c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800217a:	f000 f985 	bl	8002488 <MX_GPIO_Init>
  MX_TIM2_Init();
 800217e:	f000 f8b7 	bl	80022f0 <MX_TIM2_Init>
  MX_I2C1_Init();
 8002182:	f000 f887 	bl	8002294 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8002186:	f000 f929 	bl	80023dc <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 800218a:	f000 f953 	bl	8002434 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800218e:	f107 0308 	add.w	r3, r7, #8
 8002192:	2200      	movs	r2, #0
 8002194:	601a      	str	r2, [r3, #0]
 8002196:	605a      	str	r2, [r3, #4]
 8002198:	609a      	str	r2, [r3, #8]
 800219a:	60da      	str	r2, [r3, #12]
	GPIO_InitStruct.Pin = I2C_SDA_Pin | I2C_SCL_Pin;
 800219c:	f44f 7340 	mov.w	r3, #768	; 0x300
 80021a0:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80021a2:	2312      	movs	r3, #18
 80021a4:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021a6:	2300      	movs	r3, #0
 80021a8:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80021aa:	2303      	movs	r3, #3
 80021ac:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021ae:	f107 0308 	add.w	r3, r7, #8
 80021b2:	4619      	mov	r1, r3
 80021b4:	4815      	ldr	r0, [pc, #84]	; (800220c <main+0xa0>)
 80021b6:	f000 feb3 	bl	8002f20 <HAL_GPIO_Init>

	//Pressure sensor setup
  	uint8_t bme280_addr = BME280_I2C_ADDR_PRIM;
 80021ba:	2376      	movs	r3, #118	; 0x76
 80021bc:	71fb      	strb	r3, [r7, #7]
	bme280_d.intf_ptr = &bme280_addr;
 80021be:	4a14      	ldr	r2, [pc, #80]	; (8002210 <main+0xa4>)
 80021c0:	1dfb      	adds	r3, r7, #7
 80021c2:	6053      	str	r3, [r2, #4]
	bme280_d.intf = BME280_I2C_INTF;
 80021c4:	4b12      	ldr	r3, [pc, #72]	; (8002210 <main+0xa4>)
 80021c6:	2201      	movs	r2, #1
 80021c8:	721a      	strb	r2, [r3, #8]
	bme280_d.read = bme280_read;
 80021ca:	4b11      	ldr	r3, [pc, #68]	; (8002210 <main+0xa4>)
 80021cc:	4a11      	ldr	r2, [pc, #68]	; (8002214 <main+0xa8>)
 80021ce:	60da      	str	r2, [r3, #12]

	uint8_t check,data;
	data = 0xB6;
 80021d0:	23b6      	movs	r3, #182	; 0xb6
 80021d2:	71bb      	strb	r3, [r7, #6]
	HAL_I2C_Mem_Write(&hi2c1, BME280_I2C_ADDR_PRIM << 1, BME280_RESET_ADDR, 1, &data, 1 , 1000);
 80021d4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80021d8:	9302      	str	r3, [sp, #8]
 80021da:	2301      	movs	r3, #1
 80021dc:	9301      	str	r3, [sp, #4]
 80021de:	1dbb      	adds	r3, r7, #6
 80021e0:	9300      	str	r3, [sp, #0]
 80021e2:	2301      	movs	r3, #1
 80021e4:	22e0      	movs	r2, #224	; 0xe0
 80021e6:	21ec      	movs	r1, #236	; 0xec
 80021e8:	480b      	ldr	r0, [pc, #44]	; (8002218 <main+0xac>)
 80021ea:	f001 fcd7 	bl	8003b9c <HAL_I2C_Mem_Write>
	HAL_Delay(30);
 80021ee:	201e      	movs	r0, #30
 80021f0:	f000 fd8e 	bl	8002d10 <HAL_Delay>
	bme280_init(&bme280_d);
 80021f4:	4806      	ldr	r0, [pc, #24]	; (8002210 <main+0xa4>)
 80021f6:	f7fe fe53 	bl	8000ea0 <bme280_init>

	//Gyro|Accel setup
	MPU6050_init();
 80021fa:	f000 f9e9 	bl	80025d0 <MPU6050_init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
		readSensors();
 80021fe:	f7ff ff49 	bl	8002094 <readSensors>
		HAL_Delay(1000);
 8002202:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002206:	f000 fd83 	bl	8002d10 <HAL_Delay>
		readSensors();
 800220a:	e7f8      	b.n	80021fe <main+0x92>
 800220c:	40010c00 	.word	0x40010c00
 8002210:	2000031c 	.word	0x2000031c
 8002214:	08001f61 	.word	0x08001f61
 8002218:	200001f8 	.word	0x200001f8

0800221c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800221c:	b580      	push	{r7, lr}
 800221e:	b090      	sub	sp, #64	; 0x40
 8002220:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002222:	f107 0318 	add.w	r3, r7, #24
 8002226:	2228      	movs	r2, #40	; 0x28
 8002228:	2100      	movs	r1, #0
 800222a:	4618      	mov	r0, r3
 800222c:	f003 ff5a 	bl	80060e4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002230:	1d3b      	adds	r3, r7, #4
 8002232:	2200      	movs	r2, #0
 8002234:	601a      	str	r2, [r3, #0]
 8002236:	605a      	str	r2, [r3, #4]
 8002238:	609a      	str	r2, [r3, #8]
 800223a:	60da      	str	r2, [r3, #12]
 800223c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800223e:	2302      	movs	r3, #2
 8002240:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002242:	2301      	movs	r3, #1
 8002244:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002246:	2310      	movs	r3, #16
 8002248:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800224a:	2300      	movs	r3, #0
 800224c:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800224e:	f107 0318 	add.w	r3, r7, #24
 8002252:	4618      	mov	r0, r3
 8002254:	f002 fcae 	bl	8004bb4 <HAL_RCC_OscConfig>
 8002258:	4603      	mov	r3, r0
 800225a:	2b00      	cmp	r3, #0
 800225c:	d001      	beq.n	8002262 <SystemClock_Config+0x46>
  {
    Error_Handler();
 800225e:	f000 f9b1 	bl	80025c4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002262:	230f      	movs	r3, #15
 8002264:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8002266:	2300      	movs	r3, #0
 8002268:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800226a:	2300      	movs	r3, #0
 800226c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800226e:	2300      	movs	r3, #0
 8002270:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002272:	2300      	movs	r3, #0
 8002274:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8002276:	1d3b      	adds	r3, r7, #4
 8002278:	2100      	movs	r1, #0
 800227a:	4618      	mov	r0, r3
 800227c:	f002 ff1c 	bl	80050b8 <HAL_RCC_ClockConfig>
 8002280:	4603      	mov	r3, r0
 8002282:	2b00      	cmp	r3, #0
 8002284:	d001      	beq.n	800228a <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8002286:	f000 f99d 	bl	80025c4 <Error_Handler>
  }
}
 800228a:	bf00      	nop
 800228c:	3740      	adds	r7, #64	; 0x40
 800228e:	46bd      	mov	sp, r7
 8002290:	bd80      	pop	{r7, pc}
	...

08002294 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002298:	4b12      	ldr	r3, [pc, #72]	; (80022e4 <MX_I2C1_Init+0x50>)
 800229a:	4a13      	ldr	r2, [pc, #76]	; (80022e8 <MX_I2C1_Init+0x54>)
 800229c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800229e:	4b11      	ldr	r3, [pc, #68]	; (80022e4 <MX_I2C1_Init+0x50>)
 80022a0:	4a12      	ldr	r2, [pc, #72]	; (80022ec <MX_I2C1_Init+0x58>)
 80022a2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80022a4:	4b0f      	ldr	r3, [pc, #60]	; (80022e4 <MX_I2C1_Init+0x50>)
 80022a6:	2200      	movs	r2, #0
 80022a8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80022aa:	4b0e      	ldr	r3, [pc, #56]	; (80022e4 <MX_I2C1_Init+0x50>)
 80022ac:	2200      	movs	r2, #0
 80022ae:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80022b0:	4b0c      	ldr	r3, [pc, #48]	; (80022e4 <MX_I2C1_Init+0x50>)
 80022b2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80022b6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80022b8:	4b0a      	ldr	r3, [pc, #40]	; (80022e4 <MX_I2C1_Init+0x50>)
 80022ba:	2200      	movs	r2, #0
 80022bc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80022be:	4b09      	ldr	r3, [pc, #36]	; (80022e4 <MX_I2C1_Init+0x50>)
 80022c0:	2200      	movs	r2, #0
 80022c2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80022c4:	4b07      	ldr	r3, [pc, #28]	; (80022e4 <MX_I2C1_Init+0x50>)
 80022c6:	2200      	movs	r2, #0
 80022c8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80022ca:	4b06      	ldr	r3, [pc, #24]	; (80022e4 <MX_I2C1_Init+0x50>)
 80022cc:	2200      	movs	r2, #0
 80022ce:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80022d0:	4804      	ldr	r0, [pc, #16]	; (80022e4 <MX_I2C1_Init+0x50>)
 80022d2:	f000 ffc1 	bl	8003258 <HAL_I2C_Init>
 80022d6:	4603      	mov	r3, r0
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d001      	beq.n	80022e0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80022dc:	f000 f972 	bl	80025c4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80022e0:	bf00      	nop
 80022e2:	bd80      	pop	{r7, pc}
 80022e4:	200001f8 	.word	0x200001f8
 80022e8:	40005400 	.word	0x40005400
 80022ec:	00061a80 	.word	0x00061a80

080022f0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b08e      	sub	sp, #56	; 0x38
 80022f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80022f6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80022fa:	2200      	movs	r2, #0
 80022fc:	601a      	str	r2, [r3, #0]
 80022fe:	605a      	str	r2, [r3, #4]
 8002300:	609a      	str	r2, [r3, #8]
 8002302:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002304:	f107 0320 	add.w	r3, r7, #32
 8002308:	2200      	movs	r2, #0
 800230a:	601a      	str	r2, [r3, #0]
 800230c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800230e:	1d3b      	adds	r3, r7, #4
 8002310:	2200      	movs	r2, #0
 8002312:	601a      	str	r2, [r3, #0]
 8002314:	605a      	str	r2, [r3, #4]
 8002316:	609a      	str	r2, [r3, #8]
 8002318:	60da      	str	r2, [r3, #12]
 800231a:	611a      	str	r2, [r3, #16]
 800231c:	615a      	str	r2, [r3, #20]
 800231e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002320:	4b2d      	ldr	r3, [pc, #180]	; (80023d8 <MX_TIM2_Init+0xe8>)
 8002322:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002326:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 3;
 8002328:	4b2b      	ldr	r3, [pc, #172]	; (80023d8 <MX_TIM2_Init+0xe8>)
 800232a:	2203      	movs	r2, #3
 800232c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800232e:	4b2a      	ldr	r3, [pc, #168]	; (80023d8 <MX_TIM2_Init+0xe8>)
 8002330:	2200      	movs	r2, #0
 8002332:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 300;
 8002334:	4b28      	ldr	r3, [pc, #160]	; (80023d8 <MX_TIM2_Init+0xe8>)
 8002336:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800233a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800233c:	4b26      	ldr	r3, [pc, #152]	; (80023d8 <MX_TIM2_Init+0xe8>)
 800233e:	2200      	movs	r2, #0
 8002340:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002342:	4b25      	ldr	r3, [pc, #148]	; (80023d8 <MX_TIM2_Init+0xe8>)
 8002344:	2200      	movs	r2, #0
 8002346:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002348:	4823      	ldr	r0, [pc, #140]	; (80023d8 <MX_TIM2_Init+0xe8>)
 800234a:	f003 f84d 	bl	80053e8 <HAL_TIM_Base_Init>
 800234e:	4603      	mov	r3, r0
 8002350:	2b00      	cmp	r3, #0
 8002352:	d001      	beq.n	8002358 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8002354:	f000 f936 	bl	80025c4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002358:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800235c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800235e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002362:	4619      	mov	r1, r3
 8002364:	481c      	ldr	r0, [pc, #112]	; (80023d8 <MX_TIM2_Init+0xe8>)
 8002366:	f003 f9a5 	bl	80056b4 <HAL_TIM_ConfigClockSource>
 800236a:	4603      	mov	r3, r0
 800236c:	2b00      	cmp	r3, #0
 800236e:	d001      	beq.n	8002374 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8002370:	f000 f928 	bl	80025c4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8002374:	4818      	ldr	r0, [pc, #96]	; (80023d8 <MX_TIM2_Init+0xe8>)
 8002376:	f003 f886 	bl	8005486 <HAL_TIM_PWM_Init>
 800237a:	4603      	mov	r3, r0
 800237c:	2b00      	cmp	r3, #0
 800237e:	d001      	beq.n	8002384 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8002380:	f000 f920 	bl	80025c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002384:	2300      	movs	r3, #0
 8002386:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002388:	2300      	movs	r3, #0
 800238a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800238c:	f107 0320 	add.w	r3, r7, #32
 8002390:	4619      	mov	r1, r3
 8002392:	4811      	ldr	r0, [pc, #68]	; (80023d8 <MX_TIM2_Init+0xe8>)
 8002394:	f003 fcd2 	bl	8005d3c <HAL_TIMEx_MasterConfigSynchronization>
 8002398:	4603      	mov	r3, r0
 800239a:	2b00      	cmp	r3, #0
 800239c:	d001      	beq.n	80023a2 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 800239e:	f000 f911 	bl	80025c4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80023a2:	2360      	movs	r3, #96	; 0x60
 80023a4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80023a6:	2300      	movs	r3, #0
 80023a8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80023aa:	2300      	movs	r3, #0
 80023ac:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80023ae:	2300      	movs	r3, #0
 80023b0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80023b2:	1d3b      	adds	r3, r7, #4
 80023b4:	2200      	movs	r2, #0
 80023b6:	4619      	mov	r1, r3
 80023b8:	4807      	ldr	r0, [pc, #28]	; (80023d8 <MX_TIM2_Init+0xe8>)
 80023ba:	f003 f8bd 	bl	8005538 <HAL_TIM_PWM_ConfigChannel>
 80023be:	4603      	mov	r3, r0
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d001      	beq.n	80023c8 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 80023c4:	f000 f8fe 	bl	80025c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80023c8:	4803      	ldr	r0, [pc, #12]	; (80023d8 <MX_TIM2_Init+0xe8>)
 80023ca:	f000 fa73 	bl	80028b4 <HAL_TIM_MspPostInit>

}
 80023ce:	bf00      	nop
 80023d0:	3738      	adds	r7, #56	; 0x38
 80023d2:	46bd      	mov	sp, r7
 80023d4:	bd80      	pop	{r7, pc}
 80023d6:	bf00      	nop
 80023d8:	2000024c 	.word	0x2000024c

080023dc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80023e0:	4b12      	ldr	r3, [pc, #72]	; (800242c <MX_USART1_UART_Init+0x50>)
 80023e2:	4a13      	ldr	r2, [pc, #76]	; (8002430 <MX_USART1_UART_Init+0x54>)
 80023e4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80023e6:	4b11      	ldr	r3, [pc, #68]	; (800242c <MX_USART1_UART_Init+0x50>)
 80023e8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80023ec:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80023ee:	4b0f      	ldr	r3, [pc, #60]	; (800242c <MX_USART1_UART_Init+0x50>)
 80023f0:	2200      	movs	r2, #0
 80023f2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80023f4:	4b0d      	ldr	r3, [pc, #52]	; (800242c <MX_USART1_UART_Init+0x50>)
 80023f6:	2200      	movs	r2, #0
 80023f8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80023fa:	4b0c      	ldr	r3, [pc, #48]	; (800242c <MX_USART1_UART_Init+0x50>)
 80023fc:	2200      	movs	r2, #0
 80023fe:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002400:	4b0a      	ldr	r3, [pc, #40]	; (800242c <MX_USART1_UART_Init+0x50>)
 8002402:	220c      	movs	r2, #12
 8002404:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002406:	4b09      	ldr	r3, [pc, #36]	; (800242c <MX_USART1_UART_Init+0x50>)
 8002408:	2200      	movs	r2, #0
 800240a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800240c:	4b07      	ldr	r3, [pc, #28]	; (800242c <MX_USART1_UART_Init+0x50>)
 800240e:	2200      	movs	r2, #0
 8002410:	61da      	str	r2, [r3, #28]
  if (HAL_MultiProcessor_Init(&huart1, 0, UART_WAKEUPMETHOD_IDLELINE) != HAL_OK)
 8002412:	2200      	movs	r2, #0
 8002414:	2100      	movs	r1, #0
 8002416:	4805      	ldr	r0, [pc, #20]	; (800242c <MX_USART1_UART_Init+0x50>)
 8002418:	f003 fd3b 	bl	8005e92 <HAL_MultiProcessor_Init>
 800241c:	4603      	mov	r3, r0
 800241e:	2b00      	cmp	r3, #0
 8002420:	d001      	beq.n	8002426 <MX_USART1_UART_Init+0x4a>
  {
    Error_Handler();
 8002422:	f000 f8cf 	bl	80025c4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002426:	bf00      	nop
 8002428:	bd80      	pop	{r7, pc}
 800242a:	bf00      	nop
 800242c:	20000294 	.word	0x20000294
 8002430:	40013800 	.word	0x40013800

08002434 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002438:	4b11      	ldr	r3, [pc, #68]	; (8002480 <MX_USART3_UART_Init+0x4c>)
 800243a:	4a12      	ldr	r2, [pc, #72]	; (8002484 <MX_USART3_UART_Init+0x50>)
 800243c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800243e:	4b10      	ldr	r3, [pc, #64]	; (8002480 <MX_USART3_UART_Init+0x4c>)
 8002440:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002444:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002446:	4b0e      	ldr	r3, [pc, #56]	; (8002480 <MX_USART3_UART_Init+0x4c>)
 8002448:	2200      	movs	r2, #0
 800244a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800244c:	4b0c      	ldr	r3, [pc, #48]	; (8002480 <MX_USART3_UART_Init+0x4c>)
 800244e:	2200      	movs	r2, #0
 8002450:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002452:	4b0b      	ldr	r3, [pc, #44]	; (8002480 <MX_USART3_UART_Init+0x4c>)
 8002454:	2200      	movs	r2, #0
 8002456:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002458:	4b09      	ldr	r3, [pc, #36]	; (8002480 <MX_USART3_UART_Init+0x4c>)
 800245a:	220c      	movs	r2, #12
 800245c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800245e:	4b08      	ldr	r3, [pc, #32]	; (8002480 <MX_USART3_UART_Init+0x4c>)
 8002460:	2200      	movs	r2, #0
 8002462:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002464:	4b06      	ldr	r3, [pc, #24]	; (8002480 <MX_USART3_UART_Init+0x4c>)
 8002466:	2200      	movs	r2, #0
 8002468:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800246a:	4805      	ldr	r0, [pc, #20]	; (8002480 <MX_USART3_UART_Init+0x4c>)
 800246c:	f003 fcc4 	bl	8005df8 <HAL_UART_Init>
 8002470:	4603      	mov	r3, r0
 8002472:	2b00      	cmp	r3, #0
 8002474:	d001      	beq.n	800247a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8002476:	f000 f8a5 	bl	80025c4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800247a:	bf00      	nop
 800247c:	bd80      	pop	{r7, pc}
 800247e:	bf00      	nop
 8002480:	200002d8 	.word	0x200002d8
 8002484:	40004800 	.word	0x40004800

08002488 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	b088      	sub	sp, #32
 800248c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800248e:	f107 0310 	add.w	r3, r7, #16
 8002492:	2200      	movs	r2, #0
 8002494:	601a      	str	r2, [r3, #0]
 8002496:	605a      	str	r2, [r3, #4]
 8002498:	609a      	str	r2, [r3, #8]
 800249a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800249c:	4b46      	ldr	r3, [pc, #280]	; (80025b8 <MX_GPIO_Init+0x130>)
 800249e:	699b      	ldr	r3, [r3, #24]
 80024a0:	4a45      	ldr	r2, [pc, #276]	; (80025b8 <MX_GPIO_Init+0x130>)
 80024a2:	f043 0320 	orr.w	r3, r3, #32
 80024a6:	6193      	str	r3, [r2, #24]
 80024a8:	4b43      	ldr	r3, [pc, #268]	; (80025b8 <MX_GPIO_Init+0x130>)
 80024aa:	699b      	ldr	r3, [r3, #24]
 80024ac:	f003 0320 	and.w	r3, r3, #32
 80024b0:	60fb      	str	r3, [r7, #12]
 80024b2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80024b4:	4b40      	ldr	r3, [pc, #256]	; (80025b8 <MX_GPIO_Init+0x130>)
 80024b6:	699b      	ldr	r3, [r3, #24]
 80024b8:	4a3f      	ldr	r2, [pc, #252]	; (80025b8 <MX_GPIO_Init+0x130>)
 80024ba:	f043 0304 	orr.w	r3, r3, #4
 80024be:	6193      	str	r3, [r2, #24]
 80024c0:	4b3d      	ldr	r3, [pc, #244]	; (80025b8 <MX_GPIO_Init+0x130>)
 80024c2:	699b      	ldr	r3, [r3, #24]
 80024c4:	f003 0304 	and.w	r3, r3, #4
 80024c8:	60bb      	str	r3, [r7, #8]
 80024ca:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80024cc:	4b3a      	ldr	r3, [pc, #232]	; (80025b8 <MX_GPIO_Init+0x130>)
 80024ce:	699b      	ldr	r3, [r3, #24]
 80024d0:	4a39      	ldr	r2, [pc, #228]	; (80025b8 <MX_GPIO_Init+0x130>)
 80024d2:	f043 0308 	orr.w	r3, r3, #8
 80024d6:	6193      	str	r3, [r2, #24]
 80024d8:	4b37      	ldr	r3, [pc, #220]	; (80025b8 <MX_GPIO_Init+0x130>)
 80024da:	699b      	ldr	r3, [r3, #24]
 80024dc:	f003 0308 	and.w	r3, r3, #8
 80024e0:	607b      	str	r3, [r7, #4]
 80024e2:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SOLENOID1_Pin|SOLENOID2_Pin|XBEE1_SLEEP_Pin|MPU_INT_Pin
 80024e4:	2200      	movs	r2, #0
 80024e6:	f44f 51ce 	mov.w	r1, #6592	; 0x19c0
 80024ea:	4834      	ldr	r0, [pc, #208]	; (80025bc <MX_GPIO_Init+0x134>)
 80024ec:	f000 fe9c 	bl	8003228 <HAL_GPIO_WritePin>
                          |GPIO_PI_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, BUZZER_Pin|TESTLED_Pin, GPIO_PIN_RESET);
 80024f0:	2200      	movs	r2, #0
 80024f2:	2190      	movs	r1, #144	; 0x90
 80024f4:	4832      	ldr	r0, [pc, #200]	; (80025c0 <MX_GPIO_Init+0x138>)
 80024f6:	f000 fe97 	bl	8003228 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80024fa:	2304      	movs	r3, #4
 80024fc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024fe:	2302      	movs	r3, #2
 8002500:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002502:	2303      	movs	r3, #3
 8002504:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002506:	f107 0310 	add.w	r3, r7, #16
 800250a:	4619      	mov	r1, r3
 800250c:	482b      	ldr	r0, [pc, #172]	; (80025bc <MX_GPIO_Init+0x134>)
 800250e:	f000 fd07 	bl	8002f20 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002512:	2308      	movs	r3, #8
 8002514:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002516:	2300      	movs	r3, #0
 8002518:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800251a:	2300      	movs	r3, #0
 800251c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800251e:	f107 0310 	add.w	r3, r7, #16
 8002522:	4619      	mov	r1, r3
 8002524:	4825      	ldr	r0, [pc, #148]	; (80025bc <MX_GPIO_Init+0x134>)
 8002526:	f000 fcfb 	bl	8002f20 <HAL_GPIO_Init>

  /*Configure GPIO pins : SWDIO_Pin SWCLK_Pin MPU_INTA14_Pin */
  GPIO_InitStruct.Pin = SWDIO_Pin|SWCLK_Pin|MPU_INTA14_Pin;
 800252a:	f244 0330 	movw	r3, #16432	; 0x4030
 800252e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002530:	2300      	movs	r3, #0
 8002532:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002534:	2300      	movs	r3, #0
 8002536:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002538:	f107 0310 	add.w	r3, r7, #16
 800253c:	4619      	mov	r1, r3
 800253e:	481f      	ldr	r0, [pc, #124]	; (80025bc <MX_GPIO_Init+0x134>)
 8002540:	f000 fcee 	bl	8002f20 <HAL_GPIO_Init>

  /*Configure GPIO pins : SOLENOID1_Pin SOLENOID2_Pin XBEE1_SLEEP_Pin MPU_INT_Pin
                           GPIO_PI_Pin */
  GPIO_InitStruct.Pin = SOLENOID1_Pin|SOLENOID2_Pin|XBEE1_SLEEP_Pin|MPU_INT_Pin
 8002544:	f44f 53ce 	mov.w	r3, #6592	; 0x19c0
 8002548:	613b      	str	r3, [r7, #16]
                          |GPIO_PI_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800254a:	2301      	movs	r3, #1
 800254c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800254e:	2300      	movs	r3, #0
 8002550:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002552:	2302      	movs	r3, #2
 8002554:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002556:	f107 0310 	add.w	r3, r7, #16
 800255a:	4619      	mov	r1, r3
 800255c:	4817      	ldr	r0, [pc, #92]	; (80025bc <MX_GPIO_Init+0x134>)
 800255e:	f000 fcdf 	bl	8002f20 <HAL_GPIO_Init>

  /*Configure GPIO pins : BOOT1_Pin MAG_INT_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin|MAG_INT_Pin;
 8002562:	2324      	movs	r3, #36	; 0x24
 8002564:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002566:	2300      	movs	r3, #0
 8002568:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800256a:	2300      	movs	r3, #0
 800256c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800256e:	f107 0310 	add.w	r3, r7, #16
 8002572:	4619      	mov	r1, r3
 8002574:	4812      	ldr	r0, [pc, #72]	; (80025c0 <MX_GPIO_Init+0x138>)
 8002576:	f000 fcd3 	bl	8002f20 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800257a:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800257e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002580:	2302      	movs	r3, #2
 8002582:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002584:	2303      	movs	r3, #3
 8002586:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002588:	f107 0310 	add.w	r3, r7, #16
 800258c:	4619      	mov	r1, r3
 800258e:	480c      	ldr	r0, [pc, #48]	; (80025c0 <MX_GPIO_Init+0x138>)
 8002590:	f000 fcc6 	bl	8002f20 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUZZER_Pin TESTLED_Pin */
  GPIO_InitStruct.Pin = BUZZER_Pin|TESTLED_Pin;
 8002594:	2390      	movs	r3, #144	; 0x90
 8002596:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002598:	2301      	movs	r3, #1
 800259a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800259c:	2300      	movs	r3, #0
 800259e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025a0:	2302      	movs	r3, #2
 80025a2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025a4:	f107 0310 	add.w	r3, r7, #16
 80025a8:	4619      	mov	r1, r3
 80025aa:	4805      	ldr	r0, [pc, #20]	; (80025c0 <MX_GPIO_Init+0x138>)
 80025ac:	f000 fcb8 	bl	8002f20 <HAL_GPIO_Init>

}
 80025b0:	bf00      	nop
 80025b2:	3720      	adds	r7, #32
 80025b4:	46bd      	mov	sp, r7
 80025b6:	bd80      	pop	{r7, pc}
 80025b8:	40021000 	.word	0x40021000
 80025bc:	40010800 	.word	0x40010800
 80025c0:	40010c00 	.word	0x40010c00

080025c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80025c4:	b480      	push	{r7}
 80025c6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80025c8:	b672      	cpsid	i
}
 80025ca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80025cc:	e7fe      	b.n	80025cc <Error_Handler+0x8>
	...

080025d0 <MPU6050_init>:
int16_t Accel_X_RAW, Accel_Y_RAW, Accel_Z_RAW;
int16_t Gyro_X_RAW, Gyro_Y_RAW, Gyro_Z_RAW;
//float Ax, Ay, Az, Gx, Gy, Gz;
extern I2C_HandleTypeDef hi2c1;  // change your handler here accordingly
void MPU6050_init(void)
{
 80025d0:	b580      	push	{r7, lr}
 80025d2:	b086      	sub	sp, #24
 80025d4:	af04      	add	r7, sp, #16
	uint8_t check,data;
	HAL_I2C_Mem_Read(&hi2c1, MPU6050_ADDR, WHO_AM_I_REG, 1, &check, 1 , 1000);
 80025d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80025da:	9302      	str	r3, [sp, #8]
 80025dc:	2301      	movs	r3, #1
 80025de:	9301      	str	r3, [sp, #4]
 80025e0:	1dfb      	adds	r3, r7, #7
 80025e2:	9300      	str	r3, [sp, #0]
 80025e4:	2301      	movs	r3, #1
 80025e6:	2275      	movs	r2, #117	; 0x75
 80025e8:	21d0      	movs	r1, #208	; 0xd0
 80025ea:	4826      	ldr	r0, [pc, #152]	; (8002684 <MPU6050_init+0xb4>)
 80025ec:	f001 fbd0 	bl	8003d90 <HAL_I2C_Mem_Read>
	printf("MPU6050: %d, %d\n", check, data);
 80025f0:	79fb      	ldrb	r3, [r7, #7]
 80025f2:	4619      	mov	r1, r3
 80025f4:	79bb      	ldrb	r3, [r7, #6]
 80025f6:	461a      	mov	r2, r3
 80025f8:	4823      	ldr	r0, [pc, #140]	; (8002688 <MPU6050_init+0xb8>)
 80025fa:	f004 f9db 	bl	80069b4 <iprintf>
	if (check == 104)
 80025fe:	79fb      	ldrb	r3, [r7, #7]
 8002600:	2b68      	cmp	r3, #104	; 0x68
 8002602:	d13b      	bne.n	800267c <MPU6050_init+0xac>
	{
		//Power management register write all 0's to wake up sensor
		data = 0x00;
 8002604:	2300      	movs	r3, #0
 8002606:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c1,MPU6050_ADDR, PWR_MGMT_1_REG, 1, &data, 1, 1000);
 8002608:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800260c:	9302      	str	r3, [sp, #8]
 800260e:	2301      	movs	r3, #1
 8002610:	9301      	str	r3, [sp, #4]
 8002612:	1dbb      	adds	r3, r7, #6
 8002614:	9300      	str	r3, [sp, #0]
 8002616:	2301      	movs	r3, #1
 8002618:	226b      	movs	r2, #107	; 0x6b
 800261a:	21d0      	movs	r1, #208	; 0xd0
 800261c:	4819      	ldr	r0, [pc, #100]	; (8002684 <MPU6050_init+0xb4>)
 800261e:	f001 fabd 	bl	8003b9c <HAL_I2C_Mem_Write>
		//Set data rate of 1KHz by writing SMPRT_DIV register
		data = 0x07;
 8002622:	2307      	movs	r3, #7
 8002624:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &data, 1, 1000);
 8002626:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800262a:	9302      	str	r3, [sp, #8]
 800262c:	2301      	movs	r3, #1
 800262e:	9301      	str	r3, [sp, #4]
 8002630:	1dbb      	adds	r3, r7, #6
 8002632:	9300      	str	r3, [sp, #0]
 8002634:	2301      	movs	r3, #1
 8002636:	2219      	movs	r2, #25
 8002638:	21d0      	movs	r1, #208	; 0xd0
 800263a:	4812      	ldr	r0, [pc, #72]	; (8002684 <MPU6050_init+0xb4>)
 800263c:	f001 faae 	bl	8003b9c <HAL_I2C_Mem_Write>
		//Writing both register with 0 to set full scale range
		data = 0x00;
 8002640:	2300      	movs	r3, #0
 8002642:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &data, 1, 1000);
 8002644:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002648:	9302      	str	r3, [sp, #8]
 800264a:	2301      	movs	r3, #1
 800264c:	9301      	str	r3, [sp, #4]
 800264e:	1dbb      	adds	r3, r7, #6
 8002650:	9300      	str	r3, [sp, #0]
 8002652:	2301      	movs	r3, #1
 8002654:	221c      	movs	r2, #28
 8002656:	21d0      	movs	r1, #208	; 0xd0
 8002658:	480a      	ldr	r0, [pc, #40]	; (8002684 <MPU6050_init+0xb4>)
 800265a:	f001 fa9f 	bl	8003b9c <HAL_I2C_Mem_Write>

		data = 0x00;
 800265e:	2300      	movs	r3, #0
 8002660:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &data, 1, 1000);
 8002662:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002666:	9302      	str	r3, [sp, #8]
 8002668:	2301      	movs	r3, #1
 800266a:	9301      	str	r3, [sp, #4]
 800266c:	1dbb      	adds	r3, r7, #6
 800266e:	9300      	str	r3, [sp, #0]
 8002670:	2301      	movs	r3, #1
 8002672:	221b      	movs	r2, #27
 8002674:	21d0      	movs	r1, #208	; 0xd0
 8002676:	4803      	ldr	r0, [pc, #12]	; (8002684 <MPU6050_init+0xb4>)
 8002678:	f001 fa90 	bl	8003b9c <HAL_I2C_Mem_Write>
	}

}
 800267c:	bf00      	nop
 800267e:	3708      	adds	r7, #8
 8002680:	46bd      	mov	sp, r7
 8002682:	bd80      	pop	{r7, pc}
 8002684:	200001f8 	.word	0x200001f8
 8002688:	08009ad8 	.word	0x08009ad8

0800268c <MPU6050_Read_Accel>:

//Function with multiple return using pointer

void MPU6050_Read_Accel (float* Ax, float* Ay, float* Az)
{
 800268c:	b580      	push	{r7, lr}
 800268e:	b08a      	sub	sp, #40	; 0x28
 8002690:	af04      	add	r7, sp, #16
 8002692:	60f8      	str	r0, [r7, #12]
 8002694:	60b9      	str	r1, [r7, #8]
 8002696:	607a      	str	r2, [r7, #4]
	uint8_t Rec_Data[6];

	HAL_I2C_Mem_Read (&hi2c1, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, Rec_Data, 6, 1000);
 8002698:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800269c:	9302      	str	r3, [sp, #8]
 800269e:	2306      	movs	r3, #6
 80026a0:	9301      	str	r3, [sp, #4]
 80026a2:	f107 0310 	add.w	r3, r7, #16
 80026a6:	9300      	str	r3, [sp, #0]
 80026a8:	2301      	movs	r3, #1
 80026aa:	223b      	movs	r2, #59	; 0x3b
 80026ac:	21d0      	movs	r1, #208	; 0xd0
 80026ae:	4835      	ldr	r0, [pc, #212]	; (8002784 <MPU6050_Read_Accel+0xf8>)
 80026b0:	f001 fb6e 	bl	8003d90 <HAL_I2C_Mem_Read>
	//Adding 2 BYTES into 16 bit integer
	Accel_X_RAW = (int16_t)(Rec_Data[0] << 8 | Rec_Data [1]);
 80026b4:	7c3b      	ldrb	r3, [r7, #16]
 80026b6:	021b      	lsls	r3, r3, #8
 80026b8:	b21a      	sxth	r2, r3
 80026ba:	7c7b      	ldrb	r3, [r7, #17]
 80026bc:	b21b      	sxth	r3, r3
 80026be:	4313      	orrs	r3, r2
 80026c0:	b21a      	sxth	r2, r3
 80026c2:	4b31      	ldr	r3, [pc, #196]	; (8002788 <MPU6050_Read_Accel+0xfc>)
 80026c4:	801a      	strh	r2, [r3, #0]
	Accel_Y_RAW = (int16_t)(Rec_Data[2] << 8 | Rec_Data [3]);
 80026c6:	7cbb      	ldrb	r3, [r7, #18]
 80026c8:	021b      	lsls	r3, r3, #8
 80026ca:	b21a      	sxth	r2, r3
 80026cc:	7cfb      	ldrb	r3, [r7, #19]
 80026ce:	b21b      	sxth	r3, r3
 80026d0:	4313      	orrs	r3, r2
 80026d2:	b21a      	sxth	r2, r3
 80026d4:	4b2d      	ldr	r3, [pc, #180]	; (800278c <MPU6050_Read_Accel+0x100>)
 80026d6:	801a      	strh	r2, [r3, #0]
	Accel_Z_RAW = (int16_t)(Rec_Data[4] << 8 | Rec_Data [5]);
 80026d8:	7d3b      	ldrb	r3, [r7, #20]
 80026da:	021b      	lsls	r3, r3, #8
 80026dc:	b21a      	sxth	r2, r3
 80026de:	7d7b      	ldrb	r3, [r7, #21]
 80026e0:	b21b      	sxth	r3, r3
 80026e2:	4313      	orrs	r3, r2
 80026e4:	b21a      	sxth	r2, r3
 80026e6:	4b2a      	ldr	r3, [pc, #168]	; (8002790 <MPU6050_Read_Accel+0x104>)
 80026e8:	801a      	strh	r2, [r3, #0]

	*Ax = Accel_X_RAW*100/16384.0;
 80026ea:	4b27      	ldr	r3, [pc, #156]	; (8002788 <MPU6050_Read_Accel+0xfc>)
 80026ec:	f9b3 3000 	ldrsh.w	r3, [r3]
 80026f0:	461a      	mov	r2, r3
 80026f2:	2364      	movs	r3, #100	; 0x64
 80026f4:	fb02 f303 	mul.w	r3, r2, r3
 80026f8:	4618      	mov	r0, r3
 80026fa:	f7fd fe83 	bl	8000404 <__aeabi_i2d>
 80026fe:	f04f 0200 	mov.w	r2, #0
 8002702:	4b24      	ldr	r3, [pc, #144]	; (8002794 <MPU6050_Read_Accel+0x108>)
 8002704:	f7fe f812 	bl	800072c <__aeabi_ddiv>
 8002708:	4602      	mov	r2, r0
 800270a:	460b      	mov	r3, r1
 800270c:	4610      	mov	r0, r2
 800270e:	4619      	mov	r1, r3
 8002710:	f7fe f9ba 	bl	8000a88 <__aeabi_d2f>
 8002714:	4602      	mov	r2, r0
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	601a      	str	r2, [r3, #0]
	*Ay = Accel_Y_RAW*100/16384.0;
 800271a:	4b1c      	ldr	r3, [pc, #112]	; (800278c <MPU6050_Read_Accel+0x100>)
 800271c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002720:	461a      	mov	r2, r3
 8002722:	2364      	movs	r3, #100	; 0x64
 8002724:	fb02 f303 	mul.w	r3, r2, r3
 8002728:	4618      	mov	r0, r3
 800272a:	f7fd fe6b 	bl	8000404 <__aeabi_i2d>
 800272e:	f04f 0200 	mov.w	r2, #0
 8002732:	4b18      	ldr	r3, [pc, #96]	; (8002794 <MPU6050_Read_Accel+0x108>)
 8002734:	f7fd fffa 	bl	800072c <__aeabi_ddiv>
 8002738:	4602      	mov	r2, r0
 800273a:	460b      	mov	r3, r1
 800273c:	4610      	mov	r0, r2
 800273e:	4619      	mov	r1, r3
 8002740:	f7fe f9a2 	bl	8000a88 <__aeabi_d2f>
 8002744:	4602      	mov	r2, r0
 8002746:	68bb      	ldr	r3, [r7, #8]
 8002748:	601a      	str	r2, [r3, #0]
	*Az = Accel_Z_RAW*100/16384.0;
 800274a:	4b11      	ldr	r3, [pc, #68]	; (8002790 <MPU6050_Read_Accel+0x104>)
 800274c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002750:	461a      	mov	r2, r3
 8002752:	2364      	movs	r3, #100	; 0x64
 8002754:	fb02 f303 	mul.w	r3, r2, r3
 8002758:	4618      	mov	r0, r3
 800275a:	f7fd fe53 	bl	8000404 <__aeabi_i2d>
 800275e:	f04f 0200 	mov.w	r2, #0
 8002762:	4b0c      	ldr	r3, [pc, #48]	; (8002794 <MPU6050_Read_Accel+0x108>)
 8002764:	f7fd ffe2 	bl	800072c <__aeabi_ddiv>
 8002768:	4602      	mov	r2, r0
 800276a:	460b      	mov	r3, r1
 800276c:	4610      	mov	r0, r2
 800276e:	4619      	mov	r1, r3
 8002770:	f7fe f98a 	bl	8000a88 <__aeabi_d2f>
 8002774:	4602      	mov	r2, r0
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	601a      	str	r2, [r3, #0]
}
 800277a:	bf00      	nop
 800277c:	3718      	adds	r7, #24
 800277e:	46bd      	mov	sp, r7
 8002780:	bd80      	pop	{r7, pc}
 8002782:	bf00      	nop
 8002784:	200001f8 	.word	0x200001f8
 8002788:	20000370 	.word	0x20000370
 800278c:	20000372 	.word	0x20000372
 8002790:	20000374 	.word	0x20000374
 8002794:	40d00000 	.word	0x40d00000

08002798 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002798:	b480      	push	{r7}
 800279a:	b083      	sub	sp, #12
 800279c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800279e:	4b0e      	ldr	r3, [pc, #56]	; (80027d8 <HAL_MspInit+0x40>)
 80027a0:	699b      	ldr	r3, [r3, #24]
 80027a2:	4a0d      	ldr	r2, [pc, #52]	; (80027d8 <HAL_MspInit+0x40>)
 80027a4:	f043 0301 	orr.w	r3, r3, #1
 80027a8:	6193      	str	r3, [r2, #24]
 80027aa:	4b0b      	ldr	r3, [pc, #44]	; (80027d8 <HAL_MspInit+0x40>)
 80027ac:	699b      	ldr	r3, [r3, #24]
 80027ae:	f003 0301 	and.w	r3, r3, #1
 80027b2:	607b      	str	r3, [r7, #4]
 80027b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80027b6:	4b08      	ldr	r3, [pc, #32]	; (80027d8 <HAL_MspInit+0x40>)
 80027b8:	69db      	ldr	r3, [r3, #28]
 80027ba:	4a07      	ldr	r2, [pc, #28]	; (80027d8 <HAL_MspInit+0x40>)
 80027bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027c0:	61d3      	str	r3, [r2, #28]
 80027c2:	4b05      	ldr	r3, [pc, #20]	; (80027d8 <HAL_MspInit+0x40>)
 80027c4:	69db      	ldr	r3, [r3, #28]
 80027c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027ca:	603b      	str	r3, [r7, #0]
 80027cc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80027ce:	bf00      	nop
 80027d0:	370c      	adds	r7, #12
 80027d2:	46bd      	mov	sp, r7
 80027d4:	bc80      	pop	{r7}
 80027d6:	4770      	bx	lr
 80027d8:	40021000 	.word	0x40021000

080027dc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	b08a      	sub	sp, #40	; 0x28
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027e4:	f107 0314 	add.w	r3, r7, #20
 80027e8:	2200      	movs	r2, #0
 80027ea:	601a      	str	r2, [r3, #0]
 80027ec:	605a      	str	r2, [r3, #4]
 80027ee:	609a      	str	r2, [r3, #8]
 80027f0:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	4a1d      	ldr	r2, [pc, #116]	; (800286c <HAL_I2C_MspInit+0x90>)
 80027f8:	4293      	cmp	r3, r2
 80027fa:	d132      	bne.n	8002862 <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80027fc:	4b1c      	ldr	r3, [pc, #112]	; (8002870 <HAL_I2C_MspInit+0x94>)
 80027fe:	699b      	ldr	r3, [r3, #24]
 8002800:	4a1b      	ldr	r2, [pc, #108]	; (8002870 <HAL_I2C_MspInit+0x94>)
 8002802:	f043 0308 	orr.w	r3, r3, #8
 8002806:	6193      	str	r3, [r2, #24]
 8002808:	4b19      	ldr	r3, [pc, #100]	; (8002870 <HAL_I2C_MspInit+0x94>)
 800280a:	699b      	ldr	r3, [r3, #24]
 800280c:	f003 0308 	and.w	r3, r3, #8
 8002810:	613b      	str	r3, [r7, #16]
 8002812:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C_SCL_Pin|I2C_SDA_Pin;
 8002814:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002818:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800281a:	2312      	movs	r3, #18
 800281c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800281e:	2303      	movs	r3, #3
 8002820:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002822:	f107 0314 	add.w	r3, r7, #20
 8002826:	4619      	mov	r1, r3
 8002828:	4812      	ldr	r0, [pc, #72]	; (8002874 <HAL_I2C_MspInit+0x98>)
 800282a:	f000 fb79 	bl	8002f20 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 800282e:	4b12      	ldr	r3, [pc, #72]	; (8002878 <HAL_I2C_MspInit+0x9c>)
 8002830:	685b      	ldr	r3, [r3, #4]
 8002832:	627b      	str	r3, [r7, #36]	; 0x24
 8002834:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002836:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 800283a:	627b      	str	r3, [r7, #36]	; 0x24
 800283c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800283e:	f043 0302 	orr.w	r3, r3, #2
 8002842:	627b      	str	r3, [r7, #36]	; 0x24
 8002844:	4a0c      	ldr	r2, [pc, #48]	; (8002878 <HAL_I2C_MspInit+0x9c>)
 8002846:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002848:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800284a:	4b09      	ldr	r3, [pc, #36]	; (8002870 <HAL_I2C_MspInit+0x94>)
 800284c:	69db      	ldr	r3, [r3, #28]
 800284e:	4a08      	ldr	r2, [pc, #32]	; (8002870 <HAL_I2C_MspInit+0x94>)
 8002850:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002854:	61d3      	str	r3, [r2, #28]
 8002856:	4b06      	ldr	r3, [pc, #24]	; (8002870 <HAL_I2C_MspInit+0x94>)
 8002858:	69db      	ldr	r3, [r3, #28]
 800285a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800285e:	60fb      	str	r3, [r7, #12]
 8002860:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002862:	bf00      	nop
 8002864:	3728      	adds	r7, #40	; 0x28
 8002866:	46bd      	mov	sp, r7
 8002868:	bd80      	pop	{r7, pc}
 800286a:	bf00      	nop
 800286c:	40005400 	.word	0x40005400
 8002870:	40021000 	.word	0x40021000
 8002874:	40010c00 	.word	0x40010c00
 8002878:	40010000 	.word	0x40010000

0800287c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800287c:	b480      	push	{r7}
 800287e:	b085      	sub	sp, #20
 8002880:	af00      	add	r7, sp, #0
 8002882:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800288c:	d10b      	bne.n	80028a6 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800288e:	4b08      	ldr	r3, [pc, #32]	; (80028b0 <HAL_TIM_Base_MspInit+0x34>)
 8002890:	69db      	ldr	r3, [r3, #28]
 8002892:	4a07      	ldr	r2, [pc, #28]	; (80028b0 <HAL_TIM_Base_MspInit+0x34>)
 8002894:	f043 0301 	orr.w	r3, r3, #1
 8002898:	61d3      	str	r3, [r2, #28]
 800289a:	4b05      	ldr	r3, [pc, #20]	; (80028b0 <HAL_TIM_Base_MspInit+0x34>)
 800289c:	69db      	ldr	r3, [r3, #28]
 800289e:	f003 0301 	and.w	r3, r3, #1
 80028a2:	60fb      	str	r3, [r7, #12]
 80028a4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80028a6:	bf00      	nop
 80028a8:	3714      	adds	r7, #20
 80028aa:	46bd      	mov	sp, r7
 80028ac:	bc80      	pop	{r7}
 80028ae:	4770      	bx	lr
 80028b0:	40021000 	.word	0x40021000

080028b4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	b088      	sub	sp, #32
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028bc:	f107 0310 	add.w	r3, r7, #16
 80028c0:	2200      	movs	r2, #0
 80028c2:	601a      	str	r2, [r3, #0]
 80028c4:	605a      	str	r2, [r3, #4]
 80028c6:	609a      	str	r2, [r3, #8]
 80028c8:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028d2:	d117      	bne.n	8002904 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80028d4:	4b0d      	ldr	r3, [pc, #52]	; (800290c <HAL_TIM_MspPostInit+0x58>)
 80028d6:	699b      	ldr	r3, [r3, #24]
 80028d8:	4a0c      	ldr	r2, [pc, #48]	; (800290c <HAL_TIM_MspPostInit+0x58>)
 80028da:	f043 0304 	orr.w	r3, r3, #4
 80028de:	6193      	str	r3, [r2, #24]
 80028e0:	4b0a      	ldr	r3, [pc, #40]	; (800290c <HAL_TIM_MspPostInit+0x58>)
 80028e2:	699b      	ldr	r3, [r3, #24]
 80028e4:	f003 0304 	and.w	r3, r3, #4
 80028e8:	60fb      	str	r3, [r7, #12]
 80028ea:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = SERVO1_PWM_Pin;
 80028ec:	2301      	movs	r3, #1
 80028ee:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028f0:	2302      	movs	r3, #2
 80028f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028f4:	2302      	movs	r3, #2
 80028f6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(SERVO1_PWM_GPIO_Port, &GPIO_InitStruct);
 80028f8:	f107 0310 	add.w	r3, r7, #16
 80028fc:	4619      	mov	r1, r3
 80028fe:	4804      	ldr	r0, [pc, #16]	; (8002910 <HAL_TIM_MspPostInit+0x5c>)
 8002900:	f000 fb0e 	bl	8002f20 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8002904:	bf00      	nop
 8002906:	3720      	adds	r7, #32
 8002908:	46bd      	mov	sp, r7
 800290a:	bd80      	pop	{r7, pc}
 800290c:	40021000 	.word	0x40021000
 8002910:	40010800 	.word	0x40010800

08002914 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002914:	b580      	push	{r7, lr}
 8002916:	b08a      	sub	sp, #40	; 0x28
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800291c:	f107 0318 	add.w	r3, r7, #24
 8002920:	2200      	movs	r2, #0
 8002922:	601a      	str	r2, [r3, #0]
 8002924:	605a      	str	r2, [r3, #4]
 8002926:	609a      	str	r2, [r3, #8]
 8002928:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	4a38      	ldr	r2, [pc, #224]	; (8002a10 <HAL_UART_MspInit+0xfc>)
 8002930:	4293      	cmp	r3, r2
 8002932:	d132      	bne.n	800299a <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002934:	4b37      	ldr	r3, [pc, #220]	; (8002a14 <HAL_UART_MspInit+0x100>)
 8002936:	699b      	ldr	r3, [r3, #24]
 8002938:	4a36      	ldr	r2, [pc, #216]	; (8002a14 <HAL_UART_MspInit+0x100>)
 800293a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800293e:	6193      	str	r3, [r2, #24]
 8002940:	4b34      	ldr	r3, [pc, #208]	; (8002a14 <HAL_UART_MspInit+0x100>)
 8002942:	699b      	ldr	r3, [r3, #24]
 8002944:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002948:	617b      	str	r3, [r7, #20]
 800294a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800294c:	4b31      	ldr	r3, [pc, #196]	; (8002a14 <HAL_UART_MspInit+0x100>)
 800294e:	699b      	ldr	r3, [r3, #24]
 8002950:	4a30      	ldr	r2, [pc, #192]	; (8002a14 <HAL_UART_MspInit+0x100>)
 8002952:	f043 0304 	orr.w	r3, r3, #4
 8002956:	6193      	str	r3, [r2, #24]
 8002958:	4b2e      	ldr	r3, [pc, #184]	; (8002a14 <HAL_UART_MspInit+0x100>)
 800295a:	699b      	ldr	r3, [r3, #24]
 800295c:	f003 0304 	and.w	r3, r3, #4
 8002960:	613b      	str	r3, [r7, #16]
 8002962:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = XBEE1_IN_Pin;
 8002964:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002968:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800296a:	2302      	movs	r3, #2
 800296c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800296e:	2303      	movs	r3, #3
 8002970:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(XBEE1_IN_GPIO_Port, &GPIO_InitStruct);
 8002972:	f107 0318 	add.w	r3, r7, #24
 8002976:	4619      	mov	r1, r3
 8002978:	4827      	ldr	r0, [pc, #156]	; (8002a18 <HAL_UART_MspInit+0x104>)
 800297a:	f000 fad1 	bl	8002f20 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = XBEE1_OUT_Pin;
 800297e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002982:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002984:	2300      	movs	r3, #0
 8002986:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002988:	2300      	movs	r3, #0
 800298a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(XBEE1_OUT_GPIO_Port, &GPIO_InitStruct);
 800298c:	f107 0318 	add.w	r3, r7, #24
 8002990:	4619      	mov	r1, r3
 8002992:	4821      	ldr	r0, [pc, #132]	; (8002a18 <HAL_UART_MspInit+0x104>)
 8002994:	f000 fac4 	bl	8002f20 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002998:	e036      	b.n	8002a08 <HAL_UART_MspInit+0xf4>
  else if(huart->Instance==USART3)
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	4a1f      	ldr	r2, [pc, #124]	; (8002a1c <HAL_UART_MspInit+0x108>)
 80029a0:	4293      	cmp	r3, r2
 80029a2:	d131      	bne.n	8002a08 <HAL_UART_MspInit+0xf4>
    __HAL_RCC_USART3_CLK_ENABLE();
 80029a4:	4b1b      	ldr	r3, [pc, #108]	; (8002a14 <HAL_UART_MspInit+0x100>)
 80029a6:	69db      	ldr	r3, [r3, #28]
 80029a8:	4a1a      	ldr	r2, [pc, #104]	; (8002a14 <HAL_UART_MspInit+0x100>)
 80029aa:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80029ae:	61d3      	str	r3, [r2, #28]
 80029b0:	4b18      	ldr	r3, [pc, #96]	; (8002a14 <HAL_UART_MspInit+0x100>)
 80029b2:	69db      	ldr	r3, [r3, #28]
 80029b4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80029b8:	60fb      	str	r3, [r7, #12]
 80029ba:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80029bc:	4b15      	ldr	r3, [pc, #84]	; (8002a14 <HAL_UART_MspInit+0x100>)
 80029be:	699b      	ldr	r3, [r3, #24]
 80029c0:	4a14      	ldr	r2, [pc, #80]	; (8002a14 <HAL_UART_MspInit+0x100>)
 80029c2:	f043 0308 	orr.w	r3, r3, #8
 80029c6:	6193      	str	r3, [r2, #24]
 80029c8:	4b12      	ldr	r3, [pc, #72]	; (8002a14 <HAL_UART_MspInit+0x100>)
 80029ca:	699b      	ldr	r3, [r3, #24]
 80029cc:	f003 0308 	and.w	r3, r3, #8
 80029d0:	60bb      	str	r3, [r7, #8]
 80029d2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ESP_TX_Pin;
 80029d4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80029d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029da:	2302      	movs	r3, #2
 80029dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80029de:	2303      	movs	r3, #3
 80029e0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ESP_TX_GPIO_Port, &GPIO_InitStruct);
 80029e2:	f107 0318 	add.w	r3, r7, #24
 80029e6:	4619      	mov	r1, r3
 80029e8:	480d      	ldr	r0, [pc, #52]	; (8002a20 <HAL_UART_MspInit+0x10c>)
 80029ea:	f000 fa99 	bl	8002f20 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = ESP_RX_Pin;
 80029ee:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80029f2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80029f4:	2300      	movs	r3, #0
 80029f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029f8:	2300      	movs	r3, #0
 80029fa:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(ESP_RX_GPIO_Port, &GPIO_InitStruct);
 80029fc:	f107 0318 	add.w	r3, r7, #24
 8002a00:	4619      	mov	r1, r3
 8002a02:	4807      	ldr	r0, [pc, #28]	; (8002a20 <HAL_UART_MspInit+0x10c>)
 8002a04:	f000 fa8c 	bl	8002f20 <HAL_GPIO_Init>
}
 8002a08:	bf00      	nop
 8002a0a:	3728      	adds	r7, #40	; 0x28
 8002a0c:	46bd      	mov	sp, r7
 8002a0e:	bd80      	pop	{r7, pc}
 8002a10:	40013800 	.word	0x40013800
 8002a14:	40021000 	.word	0x40021000
 8002a18:	40010800 	.word	0x40010800
 8002a1c:	40004800 	.word	0x40004800
 8002a20:	40010c00 	.word	0x40010c00

08002a24 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002a24:	b480      	push	{r7}
 8002a26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002a28:	e7fe      	b.n	8002a28 <NMI_Handler+0x4>

08002a2a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002a2a:	b480      	push	{r7}
 8002a2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002a2e:	e7fe      	b.n	8002a2e <HardFault_Handler+0x4>

08002a30 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002a30:	b480      	push	{r7}
 8002a32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002a34:	e7fe      	b.n	8002a34 <MemManage_Handler+0x4>

08002a36 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002a36:	b480      	push	{r7}
 8002a38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002a3a:	e7fe      	b.n	8002a3a <BusFault_Handler+0x4>

08002a3c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002a3c:	b480      	push	{r7}
 8002a3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002a40:	e7fe      	b.n	8002a40 <UsageFault_Handler+0x4>

08002a42 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002a42:	b480      	push	{r7}
 8002a44:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002a46:	bf00      	nop
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	bc80      	pop	{r7}
 8002a4c:	4770      	bx	lr

08002a4e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002a4e:	b480      	push	{r7}
 8002a50:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002a52:	bf00      	nop
 8002a54:	46bd      	mov	sp, r7
 8002a56:	bc80      	pop	{r7}
 8002a58:	4770      	bx	lr

08002a5a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002a5a:	b480      	push	{r7}
 8002a5c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002a5e:	bf00      	nop
 8002a60:	46bd      	mov	sp, r7
 8002a62:	bc80      	pop	{r7}
 8002a64:	4770      	bx	lr

08002a66 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002a66:	b580      	push	{r7, lr}
 8002a68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002a6a:	f000 f935 	bl	8002cd8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002a6e:	bf00      	nop
 8002a70:	bd80      	pop	{r7, pc}

08002a72 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002a72:	b480      	push	{r7}
 8002a74:	af00      	add	r7, sp, #0
  return 1;
 8002a76:	2301      	movs	r3, #1
}
 8002a78:	4618      	mov	r0, r3
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	bc80      	pop	{r7}
 8002a7e:	4770      	bx	lr

08002a80 <_kill>:

int _kill(int pid, int sig)
{
 8002a80:	b580      	push	{r7, lr}
 8002a82:	b082      	sub	sp, #8
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	6078      	str	r0, [r7, #4]
 8002a88:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002a8a:	f003 fb01 	bl	8006090 <__errno>
 8002a8e:	4603      	mov	r3, r0
 8002a90:	2216      	movs	r2, #22
 8002a92:	601a      	str	r2, [r3, #0]
  return -1;
 8002a94:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002a98:	4618      	mov	r0, r3
 8002a9a:	3708      	adds	r7, #8
 8002a9c:	46bd      	mov	sp, r7
 8002a9e:	bd80      	pop	{r7, pc}

08002aa0 <_exit>:

void _exit (int status)
{
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	b082      	sub	sp, #8
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002aa8:	f04f 31ff 	mov.w	r1, #4294967295
 8002aac:	6878      	ldr	r0, [r7, #4]
 8002aae:	f7ff ffe7 	bl	8002a80 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002ab2:	e7fe      	b.n	8002ab2 <_exit+0x12>

08002ab4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	b086      	sub	sp, #24
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	60f8      	str	r0, [r7, #12]
 8002abc:	60b9      	str	r1, [r7, #8]
 8002abe:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002ac0:	2300      	movs	r3, #0
 8002ac2:	617b      	str	r3, [r7, #20]
 8002ac4:	e00a      	b.n	8002adc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002ac6:	f3af 8000 	nop.w
 8002aca:	4601      	mov	r1, r0
 8002acc:	68bb      	ldr	r3, [r7, #8]
 8002ace:	1c5a      	adds	r2, r3, #1
 8002ad0:	60ba      	str	r2, [r7, #8]
 8002ad2:	b2ca      	uxtb	r2, r1
 8002ad4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002ad6:	697b      	ldr	r3, [r7, #20]
 8002ad8:	3301      	adds	r3, #1
 8002ada:	617b      	str	r3, [r7, #20]
 8002adc:	697a      	ldr	r2, [r7, #20]
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	429a      	cmp	r2, r3
 8002ae2:	dbf0      	blt.n	8002ac6 <_read+0x12>
  }

  return len;
 8002ae4:	687b      	ldr	r3, [r7, #4]
}
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	3718      	adds	r7, #24
 8002aea:	46bd      	mov	sp, r7
 8002aec:	bd80      	pop	{r7, pc}

08002aee <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002aee:	b580      	push	{r7, lr}
 8002af0:	b086      	sub	sp, #24
 8002af2:	af00      	add	r7, sp, #0
 8002af4:	60f8      	str	r0, [r7, #12]
 8002af6:	60b9      	str	r1, [r7, #8]
 8002af8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002afa:	2300      	movs	r3, #0
 8002afc:	617b      	str	r3, [r7, #20]
 8002afe:	e009      	b.n	8002b14 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002b00:	68bb      	ldr	r3, [r7, #8]
 8002b02:	1c5a      	adds	r2, r3, #1
 8002b04:	60ba      	str	r2, [r7, #8]
 8002b06:	781b      	ldrb	r3, [r3, #0]
 8002b08:	4618      	mov	r0, r3
 8002b0a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b0e:	697b      	ldr	r3, [r7, #20]
 8002b10:	3301      	adds	r3, #1
 8002b12:	617b      	str	r3, [r7, #20]
 8002b14:	697a      	ldr	r2, [r7, #20]
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	429a      	cmp	r2, r3
 8002b1a:	dbf1      	blt.n	8002b00 <_write+0x12>
  }
  return len;
 8002b1c:	687b      	ldr	r3, [r7, #4]
}
 8002b1e:	4618      	mov	r0, r3
 8002b20:	3718      	adds	r7, #24
 8002b22:	46bd      	mov	sp, r7
 8002b24:	bd80      	pop	{r7, pc}

08002b26 <_close>:

int _close(int file)
{
 8002b26:	b480      	push	{r7}
 8002b28:	b083      	sub	sp, #12
 8002b2a:	af00      	add	r7, sp, #0
 8002b2c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002b2e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002b32:	4618      	mov	r0, r3
 8002b34:	370c      	adds	r7, #12
 8002b36:	46bd      	mov	sp, r7
 8002b38:	bc80      	pop	{r7}
 8002b3a:	4770      	bx	lr

08002b3c <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002b3c:	b480      	push	{r7}
 8002b3e:	b083      	sub	sp, #12
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	6078      	str	r0, [r7, #4]
 8002b44:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002b46:	683b      	ldr	r3, [r7, #0]
 8002b48:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002b4c:	605a      	str	r2, [r3, #4]
  return 0;
 8002b4e:	2300      	movs	r3, #0
}
 8002b50:	4618      	mov	r0, r3
 8002b52:	370c      	adds	r7, #12
 8002b54:	46bd      	mov	sp, r7
 8002b56:	bc80      	pop	{r7}
 8002b58:	4770      	bx	lr

08002b5a <_isatty>:

int _isatty(int file)
{
 8002b5a:	b480      	push	{r7}
 8002b5c:	b083      	sub	sp, #12
 8002b5e:	af00      	add	r7, sp, #0
 8002b60:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002b62:	2301      	movs	r3, #1
}
 8002b64:	4618      	mov	r0, r3
 8002b66:	370c      	adds	r7, #12
 8002b68:	46bd      	mov	sp, r7
 8002b6a:	bc80      	pop	{r7}
 8002b6c:	4770      	bx	lr

08002b6e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002b6e:	b480      	push	{r7}
 8002b70:	b085      	sub	sp, #20
 8002b72:	af00      	add	r7, sp, #0
 8002b74:	60f8      	str	r0, [r7, #12]
 8002b76:	60b9      	str	r1, [r7, #8]
 8002b78:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002b7a:	2300      	movs	r3, #0
}
 8002b7c:	4618      	mov	r0, r3
 8002b7e:	3714      	adds	r7, #20
 8002b80:	46bd      	mov	sp, r7
 8002b82:	bc80      	pop	{r7}
 8002b84:	4770      	bx	lr
	...

08002b88 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	b086      	sub	sp, #24
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002b90:	4a14      	ldr	r2, [pc, #80]	; (8002be4 <_sbrk+0x5c>)
 8002b92:	4b15      	ldr	r3, [pc, #84]	; (8002be8 <_sbrk+0x60>)
 8002b94:	1ad3      	subs	r3, r2, r3
 8002b96:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002b98:	697b      	ldr	r3, [r7, #20]
 8002b9a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002b9c:	4b13      	ldr	r3, [pc, #76]	; (8002bec <_sbrk+0x64>)
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d102      	bne.n	8002baa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002ba4:	4b11      	ldr	r3, [pc, #68]	; (8002bec <_sbrk+0x64>)
 8002ba6:	4a12      	ldr	r2, [pc, #72]	; (8002bf0 <_sbrk+0x68>)
 8002ba8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002baa:	4b10      	ldr	r3, [pc, #64]	; (8002bec <_sbrk+0x64>)
 8002bac:	681a      	ldr	r2, [r3, #0]
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	4413      	add	r3, r2
 8002bb2:	693a      	ldr	r2, [r7, #16]
 8002bb4:	429a      	cmp	r2, r3
 8002bb6:	d207      	bcs.n	8002bc8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002bb8:	f003 fa6a 	bl	8006090 <__errno>
 8002bbc:	4603      	mov	r3, r0
 8002bbe:	220c      	movs	r2, #12
 8002bc0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002bc2:	f04f 33ff 	mov.w	r3, #4294967295
 8002bc6:	e009      	b.n	8002bdc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002bc8:	4b08      	ldr	r3, [pc, #32]	; (8002bec <_sbrk+0x64>)
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002bce:	4b07      	ldr	r3, [pc, #28]	; (8002bec <_sbrk+0x64>)
 8002bd0:	681a      	ldr	r2, [r3, #0]
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	4413      	add	r3, r2
 8002bd6:	4a05      	ldr	r2, [pc, #20]	; (8002bec <_sbrk+0x64>)
 8002bd8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002bda:	68fb      	ldr	r3, [r7, #12]
}
 8002bdc:	4618      	mov	r0, r3
 8002bde:	3718      	adds	r7, #24
 8002be0:	46bd      	mov	sp, r7
 8002be2:	bd80      	pop	{r7, pc}
 8002be4:	20005000 	.word	0x20005000
 8002be8:	00000400 	.word	0x00000400
 8002bec:	20000378 	.word	0x20000378
 8002bf0:	20000390 	.word	0x20000390

08002bf4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002bf4:	b480      	push	{r7}
 8002bf6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002bf8:	bf00      	nop
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	bc80      	pop	{r7}
 8002bfe:	4770      	bx	lr

08002c00 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002c00:	480c      	ldr	r0, [pc, #48]	; (8002c34 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002c02:	490d      	ldr	r1, [pc, #52]	; (8002c38 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002c04:	4a0d      	ldr	r2, [pc, #52]	; (8002c3c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002c06:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002c08:	e002      	b.n	8002c10 <LoopCopyDataInit>

08002c0a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002c0a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002c0c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002c0e:	3304      	adds	r3, #4

08002c10 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002c10:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002c12:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002c14:	d3f9      	bcc.n	8002c0a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002c16:	4a0a      	ldr	r2, [pc, #40]	; (8002c40 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002c18:	4c0a      	ldr	r4, [pc, #40]	; (8002c44 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002c1a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002c1c:	e001      	b.n	8002c22 <LoopFillZerobss>

08002c1e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002c1e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002c20:	3204      	adds	r2, #4

08002c22 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002c22:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002c24:	d3fb      	bcc.n	8002c1e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002c26:	f7ff ffe5 	bl	8002bf4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002c2a:	f003 fa37 	bl	800609c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002c2e:	f7ff fa9d 	bl	800216c <main>
  bx lr
 8002c32:	4770      	bx	lr
  ldr r0, =_sdata
 8002c34:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002c38:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8002c3c:	08009f30 	.word	0x08009f30
  ldr r2, =_sbss
 8002c40:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8002c44:	20000390 	.word	0x20000390

08002c48 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002c48:	e7fe      	b.n	8002c48 <ADC1_2_IRQHandler>
	...

08002c4c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002c50:	4b08      	ldr	r3, [pc, #32]	; (8002c74 <HAL_Init+0x28>)
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	4a07      	ldr	r2, [pc, #28]	; (8002c74 <HAL_Init+0x28>)
 8002c56:	f043 0310 	orr.w	r3, r3, #16
 8002c5a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002c5c:	2003      	movs	r0, #3
 8002c5e:	f000 f92b 	bl	8002eb8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002c62:	200f      	movs	r0, #15
 8002c64:	f000 f808 	bl	8002c78 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002c68:	f7ff fd96 	bl	8002798 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002c6c:	2300      	movs	r3, #0
}
 8002c6e:	4618      	mov	r0, r3
 8002c70:	bd80      	pop	{r7, pc}
 8002c72:	bf00      	nop
 8002c74:	40022000 	.word	0x40022000

08002c78 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	b082      	sub	sp, #8
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002c80:	4b12      	ldr	r3, [pc, #72]	; (8002ccc <HAL_InitTick+0x54>)
 8002c82:	681a      	ldr	r2, [r3, #0]
 8002c84:	4b12      	ldr	r3, [pc, #72]	; (8002cd0 <HAL_InitTick+0x58>)
 8002c86:	781b      	ldrb	r3, [r3, #0]
 8002c88:	4619      	mov	r1, r3
 8002c8a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002c8e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002c92:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c96:	4618      	mov	r0, r3
 8002c98:	f000 f935 	bl	8002f06 <HAL_SYSTICK_Config>
 8002c9c:	4603      	mov	r3, r0
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d001      	beq.n	8002ca6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002ca2:	2301      	movs	r3, #1
 8002ca4:	e00e      	b.n	8002cc4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	2b0f      	cmp	r3, #15
 8002caa:	d80a      	bhi.n	8002cc2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002cac:	2200      	movs	r2, #0
 8002cae:	6879      	ldr	r1, [r7, #4]
 8002cb0:	f04f 30ff 	mov.w	r0, #4294967295
 8002cb4:	f000 f90b 	bl	8002ece <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002cb8:	4a06      	ldr	r2, [pc, #24]	; (8002cd4 <HAL_InitTick+0x5c>)
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002cbe:	2300      	movs	r3, #0
 8002cc0:	e000      	b.n	8002cc4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002cc2:	2301      	movs	r3, #1
}
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	3708      	adds	r7, #8
 8002cc8:	46bd      	mov	sp, r7
 8002cca:	bd80      	pop	{r7, pc}
 8002ccc:	20000000 	.word	0x20000000
 8002cd0:	20000008 	.word	0x20000008
 8002cd4:	20000004 	.word	0x20000004

08002cd8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002cd8:	b480      	push	{r7}
 8002cda:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002cdc:	4b05      	ldr	r3, [pc, #20]	; (8002cf4 <HAL_IncTick+0x1c>)
 8002cde:	781b      	ldrb	r3, [r3, #0]
 8002ce0:	461a      	mov	r2, r3
 8002ce2:	4b05      	ldr	r3, [pc, #20]	; (8002cf8 <HAL_IncTick+0x20>)
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	4413      	add	r3, r2
 8002ce8:	4a03      	ldr	r2, [pc, #12]	; (8002cf8 <HAL_IncTick+0x20>)
 8002cea:	6013      	str	r3, [r2, #0]
}
 8002cec:	bf00      	nop
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	bc80      	pop	{r7}
 8002cf2:	4770      	bx	lr
 8002cf4:	20000008 	.word	0x20000008
 8002cf8:	2000037c 	.word	0x2000037c

08002cfc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002cfc:	b480      	push	{r7}
 8002cfe:	af00      	add	r7, sp, #0
  return uwTick;
 8002d00:	4b02      	ldr	r3, [pc, #8]	; (8002d0c <HAL_GetTick+0x10>)
 8002d02:	681b      	ldr	r3, [r3, #0]
}
 8002d04:	4618      	mov	r0, r3
 8002d06:	46bd      	mov	sp, r7
 8002d08:	bc80      	pop	{r7}
 8002d0a:	4770      	bx	lr
 8002d0c:	2000037c 	.word	0x2000037c

08002d10 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	b084      	sub	sp, #16
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002d18:	f7ff fff0 	bl	8002cfc <HAL_GetTick>
 8002d1c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d28:	d005      	beq.n	8002d36 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002d2a:	4b0a      	ldr	r3, [pc, #40]	; (8002d54 <HAL_Delay+0x44>)
 8002d2c:	781b      	ldrb	r3, [r3, #0]
 8002d2e:	461a      	mov	r2, r3
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	4413      	add	r3, r2
 8002d34:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002d36:	bf00      	nop
 8002d38:	f7ff ffe0 	bl	8002cfc <HAL_GetTick>
 8002d3c:	4602      	mov	r2, r0
 8002d3e:	68bb      	ldr	r3, [r7, #8]
 8002d40:	1ad3      	subs	r3, r2, r3
 8002d42:	68fa      	ldr	r2, [r7, #12]
 8002d44:	429a      	cmp	r2, r3
 8002d46:	d8f7      	bhi.n	8002d38 <HAL_Delay+0x28>
  {
  }
}
 8002d48:	bf00      	nop
 8002d4a:	bf00      	nop
 8002d4c:	3710      	adds	r7, #16
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	bd80      	pop	{r7, pc}
 8002d52:	bf00      	nop
 8002d54:	20000008 	.word	0x20000008

08002d58 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d58:	b480      	push	{r7}
 8002d5a:	b085      	sub	sp, #20
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	f003 0307 	and.w	r3, r3, #7
 8002d66:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002d68:	4b0c      	ldr	r3, [pc, #48]	; (8002d9c <__NVIC_SetPriorityGrouping+0x44>)
 8002d6a:	68db      	ldr	r3, [r3, #12]
 8002d6c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002d6e:	68ba      	ldr	r2, [r7, #8]
 8002d70:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002d74:	4013      	ands	r3, r2
 8002d76:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002d7c:	68bb      	ldr	r3, [r7, #8]
 8002d7e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002d80:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002d84:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d88:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002d8a:	4a04      	ldr	r2, [pc, #16]	; (8002d9c <__NVIC_SetPriorityGrouping+0x44>)
 8002d8c:	68bb      	ldr	r3, [r7, #8]
 8002d8e:	60d3      	str	r3, [r2, #12]
}
 8002d90:	bf00      	nop
 8002d92:	3714      	adds	r7, #20
 8002d94:	46bd      	mov	sp, r7
 8002d96:	bc80      	pop	{r7}
 8002d98:	4770      	bx	lr
 8002d9a:	bf00      	nop
 8002d9c:	e000ed00 	.word	0xe000ed00

08002da0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002da0:	b480      	push	{r7}
 8002da2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002da4:	4b04      	ldr	r3, [pc, #16]	; (8002db8 <__NVIC_GetPriorityGrouping+0x18>)
 8002da6:	68db      	ldr	r3, [r3, #12]
 8002da8:	0a1b      	lsrs	r3, r3, #8
 8002daa:	f003 0307 	and.w	r3, r3, #7
}
 8002dae:	4618      	mov	r0, r3
 8002db0:	46bd      	mov	sp, r7
 8002db2:	bc80      	pop	{r7}
 8002db4:	4770      	bx	lr
 8002db6:	bf00      	nop
 8002db8:	e000ed00 	.word	0xe000ed00

08002dbc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002dbc:	b480      	push	{r7}
 8002dbe:	b083      	sub	sp, #12
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	4603      	mov	r3, r0
 8002dc4:	6039      	str	r1, [r7, #0]
 8002dc6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002dc8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	db0a      	blt.n	8002de6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002dd0:	683b      	ldr	r3, [r7, #0]
 8002dd2:	b2da      	uxtb	r2, r3
 8002dd4:	490c      	ldr	r1, [pc, #48]	; (8002e08 <__NVIC_SetPriority+0x4c>)
 8002dd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dda:	0112      	lsls	r2, r2, #4
 8002ddc:	b2d2      	uxtb	r2, r2
 8002dde:	440b      	add	r3, r1
 8002de0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002de4:	e00a      	b.n	8002dfc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002de6:	683b      	ldr	r3, [r7, #0]
 8002de8:	b2da      	uxtb	r2, r3
 8002dea:	4908      	ldr	r1, [pc, #32]	; (8002e0c <__NVIC_SetPriority+0x50>)
 8002dec:	79fb      	ldrb	r3, [r7, #7]
 8002dee:	f003 030f 	and.w	r3, r3, #15
 8002df2:	3b04      	subs	r3, #4
 8002df4:	0112      	lsls	r2, r2, #4
 8002df6:	b2d2      	uxtb	r2, r2
 8002df8:	440b      	add	r3, r1
 8002dfa:	761a      	strb	r2, [r3, #24]
}
 8002dfc:	bf00      	nop
 8002dfe:	370c      	adds	r7, #12
 8002e00:	46bd      	mov	sp, r7
 8002e02:	bc80      	pop	{r7}
 8002e04:	4770      	bx	lr
 8002e06:	bf00      	nop
 8002e08:	e000e100 	.word	0xe000e100
 8002e0c:	e000ed00 	.word	0xe000ed00

08002e10 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002e10:	b480      	push	{r7}
 8002e12:	b089      	sub	sp, #36	; 0x24
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	60f8      	str	r0, [r7, #12]
 8002e18:	60b9      	str	r1, [r7, #8]
 8002e1a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	f003 0307 	and.w	r3, r3, #7
 8002e22:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002e24:	69fb      	ldr	r3, [r7, #28]
 8002e26:	f1c3 0307 	rsb	r3, r3, #7
 8002e2a:	2b04      	cmp	r3, #4
 8002e2c:	bf28      	it	cs
 8002e2e:	2304      	movcs	r3, #4
 8002e30:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002e32:	69fb      	ldr	r3, [r7, #28]
 8002e34:	3304      	adds	r3, #4
 8002e36:	2b06      	cmp	r3, #6
 8002e38:	d902      	bls.n	8002e40 <NVIC_EncodePriority+0x30>
 8002e3a:	69fb      	ldr	r3, [r7, #28]
 8002e3c:	3b03      	subs	r3, #3
 8002e3e:	e000      	b.n	8002e42 <NVIC_EncodePriority+0x32>
 8002e40:	2300      	movs	r3, #0
 8002e42:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e44:	f04f 32ff 	mov.w	r2, #4294967295
 8002e48:	69bb      	ldr	r3, [r7, #24]
 8002e4a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e4e:	43da      	mvns	r2, r3
 8002e50:	68bb      	ldr	r3, [r7, #8]
 8002e52:	401a      	ands	r2, r3
 8002e54:	697b      	ldr	r3, [r7, #20]
 8002e56:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002e58:	f04f 31ff 	mov.w	r1, #4294967295
 8002e5c:	697b      	ldr	r3, [r7, #20]
 8002e5e:	fa01 f303 	lsl.w	r3, r1, r3
 8002e62:	43d9      	mvns	r1, r3
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e68:	4313      	orrs	r3, r2
         );
}
 8002e6a:	4618      	mov	r0, r3
 8002e6c:	3724      	adds	r7, #36	; 0x24
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	bc80      	pop	{r7}
 8002e72:	4770      	bx	lr

08002e74 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002e74:	b580      	push	{r7, lr}
 8002e76:	b082      	sub	sp, #8
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	3b01      	subs	r3, #1
 8002e80:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002e84:	d301      	bcc.n	8002e8a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002e86:	2301      	movs	r3, #1
 8002e88:	e00f      	b.n	8002eaa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002e8a:	4a0a      	ldr	r2, [pc, #40]	; (8002eb4 <SysTick_Config+0x40>)
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	3b01      	subs	r3, #1
 8002e90:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002e92:	210f      	movs	r1, #15
 8002e94:	f04f 30ff 	mov.w	r0, #4294967295
 8002e98:	f7ff ff90 	bl	8002dbc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002e9c:	4b05      	ldr	r3, [pc, #20]	; (8002eb4 <SysTick_Config+0x40>)
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002ea2:	4b04      	ldr	r3, [pc, #16]	; (8002eb4 <SysTick_Config+0x40>)
 8002ea4:	2207      	movs	r2, #7
 8002ea6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002ea8:	2300      	movs	r3, #0
}
 8002eaa:	4618      	mov	r0, r3
 8002eac:	3708      	adds	r7, #8
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	bd80      	pop	{r7, pc}
 8002eb2:	bf00      	nop
 8002eb4:	e000e010 	.word	0xe000e010

08002eb8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002eb8:	b580      	push	{r7, lr}
 8002eba:	b082      	sub	sp, #8
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002ec0:	6878      	ldr	r0, [r7, #4]
 8002ec2:	f7ff ff49 	bl	8002d58 <__NVIC_SetPriorityGrouping>
}
 8002ec6:	bf00      	nop
 8002ec8:	3708      	adds	r7, #8
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	bd80      	pop	{r7, pc}

08002ece <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002ece:	b580      	push	{r7, lr}
 8002ed0:	b086      	sub	sp, #24
 8002ed2:	af00      	add	r7, sp, #0
 8002ed4:	4603      	mov	r3, r0
 8002ed6:	60b9      	str	r1, [r7, #8]
 8002ed8:	607a      	str	r2, [r7, #4]
 8002eda:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002edc:	2300      	movs	r3, #0
 8002ede:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002ee0:	f7ff ff5e 	bl	8002da0 <__NVIC_GetPriorityGrouping>
 8002ee4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002ee6:	687a      	ldr	r2, [r7, #4]
 8002ee8:	68b9      	ldr	r1, [r7, #8]
 8002eea:	6978      	ldr	r0, [r7, #20]
 8002eec:	f7ff ff90 	bl	8002e10 <NVIC_EncodePriority>
 8002ef0:	4602      	mov	r2, r0
 8002ef2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ef6:	4611      	mov	r1, r2
 8002ef8:	4618      	mov	r0, r3
 8002efa:	f7ff ff5f 	bl	8002dbc <__NVIC_SetPriority>
}
 8002efe:	bf00      	nop
 8002f00:	3718      	adds	r7, #24
 8002f02:	46bd      	mov	sp, r7
 8002f04:	bd80      	pop	{r7, pc}

08002f06 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002f06:	b580      	push	{r7, lr}
 8002f08:	b082      	sub	sp, #8
 8002f0a:	af00      	add	r7, sp, #0
 8002f0c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002f0e:	6878      	ldr	r0, [r7, #4]
 8002f10:	f7ff ffb0 	bl	8002e74 <SysTick_Config>
 8002f14:	4603      	mov	r3, r0
}
 8002f16:	4618      	mov	r0, r3
 8002f18:	3708      	adds	r7, #8
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	bd80      	pop	{r7, pc}
	...

08002f20 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002f20:	b480      	push	{r7}
 8002f22:	b08b      	sub	sp, #44	; 0x2c
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	6078      	str	r0, [r7, #4]
 8002f28:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002f2a:	2300      	movs	r3, #0
 8002f2c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002f2e:	2300      	movs	r3, #0
 8002f30:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002f32:	e169      	b.n	8003208 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002f34:	2201      	movs	r2, #1
 8002f36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f38:	fa02 f303 	lsl.w	r3, r2, r3
 8002f3c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002f3e:	683b      	ldr	r3, [r7, #0]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	69fa      	ldr	r2, [r7, #28]
 8002f44:	4013      	ands	r3, r2
 8002f46:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002f48:	69ba      	ldr	r2, [r7, #24]
 8002f4a:	69fb      	ldr	r3, [r7, #28]
 8002f4c:	429a      	cmp	r2, r3
 8002f4e:	f040 8158 	bne.w	8003202 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002f52:	683b      	ldr	r3, [r7, #0]
 8002f54:	685b      	ldr	r3, [r3, #4]
 8002f56:	4a9a      	ldr	r2, [pc, #616]	; (80031c0 <HAL_GPIO_Init+0x2a0>)
 8002f58:	4293      	cmp	r3, r2
 8002f5a:	d05e      	beq.n	800301a <HAL_GPIO_Init+0xfa>
 8002f5c:	4a98      	ldr	r2, [pc, #608]	; (80031c0 <HAL_GPIO_Init+0x2a0>)
 8002f5e:	4293      	cmp	r3, r2
 8002f60:	d875      	bhi.n	800304e <HAL_GPIO_Init+0x12e>
 8002f62:	4a98      	ldr	r2, [pc, #608]	; (80031c4 <HAL_GPIO_Init+0x2a4>)
 8002f64:	4293      	cmp	r3, r2
 8002f66:	d058      	beq.n	800301a <HAL_GPIO_Init+0xfa>
 8002f68:	4a96      	ldr	r2, [pc, #600]	; (80031c4 <HAL_GPIO_Init+0x2a4>)
 8002f6a:	4293      	cmp	r3, r2
 8002f6c:	d86f      	bhi.n	800304e <HAL_GPIO_Init+0x12e>
 8002f6e:	4a96      	ldr	r2, [pc, #600]	; (80031c8 <HAL_GPIO_Init+0x2a8>)
 8002f70:	4293      	cmp	r3, r2
 8002f72:	d052      	beq.n	800301a <HAL_GPIO_Init+0xfa>
 8002f74:	4a94      	ldr	r2, [pc, #592]	; (80031c8 <HAL_GPIO_Init+0x2a8>)
 8002f76:	4293      	cmp	r3, r2
 8002f78:	d869      	bhi.n	800304e <HAL_GPIO_Init+0x12e>
 8002f7a:	4a94      	ldr	r2, [pc, #592]	; (80031cc <HAL_GPIO_Init+0x2ac>)
 8002f7c:	4293      	cmp	r3, r2
 8002f7e:	d04c      	beq.n	800301a <HAL_GPIO_Init+0xfa>
 8002f80:	4a92      	ldr	r2, [pc, #584]	; (80031cc <HAL_GPIO_Init+0x2ac>)
 8002f82:	4293      	cmp	r3, r2
 8002f84:	d863      	bhi.n	800304e <HAL_GPIO_Init+0x12e>
 8002f86:	4a92      	ldr	r2, [pc, #584]	; (80031d0 <HAL_GPIO_Init+0x2b0>)
 8002f88:	4293      	cmp	r3, r2
 8002f8a:	d046      	beq.n	800301a <HAL_GPIO_Init+0xfa>
 8002f8c:	4a90      	ldr	r2, [pc, #576]	; (80031d0 <HAL_GPIO_Init+0x2b0>)
 8002f8e:	4293      	cmp	r3, r2
 8002f90:	d85d      	bhi.n	800304e <HAL_GPIO_Init+0x12e>
 8002f92:	2b12      	cmp	r3, #18
 8002f94:	d82a      	bhi.n	8002fec <HAL_GPIO_Init+0xcc>
 8002f96:	2b12      	cmp	r3, #18
 8002f98:	d859      	bhi.n	800304e <HAL_GPIO_Init+0x12e>
 8002f9a:	a201      	add	r2, pc, #4	; (adr r2, 8002fa0 <HAL_GPIO_Init+0x80>)
 8002f9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fa0:	0800301b 	.word	0x0800301b
 8002fa4:	08002ff5 	.word	0x08002ff5
 8002fa8:	08003007 	.word	0x08003007
 8002fac:	08003049 	.word	0x08003049
 8002fb0:	0800304f 	.word	0x0800304f
 8002fb4:	0800304f 	.word	0x0800304f
 8002fb8:	0800304f 	.word	0x0800304f
 8002fbc:	0800304f 	.word	0x0800304f
 8002fc0:	0800304f 	.word	0x0800304f
 8002fc4:	0800304f 	.word	0x0800304f
 8002fc8:	0800304f 	.word	0x0800304f
 8002fcc:	0800304f 	.word	0x0800304f
 8002fd0:	0800304f 	.word	0x0800304f
 8002fd4:	0800304f 	.word	0x0800304f
 8002fd8:	0800304f 	.word	0x0800304f
 8002fdc:	0800304f 	.word	0x0800304f
 8002fe0:	0800304f 	.word	0x0800304f
 8002fe4:	08002ffd 	.word	0x08002ffd
 8002fe8:	08003011 	.word	0x08003011
 8002fec:	4a79      	ldr	r2, [pc, #484]	; (80031d4 <HAL_GPIO_Init+0x2b4>)
 8002fee:	4293      	cmp	r3, r2
 8002ff0:	d013      	beq.n	800301a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002ff2:	e02c      	b.n	800304e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002ff4:	683b      	ldr	r3, [r7, #0]
 8002ff6:	68db      	ldr	r3, [r3, #12]
 8002ff8:	623b      	str	r3, [r7, #32]
          break;
 8002ffa:	e029      	b.n	8003050 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002ffc:	683b      	ldr	r3, [r7, #0]
 8002ffe:	68db      	ldr	r3, [r3, #12]
 8003000:	3304      	adds	r3, #4
 8003002:	623b      	str	r3, [r7, #32]
          break;
 8003004:	e024      	b.n	8003050 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003006:	683b      	ldr	r3, [r7, #0]
 8003008:	68db      	ldr	r3, [r3, #12]
 800300a:	3308      	adds	r3, #8
 800300c:	623b      	str	r3, [r7, #32]
          break;
 800300e:	e01f      	b.n	8003050 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003010:	683b      	ldr	r3, [r7, #0]
 8003012:	68db      	ldr	r3, [r3, #12]
 8003014:	330c      	adds	r3, #12
 8003016:	623b      	str	r3, [r7, #32]
          break;
 8003018:	e01a      	b.n	8003050 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800301a:	683b      	ldr	r3, [r7, #0]
 800301c:	689b      	ldr	r3, [r3, #8]
 800301e:	2b00      	cmp	r3, #0
 8003020:	d102      	bne.n	8003028 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003022:	2304      	movs	r3, #4
 8003024:	623b      	str	r3, [r7, #32]
          break;
 8003026:	e013      	b.n	8003050 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003028:	683b      	ldr	r3, [r7, #0]
 800302a:	689b      	ldr	r3, [r3, #8]
 800302c:	2b01      	cmp	r3, #1
 800302e:	d105      	bne.n	800303c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003030:	2308      	movs	r3, #8
 8003032:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	69fa      	ldr	r2, [r7, #28]
 8003038:	611a      	str	r2, [r3, #16]
          break;
 800303a:	e009      	b.n	8003050 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800303c:	2308      	movs	r3, #8
 800303e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	69fa      	ldr	r2, [r7, #28]
 8003044:	615a      	str	r2, [r3, #20]
          break;
 8003046:	e003      	b.n	8003050 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003048:	2300      	movs	r3, #0
 800304a:	623b      	str	r3, [r7, #32]
          break;
 800304c:	e000      	b.n	8003050 <HAL_GPIO_Init+0x130>
          break;
 800304e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003050:	69bb      	ldr	r3, [r7, #24]
 8003052:	2bff      	cmp	r3, #255	; 0xff
 8003054:	d801      	bhi.n	800305a <HAL_GPIO_Init+0x13a>
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	e001      	b.n	800305e <HAL_GPIO_Init+0x13e>
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	3304      	adds	r3, #4
 800305e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003060:	69bb      	ldr	r3, [r7, #24]
 8003062:	2bff      	cmp	r3, #255	; 0xff
 8003064:	d802      	bhi.n	800306c <HAL_GPIO_Init+0x14c>
 8003066:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003068:	009b      	lsls	r3, r3, #2
 800306a:	e002      	b.n	8003072 <HAL_GPIO_Init+0x152>
 800306c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800306e:	3b08      	subs	r3, #8
 8003070:	009b      	lsls	r3, r3, #2
 8003072:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003074:	697b      	ldr	r3, [r7, #20]
 8003076:	681a      	ldr	r2, [r3, #0]
 8003078:	210f      	movs	r1, #15
 800307a:	693b      	ldr	r3, [r7, #16]
 800307c:	fa01 f303 	lsl.w	r3, r1, r3
 8003080:	43db      	mvns	r3, r3
 8003082:	401a      	ands	r2, r3
 8003084:	6a39      	ldr	r1, [r7, #32]
 8003086:	693b      	ldr	r3, [r7, #16]
 8003088:	fa01 f303 	lsl.w	r3, r1, r3
 800308c:	431a      	orrs	r2, r3
 800308e:	697b      	ldr	r3, [r7, #20]
 8003090:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003092:	683b      	ldr	r3, [r7, #0]
 8003094:	685b      	ldr	r3, [r3, #4]
 8003096:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800309a:	2b00      	cmp	r3, #0
 800309c:	f000 80b1 	beq.w	8003202 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80030a0:	4b4d      	ldr	r3, [pc, #308]	; (80031d8 <HAL_GPIO_Init+0x2b8>)
 80030a2:	699b      	ldr	r3, [r3, #24]
 80030a4:	4a4c      	ldr	r2, [pc, #304]	; (80031d8 <HAL_GPIO_Init+0x2b8>)
 80030a6:	f043 0301 	orr.w	r3, r3, #1
 80030aa:	6193      	str	r3, [r2, #24]
 80030ac:	4b4a      	ldr	r3, [pc, #296]	; (80031d8 <HAL_GPIO_Init+0x2b8>)
 80030ae:	699b      	ldr	r3, [r3, #24]
 80030b0:	f003 0301 	and.w	r3, r3, #1
 80030b4:	60bb      	str	r3, [r7, #8]
 80030b6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80030b8:	4a48      	ldr	r2, [pc, #288]	; (80031dc <HAL_GPIO_Init+0x2bc>)
 80030ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030bc:	089b      	lsrs	r3, r3, #2
 80030be:	3302      	adds	r3, #2
 80030c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80030c4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80030c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030c8:	f003 0303 	and.w	r3, r3, #3
 80030cc:	009b      	lsls	r3, r3, #2
 80030ce:	220f      	movs	r2, #15
 80030d0:	fa02 f303 	lsl.w	r3, r2, r3
 80030d4:	43db      	mvns	r3, r3
 80030d6:	68fa      	ldr	r2, [r7, #12]
 80030d8:	4013      	ands	r3, r2
 80030da:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	4a40      	ldr	r2, [pc, #256]	; (80031e0 <HAL_GPIO_Init+0x2c0>)
 80030e0:	4293      	cmp	r3, r2
 80030e2:	d013      	beq.n	800310c <HAL_GPIO_Init+0x1ec>
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	4a3f      	ldr	r2, [pc, #252]	; (80031e4 <HAL_GPIO_Init+0x2c4>)
 80030e8:	4293      	cmp	r3, r2
 80030ea:	d00d      	beq.n	8003108 <HAL_GPIO_Init+0x1e8>
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	4a3e      	ldr	r2, [pc, #248]	; (80031e8 <HAL_GPIO_Init+0x2c8>)
 80030f0:	4293      	cmp	r3, r2
 80030f2:	d007      	beq.n	8003104 <HAL_GPIO_Init+0x1e4>
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	4a3d      	ldr	r2, [pc, #244]	; (80031ec <HAL_GPIO_Init+0x2cc>)
 80030f8:	4293      	cmp	r3, r2
 80030fa:	d101      	bne.n	8003100 <HAL_GPIO_Init+0x1e0>
 80030fc:	2303      	movs	r3, #3
 80030fe:	e006      	b.n	800310e <HAL_GPIO_Init+0x1ee>
 8003100:	2304      	movs	r3, #4
 8003102:	e004      	b.n	800310e <HAL_GPIO_Init+0x1ee>
 8003104:	2302      	movs	r3, #2
 8003106:	e002      	b.n	800310e <HAL_GPIO_Init+0x1ee>
 8003108:	2301      	movs	r3, #1
 800310a:	e000      	b.n	800310e <HAL_GPIO_Init+0x1ee>
 800310c:	2300      	movs	r3, #0
 800310e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003110:	f002 0203 	and.w	r2, r2, #3
 8003114:	0092      	lsls	r2, r2, #2
 8003116:	4093      	lsls	r3, r2
 8003118:	68fa      	ldr	r2, [r7, #12]
 800311a:	4313      	orrs	r3, r2
 800311c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800311e:	492f      	ldr	r1, [pc, #188]	; (80031dc <HAL_GPIO_Init+0x2bc>)
 8003120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003122:	089b      	lsrs	r3, r3, #2
 8003124:	3302      	adds	r3, #2
 8003126:	68fa      	ldr	r2, [r7, #12]
 8003128:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800312c:	683b      	ldr	r3, [r7, #0]
 800312e:	685b      	ldr	r3, [r3, #4]
 8003130:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003134:	2b00      	cmp	r3, #0
 8003136:	d006      	beq.n	8003146 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003138:	4b2d      	ldr	r3, [pc, #180]	; (80031f0 <HAL_GPIO_Init+0x2d0>)
 800313a:	681a      	ldr	r2, [r3, #0]
 800313c:	492c      	ldr	r1, [pc, #176]	; (80031f0 <HAL_GPIO_Init+0x2d0>)
 800313e:	69bb      	ldr	r3, [r7, #24]
 8003140:	4313      	orrs	r3, r2
 8003142:	600b      	str	r3, [r1, #0]
 8003144:	e006      	b.n	8003154 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003146:	4b2a      	ldr	r3, [pc, #168]	; (80031f0 <HAL_GPIO_Init+0x2d0>)
 8003148:	681a      	ldr	r2, [r3, #0]
 800314a:	69bb      	ldr	r3, [r7, #24]
 800314c:	43db      	mvns	r3, r3
 800314e:	4928      	ldr	r1, [pc, #160]	; (80031f0 <HAL_GPIO_Init+0x2d0>)
 8003150:	4013      	ands	r3, r2
 8003152:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003154:	683b      	ldr	r3, [r7, #0]
 8003156:	685b      	ldr	r3, [r3, #4]
 8003158:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800315c:	2b00      	cmp	r3, #0
 800315e:	d006      	beq.n	800316e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003160:	4b23      	ldr	r3, [pc, #140]	; (80031f0 <HAL_GPIO_Init+0x2d0>)
 8003162:	685a      	ldr	r2, [r3, #4]
 8003164:	4922      	ldr	r1, [pc, #136]	; (80031f0 <HAL_GPIO_Init+0x2d0>)
 8003166:	69bb      	ldr	r3, [r7, #24]
 8003168:	4313      	orrs	r3, r2
 800316a:	604b      	str	r3, [r1, #4]
 800316c:	e006      	b.n	800317c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800316e:	4b20      	ldr	r3, [pc, #128]	; (80031f0 <HAL_GPIO_Init+0x2d0>)
 8003170:	685a      	ldr	r2, [r3, #4]
 8003172:	69bb      	ldr	r3, [r7, #24]
 8003174:	43db      	mvns	r3, r3
 8003176:	491e      	ldr	r1, [pc, #120]	; (80031f0 <HAL_GPIO_Init+0x2d0>)
 8003178:	4013      	ands	r3, r2
 800317a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800317c:	683b      	ldr	r3, [r7, #0]
 800317e:	685b      	ldr	r3, [r3, #4]
 8003180:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003184:	2b00      	cmp	r3, #0
 8003186:	d006      	beq.n	8003196 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003188:	4b19      	ldr	r3, [pc, #100]	; (80031f0 <HAL_GPIO_Init+0x2d0>)
 800318a:	689a      	ldr	r2, [r3, #8]
 800318c:	4918      	ldr	r1, [pc, #96]	; (80031f0 <HAL_GPIO_Init+0x2d0>)
 800318e:	69bb      	ldr	r3, [r7, #24]
 8003190:	4313      	orrs	r3, r2
 8003192:	608b      	str	r3, [r1, #8]
 8003194:	e006      	b.n	80031a4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003196:	4b16      	ldr	r3, [pc, #88]	; (80031f0 <HAL_GPIO_Init+0x2d0>)
 8003198:	689a      	ldr	r2, [r3, #8]
 800319a:	69bb      	ldr	r3, [r7, #24]
 800319c:	43db      	mvns	r3, r3
 800319e:	4914      	ldr	r1, [pc, #80]	; (80031f0 <HAL_GPIO_Init+0x2d0>)
 80031a0:	4013      	ands	r3, r2
 80031a2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80031a4:	683b      	ldr	r3, [r7, #0]
 80031a6:	685b      	ldr	r3, [r3, #4]
 80031a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d021      	beq.n	80031f4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80031b0:	4b0f      	ldr	r3, [pc, #60]	; (80031f0 <HAL_GPIO_Init+0x2d0>)
 80031b2:	68da      	ldr	r2, [r3, #12]
 80031b4:	490e      	ldr	r1, [pc, #56]	; (80031f0 <HAL_GPIO_Init+0x2d0>)
 80031b6:	69bb      	ldr	r3, [r7, #24]
 80031b8:	4313      	orrs	r3, r2
 80031ba:	60cb      	str	r3, [r1, #12]
 80031bc:	e021      	b.n	8003202 <HAL_GPIO_Init+0x2e2>
 80031be:	bf00      	nop
 80031c0:	10320000 	.word	0x10320000
 80031c4:	10310000 	.word	0x10310000
 80031c8:	10220000 	.word	0x10220000
 80031cc:	10210000 	.word	0x10210000
 80031d0:	10120000 	.word	0x10120000
 80031d4:	10110000 	.word	0x10110000
 80031d8:	40021000 	.word	0x40021000
 80031dc:	40010000 	.word	0x40010000
 80031e0:	40010800 	.word	0x40010800
 80031e4:	40010c00 	.word	0x40010c00
 80031e8:	40011000 	.word	0x40011000
 80031ec:	40011400 	.word	0x40011400
 80031f0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80031f4:	4b0b      	ldr	r3, [pc, #44]	; (8003224 <HAL_GPIO_Init+0x304>)
 80031f6:	68da      	ldr	r2, [r3, #12]
 80031f8:	69bb      	ldr	r3, [r7, #24]
 80031fa:	43db      	mvns	r3, r3
 80031fc:	4909      	ldr	r1, [pc, #36]	; (8003224 <HAL_GPIO_Init+0x304>)
 80031fe:	4013      	ands	r3, r2
 8003200:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8003202:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003204:	3301      	adds	r3, #1
 8003206:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003208:	683b      	ldr	r3, [r7, #0]
 800320a:	681a      	ldr	r2, [r3, #0]
 800320c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800320e:	fa22 f303 	lsr.w	r3, r2, r3
 8003212:	2b00      	cmp	r3, #0
 8003214:	f47f ae8e 	bne.w	8002f34 <HAL_GPIO_Init+0x14>
  }
}
 8003218:	bf00      	nop
 800321a:	bf00      	nop
 800321c:	372c      	adds	r7, #44	; 0x2c
 800321e:	46bd      	mov	sp, r7
 8003220:	bc80      	pop	{r7}
 8003222:	4770      	bx	lr
 8003224:	40010400 	.word	0x40010400

08003228 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003228:	b480      	push	{r7}
 800322a:	b083      	sub	sp, #12
 800322c:	af00      	add	r7, sp, #0
 800322e:	6078      	str	r0, [r7, #4]
 8003230:	460b      	mov	r3, r1
 8003232:	807b      	strh	r3, [r7, #2]
 8003234:	4613      	mov	r3, r2
 8003236:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003238:	787b      	ldrb	r3, [r7, #1]
 800323a:	2b00      	cmp	r3, #0
 800323c:	d003      	beq.n	8003246 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800323e:	887a      	ldrh	r2, [r7, #2]
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003244:	e003      	b.n	800324e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003246:	887b      	ldrh	r3, [r7, #2]
 8003248:	041a      	lsls	r2, r3, #16
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	611a      	str	r2, [r3, #16]
}
 800324e:	bf00      	nop
 8003250:	370c      	adds	r7, #12
 8003252:	46bd      	mov	sp, r7
 8003254:	bc80      	pop	{r7}
 8003256:	4770      	bx	lr

08003258 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003258:	b580      	push	{r7, lr}
 800325a:	b084      	sub	sp, #16
 800325c:	af00      	add	r7, sp, #0
 800325e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	2b00      	cmp	r3, #0
 8003264:	d101      	bne.n	800326a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003266:	2301      	movs	r3, #1
 8003268:	e12b      	b.n	80034c2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003270:	b2db      	uxtb	r3, r3
 8003272:	2b00      	cmp	r3, #0
 8003274:	d106      	bne.n	8003284 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	2200      	movs	r2, #0
 800327a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800327e:	6878      	ldr	r0, [r7, #4]
 8003280:	f7ff faac 	bl	80027dc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	2224      	movs	r2, #36	; 0x24
 8003288:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	681a      	ldr	r2, [r3, #0]
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f022 0201 	bic.w	r2, r2, #1
 800329a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	681a      	ldr	r2, [r3, #0]
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80032aa:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	681a      	ldr	r2, [r3, #0]
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80032ba:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80032bc:	f002 f84e 	bl	800535c <HAL_RCC_GetPCLK1Freq>
 80032c0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	685b      	ldr	r3, [r3, #4]
 80032c6:	4a81      	ldr	r2, [pc, #516]	; (80034cc <HAL_I2C_Init+0x274>)
 80032c8:	4293      	cmp	r3, r2
 80032ca:	d807      	bhi.n	80032dc <HAL_I2C_Init+0x84>
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	4a80      	ldr	r2, [pc, #512]	; (80034d0 <HAL_I2C_Init+0x278>)
 80032d0:	4293      	cmp	r3, r2
 80032d2:	bf94      	ite	ls
 80032d4:	2301      	movls	r3, #1
 80032d6:	2300      	movhi	r3, #0
 80032d8:	b2db      	uxtb	r3, r3
 80032da:	e006      	b.n	80032ea <HAL_I2C_Init+0x92>
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	4a7d      	ldr	r2, [pc, #500]	; (80034d4 <HAL_I2C_Init+0x27c>)
 80032e0:	4293      	cmp	r3, r2
 80032e2:	bf94      	ite	ls
 80032e4:	2301      	movls	r3, #1
 80032e6:	2300      	movhi	r3, #0
 80032e8:	b2db      	uxtb	r3, r3
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d001      	beq.n	80032f2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80032ee:	2301      	movs	r3, #1
 80032f0:	e0e7      	b.n	80034c2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	4a78      	ldr	r2, [pc, #480]	; (80034d8 <HAL_I2C_Init+0x280>)
 80032f6:	fba2 2303 	umull	r2, r3, r2, r3
 80032fa:	0c9b      	lsrs	r3, r3, #18
 80032fc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	685b      	ldr	r3, [r3, #4]
 8003304:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	68ba      	ldr	r2, [r7, #8]
 800330e:	430a      	orrs	r2, r1
 8003310:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	6a1b      	ldr	r3, [r3, #32]
 8003318:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	685b      	ldr	r3, [r3, #4]
 8003320:	4a6a      	ldr	r2, [pc, #424]	; (80034cc <HAL_I2C_Init+0x274>)
 8003322:	4293      	cmp	r3, r2
 8003324:	d802      	bhi.n	800332c <HAL_I2C_Init+0xd4>
 8003326:	68bb      	ldr	r3, [r7, #8]
 8003328:	3301      	adds	r3, #1
 800332a:	e009      	b.n	8003340 <HAL_I2C_Init+0xe8>
 800332c:	68bb      	ldr	r3, [r7, #8]
 800332e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003332:	fb02 f303 	mul.w	r3, r2, r3
 8003336:	4a69      	ldr	r2, [pc, #420]	; (80034dc <HAL_I2C_Init+0x284>)
 8003338:	fba2 2303 	umull	r2, r3, r2, r3
 800333c:	099b      	lsrs	r3, r3, #6
 800333e:	3301      	adds	r3, #1
 8003340:	687a      	ldr	r2, [r7, #4]
 8003342:	6812      	ldr	r2, [r2, #0]
 8003344:	430b      	orrs	r3, r1
 8003346:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	69db      	ldr	r3, [r3, #28]
 800334e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003352:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	685b      	ldr	r3, [r3, #4]
 800335a:	495c      	ldr	r1, [pc, #368]	; (80034cc <HAL_I2C_Init+0x274>)
 800335c:	428b      	cmp	r3, r1
 800335e:	d819      	bhi.n	8003394 <HAL_I2C_Init+0x13c>
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	1e59      	subs	r1, r3, #1
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	685b      	ldr	r3, [r3, #4]
 8003368:	005b      	lsls	r3, r3, #1
 800336a:	fbb1 f3f3 	udiv	r3, r1, r3
 800336e:	1c59      	adds	r1, r3, #1
 8003370:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003374:	400b      	ands	r3, r1
 8003376:	2b00      	cmp	r3, #0
 8003378:	d00a      	beq.n	8003390 <HAL_I2C_Init+0x138>
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	1e59      	subs	r1, r3, #1
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	685b      	ldr	r3, [r3, #4]
 8003382:	005b      	lsls	r3, r3, #1
 8003384:	fbb1 f3f3 	udiv	r3, r1, r3
 8003388:	3301      	adds	r3, #1
 800338a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800338e:	e051      	b.n	8003434 <HAL_I2C_Init+0x1dc>
 8003390:	2304      	movs	r3, #4
 8003392:	e04f      	b.n	8003434 <HAL_I2C_Init+0x1dc>
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	689b      	ldr	r3, [r3, #8]
 8003398:	2b00      	cmp	r3, #0
 800339a:	d111      	bne.n	80033c0 <HAL_I2C_Init+0x168>
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	1e58      	subs	r0, r3, #1
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	6859      	ldr	r1, [r3, #4]
 80033a4:	460b      	mov	r3, r1
 80033a6:	005b      	lsls	r3, r3, #1
 80033a8:	440b      	add	r3, r1
 80033aa:	fbb0 f3f3 	udiv	r3, r0, r3
 80033ae:	3301      	adds	r3, #1
 80033b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	bf0c      	ite	eq
 80033b8:	2301      	moveq	r3, #1
 80033ba:	2300      	movne	r3, #0
 80033bc:	b2db      	uxtb	r3, r3
 80033be:	e012      	b.n	80033e6 <HAL_I2C_Init+0x18e>
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	1e58      	subs	r0, r3, #1
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	6859      	ldr	r1, [r3, #4]
 80033c8:	460b      	mov	r3, r1
 80033ca:	009b      	lsls	r3, r3, #2
 80033cc:	440b      	add	r3, r1
 80033ce:	0099      	lsls	r1, r3, #2
 80033d0:	440b      	add	r3, r1
 80033d2:	fbb0 f3f3 	udiv	r3, r0, r3
 80033d6:	3301      	adds	r3, #1
 80033d8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80033dc:	2b00      	cmp	r3, #0
 80033de:	bf0c      	ite	eq
 80033e0:	2301      	moveq	r3, #1
 80033e2:	2300      	movne	r3, #0
 80033e4:	b2db      	uxtb	r3, r3
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d001      	beq.n	80033ee <HAL_I2C_Init+0x196>
 80033ea:	2301      	movs	r3, #1
 80033ec:	e022      	b.n	8003434 <HAL_I2C_Init+0x1dc>
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	689b      	ldr	r3, [r3, #8]
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d10e      	bne.n	8003414 <HAL_I2C_Init+0x1bc>
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	1e58      	subs	r0, r3, #1
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	6859      	ldr	r1, [r3, #4]
 80033fe:	460b      	mov	r3, r1
 8003400:	005b      	lsls	r3, r3, #1
 8003402:	440b      	add	r3, r1
 8003404:	fbb0 f3f3 	udiv	r3, r0, r3
 8003408:	3301      	adds	r3, #1
 800340a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800340e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003412:	e00f      	b.n	8003434 <HAL_I2C_Init+0x1dc>
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	1e58      	subs	r0, r3, #1
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	6859      	ldr	r1, [r3, #4]
 800341c:	460b      	mov	r3, r1
 800341e:	009b      	lsls	r3, r3, #2
 8003420:	440b      	add	r3, r1
 8003422:	0099      	lsls	r1, r3, #2
 8003424:	440b      	add	r3, r1
 8003426:	fbb0 f3f3 	udiv	r3, r0, r3
 800342a:	3301      	adds	r3, #1
 800342c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003430:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003434:	6879      	ldr	r1, [r7, #4]
 8003436:	6809      	ldr	r1, [r1, #0]
 8003438:	4313      	orrs	r3, r2
 800343a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	69da      	ldr	r2, [r3, #28]
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	6a1b      	ldr	r3, [r3, #32]
 800344e:	431a      	orrs	r2, r3
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	430a      	orrs	r2, r1
 8003456:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	689b      	ldr	r3, [r3, #8]
 800345e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003462:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003466:	687a      	ldr	r2, [r7, #4]
 8003468:	6911      	ldr	r1, [r2, #16]
 800346a:	687a      	ldr	r2, [r7, #4]
 800346c:	68d2      	ldr	r2, [r2, #12]
 800346e:	4311      	orrs	r1, r2
 8003470:	687a      	ldr	r2, [r7, #4]
 8003472:	6812      	ldr	r2, [r2, #0]
 8003474:	430b      	orrs	r3, r1
 8003476:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	68db      	ldr	r3, [r3, #12]
 800347e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	695a      	ldr	r2, [r3, #20]
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	699b      	ldr	r3, [r3, #24]
 800348a:	431a      	orrs	r2, r3
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	430a      	orrs	r2, r1
 8003492:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	681a      	ldr	r2, [r3, #0]
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f042 0201 	orr.w	r2, r2, #1
 80034a2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	2200      	movs	r2, #0
 80034a8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	2220      	movs	r2, #32
 80034ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	2200      	movs	r2, #0
 80034b6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	2200      	movs	r2, #0
 80034bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80034c0:	2300      	movs	r3, #0
}
 80034c2:	4618      	mov	r0, r3
 80034c4:	3710      	adds	r7, #16
 80034c6:	46bd      	mov	sp, r7
 80034c8:	bd80      	pop	{r7, pc}
 80034ca:	bf00      	nop
 80034cc:	000186a0 	.word	0x000186a0
 80034d0:	001e847f 	.word	0x001e847f
 80034d4:	003d08ff 	.word	0x003d08ff
 80034d8:	431bde83 	.word	0x431bde83
 80034dc:	10624dd3 	.word	0x10624dd3

080034e0 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80034e0:	b580      	push	{r7, lr}
 80034e2:	b088      	sub	sp, #32
 80034e4:	af02      	add	r7, sp, #8
 80034e6:	60f8      	str	r0, [r7, #12]
 80034e8:	607a      	str	r2, [r7, #4]
 80034ea:	461a      	mov	r2, r3
 80034ec:	460b      	mov	r3, r1
 80034ee:	817b      	strh	r3, [r7, #10]
 80034f0:	4613      	mov	r3, r2
 80034f2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80034f4:	f7ff fc02 	bl	8002cfc <HAL_GetTick>
 80034f8:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003500:	b2db      	uxtb	r3, r3
 8003502:	2b20      	cmp	r3, #32
 8003504:	f040 80e0 	bne.w	80036c8 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003508:	697b      	ldr	r3, [r7, #20]
 800350a:	9300      	str	r3, [sp, #0]
 800350c:	2319      	movs	r3, #25
 800350e:	2201      	movs	r2, #1
 8003510:	4970      	ldr	r1, [pc, #448]	; (80036d4 <HAL_I2C_Master_Transmit+0x1f4>)
 8003512:	68f8      	ldr	r0, [r7, #12]
 8003514:	f001 f972 	bl	80047fc <I2C_WaitOnFlagUntilTimeout>
 8003518:	4603      	mov	r3, r0
 800351a:	2b00      	cmp	r3, #0
 800351c:	d001      	beq.n	8003522 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800351e:	2302      	movs	r3, #2
 8003520:	e0d3      	b.n	80036ca <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003528:	2b01      	cmp	r3, #1
 800352a:	d101      	bne.n	8003530 <HAL_I2C_Master_Transmit+0x50>
 800352c:	2302      	movs	r3, #2
 800352e:	e0cc      	b.n	80036ca <HAL_I2C_Master_Transmit+0x1ea>
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	2201      	movs	r2, #1
 8003534:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f003 0301 	and.w	r3, r3, #1
 8003542:	2b01      	cmp	r3, #1
 8003544:	d007      	beq.n	8003556 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	681a      	ldr	r2, [r3, #0]
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f042 0201 	orr.w	r2, r2, #1
 8003554:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	681a      	ldr	r2, [r3, #0]
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003564:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	2221      	movs	r2, #33	; 0x21
 800356a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	2210      	movs	r2, #16
 8003572:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	2200      	movs	r2, #0
 800357a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	687a      	ldr	r2, [r7, #4]
 8003580:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	893a      	ldrh	r2, [r7, #8]
 8003586:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800358c:	b29a      	uxth	r2, r3
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	4a50      	ldr	r2, [pc, #320]	; (80036d8 <HAL_I2C_Master_Transmit+0x1f8>)
 8003596:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003598:	8979      	ldrh	r1, [r7, #10]
 800359a:	697b      	ldr	r3, [r7, #20]
 800359c:	6a3a      	ldr	r2, [r7, #32]
 800359e:	68f8      	ldr	r0, [r7, #12]
 80035a0:	f000 fe5e 	bl	8004260 <I2C_MasterRequestWrite>
 80035a4:	4603      	mov	r3, r0
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d001      	beq.n	80035ae <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80035aa:	2301      	movs	r3, #1
 80035ac:	e08d      	b.n	80036ca <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80035ae:	2300      	movs	r3, #0
 80035b0:	613b      	str	r3, [r7, #16]
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	695b      	ldr	r3, [r3, #20]
 80035b8:	613b      	str	r3, [r7, #16]
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	699b      	ldr	r3, [r3, #24]
 80035c0:	613b      	str	r3, [r7, #16]
 80035c2:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80035c4:	e066      	b.n	8003694 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80035c6:	697a      	ldr	r2, [r7, #20]
 80035c8:	6a39      	ldr	r1, [r7, #32]
 80035ca:	68f8      	ldr	r0, [r7, #12]
 80035cc:	f001 f9ec 	bl	80049a8 <I2C_WaitOnTXEFlagUntilTimeout>
 80035d0:	4603      	mov	r3, r0
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d00d      	beq.n	80035f2 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035da:	2b04      	cmp	r3, #4
 80035dc:	d107      	bne.n	80035ee <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	681a      	ldr	r2, [r3, #0]
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80035ec:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80035ee:	2301      	movs	r3, #1
 80035f0:	e06b      	b.n	80036ca <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035f6:	781a      	ldrb	r2, [r3, #0]
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003602:	1c5a      	adds	r2, r3, #1
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800360c:	b29b      	uxth	r3, r3
 800360e:	3b01      	subs	r3, #1
 8003610:	b29a      	uxth	r2, r3
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800361a:	3b01      	subs	r3, #1
 800361c:	b29a      	uxth	r2, r3
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	695b      	ldr	r3, [r3, #20]
 8003628:	f003 0304 	and.w	r3, r3, #4
 800362c:	2b04      	cmp	r3, #4
 800362e:	d11b      	bne.n	8003668 <HAL_I2C_Master_Transmit+0x188>
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003634:	2b00      	cmp	r3, #0
 8003636:	d017      	beq.n	8003668 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800363c:	781a      	ldrb	r2, [r3, #0]
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003648:	1c5a      	adds	r2, r3, #1
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003652:	b29b      	uxth	r3, r3
 8003654:	3b01      	subs	r3, #1
 8003656:	b29a      	uxth	r2, r3
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003660:	3b01      	subs	r3, #1
 8003662:	b29a      	uxth	r2, r3
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003668:	697a      	ldr	r2, [r7, #20]
 800366a:	6a39      	ldr	r1, [r7, #32]
 800366c:	68f8      	ldr	r0, [r7, #12]
 800366e:	f001 f9dc 	bl	8004a2a <I2C_WaitOnBTFFlagUntilTimeout>
 8003672:	4603      	mov	r3, r0
 8003674:	2b00      	cmp	r3, #0
 8003676:	d00d      	beq.n	8003694 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800367c:	2b04      	cmp	r3, #4
 800367e:	d107      	bne.n	8003690 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	681a      	ldr	r2, [r3, #0]
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800368e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003690:	2301      	movs	r3, #1
 8003692:	e01a      	b.n	80036ca <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003698:	2b00      	cmp	r3, #0
 800369a:	d194      	bne.n	80035c6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	681a      	ldr	r2, [r3, #0]
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80036aa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	2220      	movs	r2, #32
 80036b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	2200      	movs	r2, #0
 80036b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	2200      	movs	r2, #0
 80036c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80036c4:	2300      	movs	r3, #0
 80036c6:	e000      	b.n	80036ca <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80036c8:	2302      	movs	r3, #2
  }
}
 80036ca:	4618      	mov	r0, r3
 80036cc:	3718      	adds	r7, #24
 80036ce:	46bd      	mov	sp, r7
 80036d0:	bd80      	pop	{r7, pc}
 80036d2:	bf00      	nop
 80036d4:	00100002 	.word	0x00100002
 80036d8:	ffff0000 	.word	0xffff0000

080036dc <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80036dc:	b580      	push	{r7, lr}
 80036de:	b08c      	sub	sp, #48	; 0x30
 80036e0:	af02      	add	r7, sp, #8
 80036e2:	60f8      	str	r0, [r7, #12]
 80036e4:	607a      	str	r2, [r7, #4]
 80036e6:	461a      	mov	r2, r3
 80036e8:	460b      	mov	r3, r1
 80036ea:	817b      	strh	r3, [r7, #10]
 80036ec:	4613      	mov	r3, r2
 80036ee:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 80036f0:	2300      	movs	r3, #0
 80036f2:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80036f4:	f7ff fb02 	bl	8002cfc <HAL_GetTick>
 80036f8:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003700:	b2db      	uxtb	r3, r3
 8003702:	2b20      	cmp	r3, #32
 8003704:	f040 823f 	bne.w	8003b86 <HAL_I2C_Master_Receive+0x4aa>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003708:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800370a:	9300      	str	r3, [sp, #0]
 800370c:	2319      	movs	r3, #25
 800370e:	2201      	movs	r2, #1
 8003710:	497f      	ldr	r1, [pc, #508]	; (8003910 <HAL_I2C_Master_Receive+0x234>)
 8003712:	68f8      	ldr	r0, [r7, #12]
 8003714:	f001 f872 	bl	80047fc <I2C_WaitOnFlagUntilTimeout>
 8003718:	4603      	mov	r3, r0
 800371a:	2b00      	cmp	r3, #0
 800371c:	d001      	beq.n	8003722 <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 800371e:	2302      	movs	r3, #2
 8003720:	e232      	b.n	8003b88 <HAL_I2C_Master_Receive+0x4ac>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003728:	2b01      	cmp	r3, #1
 800372a:	d101      	bne.n	8003730 <HAL_I2C_Master_Receive+0x54>
 800372c:	2302      	movs	r3, #2
 800372e:	e22b      	b.n	8003b88 <HAL_I2C_Master_Receive+0x4ac>
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	2201      	movs	r2, #1
 8003734:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f003 0301 	and.w	r3, r3, #1
 8003742:	2b01      	cmp	r3, #1
 8003744:	d007      	beq.n	8003756 <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	681a      	ldr	r2, [r3, #0]
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f042 0201 	orr.w	r2, r2, #1
 8003754:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	681a      	ldr	r2, [r3, #0]
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003764:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	2222      	movs	r2, #34	; 0x22
 800376a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	2210      	movs	r2, #16
 8003772:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	2200      	movs	r2, #0
 800377a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	687a      	ldr	r2, [r7, #4]
 8003780:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	893a      	ldrh	r2, [r7, #8]
 8003786:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800378c:	b29a      	uxth	r2, r3
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	4a5f      	ldr	r2, [pc, #380]	; (8003914 <HAL_I2C_Master_Receive+0x238>)
 8003796:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003798:	8979      	ldrh	r1, [r7, #10]
 800379a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800379c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800379e:	68f8      	ldr	r0, [r7, #12]
 80037a0:	f000 fde0 	bl	8004364 <I2C_MasterRequestRead>
 80037a4:	4603      	mov	r3, r0
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d001      	beq.n	80037ae <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 80037aa:	2301      	movs	r3, #1
 80037ac:	e1ec      	b.n	8003b88 <HAL_I2C_Master_Receive+0x4ac>
    }

    if (hi2c->XferSize == 0U)
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d113      	bne.n	80037de <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80037b6:	2300      	movs	r3, #0
 80037b8:	61fb      	str	r3, [r7, #28]
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	695b      	ldr	r3, [r3, #20]
 80037c0:	61fb      	str	r3, [r7, #28]
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	699b      	ldr	r3, [r3, #24]
 80037c8:	61fb      	str	r3, [r7, #28]
 80037ca:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	681a      	ldr	r2, [r3, #0]
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80037da:	601a      	str	r2, [r3, #0]
 80037dc:	e1c0      	b.n	8003b60 <HAL_I2C_Master_Receive+0x484>
    }
    else if (hi2c->XferSize == 1U)
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037e2:	2b01      	cmp	r3, #1
 80037e4:	d11e      	bne.n	8003824 <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	681a      	ldr	r2, [r3, #0]
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80037f4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80037f6:	b672      	cpsid	i
}
 80037f8:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80037fa:	2300      	movs	r3, #0
 80037fc:	61bb      	str	r3, [r7, #24]
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	695b      	ldr	r3, [r3, #20]
 8003804:	61bb      	str	r3, [r7, #24]
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	699b      	ldr	r3, [r3, #24]
 800380c:	61bb      	str	r3, [r7, #24]
 800380e:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	681a      	ldr	r2, [r3, #0]
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800381e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003820:	b662      	cpsie	i
}
 8003822:	e035      	b.n	8003890 <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003828:	2b02      	cmp	r3, #2
 800382a:	d11e      	bne.n	800386a <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	681a      	ldr	r2, [r3, #0]
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800383a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800383c:	b672      	cpsid	i
}
 800383e:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003840:	2300      	movs	r3, #0
 8003842:	617b      	str	r3, [r7, #20]
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	695b      	ldr	r3, [r3, #20]
 800384a:	617b      	str	r3, [r7, #20]
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	699b      	ldr	r3, [r3, #24]
 8003852:	617b      	str	r3, [r7, #20]
 8003854:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	681a      	ldr	r2, [r3, #0]
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003864:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003866:	b662      	cpsie	i
}
 8003868:	e012      	b.n	8003890 <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	681a      	ldr	r2, [r3, #0]
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003878:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800387a:	2300      	movs	r3, #0
 800387c:	613b      	str	r3, [r7, #16]
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	695b      	ldr	r3, [r3, #20]
 8003884:	613b      	str	r3, [r7, #16]
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	699b      	ldr	r3, [r3, #24]
 800388c:	613b      	str	r3, [r7, #16]
 800388e:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8003890:	e166      	b.n	8003b60 <HAL_I2C_Master_Receive+0x484>
    {
      if (hi2c->XferSize <= 3U)
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003896:	2b03      	cmp	r3, #3
 8003898:	f200 811f 	bhi.w	8003ada <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038a0:	2b01      	cmp	r3, #1
 80038a2:	d123      	bne.n	80038ec <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80038a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80038a6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80038a8:	68f8      	ldr	r0, [r7, #12]
 80038aa:	f001 f8ff 	bl	8004aac <I2C_WaitOnRXNEFlagUntilTimeout>
 80038ae:	4603      	mov	r3, r0
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d001      	beq.n	80038b8 <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 80038b4:	2301      	movs	r3, #1
 80038b6:	e167      	b.n	8003b88 <HAL_I2C_Master_Receive+0x4ac>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	691a      	ldr	r2, [r3, #16]
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038c2:	b2d2      	uxtb	r2, r2
 80038c4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038ca:	1c5a      	adds	r2, r3, #1
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038d4:	3b01      	subs	r3, #1
 80038d6:	b29a      	uxth	r2, r3
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038e0:	b29b      	uxth	r3, r3
 80038e2:	3b01      	subs	r3, #1
 80038e4:	b29a      	uxth	r2, r3
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	855a      	strh	r2, [r3, #42]	; 0x2a
 80038ea:	e139      	b.n	8003b60 <HAL_I2C_Master_Receive+0x484>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038f0:	2b02      	cmp	r3, #2
 80038f2:	d152      	bne.n	800399a <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80038f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038f6:	9300      	str	r3, [sp, #0]
 80038f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038fa:	2200      	movs	r2, #0
 80038fc:	4906      	ldr	r1, [pc, #24]	; (8003918 <HAL_I2C_Master_Receive+0x23c>)
 80038fe:	68f8      	ldr	r0, [r7, #12]
 8003900:	f000 ff7c 	bl	80047fc <I2C_WaitOnFlagUntilTimeout>
 8003904:	4603      	mov	r3, r0
 8003906:	2b00      	cmp	r3, #0
 8003908:	d008      	beq.n	800391c <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 800390a:	2301      	movs	r3, #1
 800390c:	e13c      	b.n	8003b88 <HAL_I2C_Master_Receive+0x4ac>
 800390e:	bf00      	nop
 8003910:	00100002 	.word	0x00100002
 8003914:	ffff0000 	.word	0xffff0000
 8003918:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 800391c:	b672      	cpsid	i
}
 800391e:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	681a      	ldr	r2, [r3, #0]
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800392e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	691a      	ldr	r2, [r3, #16]
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800393a:	b2d2      	uxtb	r2, r2
 800393c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003942:	1c5a      	adds	r2, r3, #1
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800394c:	3b01      	subs	r3, #1
 800394e:	b29a      	uxth	r2, r3
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003958:	b29b      	uxth	r3, r3
 800395a:	3b01      	subs	r3, #1
 800395c:	b29a      	uxth	r2, r3
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8003962:	b662      	cpsie	i
}
 8003964:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	691a      	ldr	r2, [r3, #16]
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003970:	b2d2      	uxtb	r2, r2
 8003972:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003978:	1c5a      	adds	r2, r3, #1
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003982:	3b01      	subs	r3, #1
 8003984:	b29a      	uxth	r2, r3
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800398e:	b29b      	uxth	r3, r3
 8003990:	3b01      	subs	r3, #1
 8003992:	b29a      	uxth	r2, r3
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003998:	e0e2      	b.n	8003b60 <HAL_I2C_Master_Receive+0x484>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800399a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800399c:	9300      	str	r3, [sp, #0]
 800399e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039a0:	2200      	movs	r2, #0
 80039a2:	497b      	ldr	r1, [pc, #492]	; (8003b90 <HAL_I2C_Master_Receive+0x4b4>)
 80039a4:	68f8      	ldr	r0, [r7, #12]
 80039a6:	f000 ff29 	bl	80047fc <I2C_WaitOnFlagUntilTimeout>
 80039aa:	4603      	mov	r3, r0
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d001      	beq.n	80039b4 <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 80039b0:	2301      	movs	r3, #1
 80039b2:	e0e9      	b.n	8003b88 <HAL_I2C_Master_Receive+0x4ac>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	681a      	ldr	r2, [r3, #0]
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80039c2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80039c4:	b672      	cpsid	i
}
 80039c6:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	691a      	ldr	r2, [r3, #16]
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039d2:	b2d2      	uxtb	r2, r2
 80039d4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039da:	1c5a      	adds	r2, r3, #1
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039e4:	3b01      	subs	r3, #1
 80039e6:	b29a      	uxth	r2, r3
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039f0:	b29b      	uxth	r3, r3
 80039f2:	3b01      	subs	r3, #1
 80039f4:	b29a      	uxth	r2, r3
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80039fa:	4b66      	ldr	r3, [pc, #408]	; (8003b94 <HAL_I2C_Master_Receive+0x4b8>)
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	08db      	lsrs	r3, r3, #3
 8003a00:	4a65      	ldr	r2, [pc, #404]	; (8003b98 <HAL_I2C_Master_Receive+0x4bc>)
 8003a02:	fba2 2303 	umull	r2, r3, r2, r3
 8003a06:	0a1a      	lsrs	r2, r3, #8
 8003a08:	4613      	mov	r3, r2
 8003a0a:	009b      	lsls	r3, r3, #2
 8003a0c:	4413      	add	r3, r2
 8003a0e:	00da      	lsls	r2, r3, #3
 8003a10:	1ad3      	subs	r3, r2, r3
 8003a12:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8003a14:	6a3b      	ldr	r3, [r7, #32]
 8003a16:	3b01      	subs	r3, #1
 8003a18:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8003a1a:	6a3b      	ldr	r3, [r7, #32]
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d118      	bne.n	8003a52 <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	2200      	movs	r2, #0
 8003a24:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	2220      	movs	r2, #32
 8003a2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	2200      	movs	r2, #0
 8003a32:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a3a:	f043 0220 	orr.w	r2, r3, #32
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8003a42:	b662      	cpsie	i
}
 8003a44:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	2200      	movs	r2, #0
 8003a4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8003a4e:	2301      	movs	r3, #1
 8003a50:	e09a      	b.n	8003b88 <HAL_I2C_Master_Receive+0x4ac>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	695b      	ldr	r3, [r3, #20]
 8003a58:	f003 0304 	and.w	r3, r3, #4
 8003a5c:	2b04      	cmp	r3, #4
 8003a5e:	d1d9      	bne.n	8003a14 <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	681a      	ldr	r2, [r3, #0]
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a6e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	691a      	ldr	r2, [r3, #16]
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a7a:	b2d2      	uxtb	r2, r2
 8003a7c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a82:	1c5a      	adds	r2, r3, #1
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a8c:	3b01      	subs	r3, #1
 8003a8e:	b29a      	uxth	r2, r3
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a98:	b29b      	uxth	r3, r3
 8003a9a:	3b01      	subs	r3, #1
 8003a9c:	b29a      	uxth	r2, r3
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8003aa2:	b662      	cpsie	i
}
 8003aa4:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	691a      	ldr	r2, [r3, #16]
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ab0:	b2d2      	uxtb	r2, r2
 8003ab2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ab8:	1c5a      	adds	r2, r3, #1
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ac2:	3b01      	subs	r3, #1
 8003ac4:	b29a      	uxth	r2, r3
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ace:	b29b      	uxth	r3, r3
 8003ad0:	3b01      	subs	r3, #1
 8003ad2:	b29a      	uxth	r2, r3
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003ad8:	e042      	b.n	8003b60 <HAL_I2C_Master_Receive+0x484>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003ada:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003adc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003ade:	68f8      	ldr	r0, [r7, #12]
 8003ae0:	f000 ffe4 	bl	8004aac <I2C_WaitOnRXNEFlagUntilTimeout>
 8003ae4:	4603      	mov	r3, r0
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d001      	beq.n	8003aee <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 8003aea:	2301      	movs	r3, #1
 8003aec:	e04c      	b.n	8003b88 <HAL_I2C_Master_Receive+0x4ac>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	691a      	ldr	r2, [r3, #16]
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003af8:	b2d2      	uxtb	r2, r2
 8003afa:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b00:	1c5a      	adds	r2, r3, #1
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b0a:	3b01      	subs	r3, #1
 8003b0c:	b29a      	uxth	r2, r3
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b16:	b29b      	uxth	r3, r3
 8003b18:	3b01      	subs	r3, #1
 8003b1a:	b29a      	uxth	r2, r3
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	695b      	ldr	r3, [r3, #20]
 8003b26:	f003 0304 	and.w	r3, r3, #4
 8003b2a:	2b04      	cmp	r3, #4
 8003b2c:	d118      	bne.n	8003b60 <HAL_I2C_Master_Receive+0x484>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	691a      	ldr	r2, [r3, #16]
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b38:	b2d2      	uxtb	r2, r2
 8003b3a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b40:	1c5a      	adds	r2, r3, #1
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b4a:	3b01      	subs	r3, #1
 8003b4c:	b29a      	uxth	r2, r3
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b56:	b29b      	uxth	r3, r3
 8003b58:	3b01      	subs	r3, #1
 8003b5a:	b29a      	uxth	r2, r3
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	f47f ae94 	bne.w	8003892 <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	2220      	movs	r2, #32
 8003b6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	2200      	movs	r2, #0
 8003b76:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003b82:	2300      	movs	r3, #0
 8003b84:	e000      	b.n	8003b88 <HAL_I2C_Master_Receive+0x4ac>
  }
  else
  {
    return HAL_BUSY;
 8003b86:	2302      	movs	r3, #2
  }
}
 8003b88:	4618      	mov	r0, r3
 8003b8a:	3728      	adds	r7, #40	; 0x28
 8003b8c:	46bd      	mov	sp, r7
 8003b8e:	bd80      	pop	{r7, pc}
 8003b90:	00010004 	.word	0x00010004
 8003b94:	20000000 	.word	0x20000000
 8003b98:	14f8b589 	.word	0x14f8b589

08003b9c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003b9c:	b580      	push	{r7, lr}
 8003b9e:	b088      	sub	sp, #32
 8003ba0:	af02      	add	r7, sp, #8
 8003ba2:	60f8      	str	r0, [r7, #12]
 8003ba4:	4608      	mov	r0, r1
 8003ba6:	4611      	mov	r1, r2
 8003ba8:	461a      	mov	r2, r3
 8003baa:	4603      	mov	r3, r0
 8003bac:	817b      	strh	r3, [r7, #10]
 8003bae:	460b      	mov	r3, r1
 8003bb0:	813b      	strh	r3, [r7, #8]
 8003bb2:	4613      	mov	r3, r2
 8003bb4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003bb6:	f7ff f8a1 	bl	8002cfc <HAL_GetTick>
 8003bba:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003bc2:	b2db      	uxtb	r3, r3
 8003bc4:	2b20      	cmp	r3, #32
 8003bc6:	f040 80d9 	bne.w	8003d7c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003bca:	697b      	ldr	r3, [r7, #20]
 8003bcc:	9300      	str	r3, [sp, #0]
 8003bce:	2319      	movs	r3, #25
 8003bd0:	2201      	movs	r2, #1
 8003bd2:	496d      	ldr	r1, [pc, #436]	; (8003d88 <HAL_I2C_Mem_Write+0x1ec>)
 8003bd4:	68f8      	ldr	r0, [r7, #12]
 8003bd6:	f000 fe11 	bl	80047fc <I2C_WaitOnFlagUntilTimeout>
 8003bda:	4603      	mov	r3, r0
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d001      	beq.n	8003be4 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003be0:	2302      	movs	r3, #2
 8003be2:	e0cc      	b.n	8003d7e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003bea:	2b01      	cmp	r3, #1
 8003bec:	d101      	bne.n	8003bf2 <HAL_I2C_Mem_Write+0x56>
 8003bee:	2302      	movs	r3, #2
 8003bf0:	e0c5      	b.n	8003d7e <HAL_I2C_Mem_Write+0x1e2>
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	2201      	movs	r2, #1
 8003bf6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	f003 0301 	and.w	r3, r3, #1
 8003c04:	2b01      	cmp	r3, #1
 8003c06:	d007      	beq.n	8003c18 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	681a      	ldr	r2, [r3, #0]
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f042 0201 	orr.w	r2, r2, #1
 8003c16:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	681a      	ldr	r2, [r3, #0]
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003c26:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	2221      	movs	r2, #33	; 0x21
 8003c2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	2240      	movs	r2, #64	; 0x40
 8003c34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	2200      	movs	r2, #0
 8003c3c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	6a3a      	ldr	r2, [r7, #32]
 8003c42:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003c48:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c4e:	b29a      	uxth	r2, r3
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	4a4d      	ldr	r2, [pc, #308]	; (8003d8c <HAL_I2C_Mem_Write+0x1f0>)
 8003c58:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003c5a:	88f8      	ldrh	r0, [r7, #6]
 8003c5c:	893a      	ldrh	r2, [r7, #8]
 8003c5e:	8979      	ldrh	r1, [r7, #10]
 8003c60:	697b      	ldr	r3, [r7, #20]
 8003c62:	9301      	str	r3, [sp, #4]
 8003c64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c66:	9300      	str	r3, [sp, #0]
 8003c68:	4603      	mov	r3, r0
 8003c6a:	68f8      	ldr	r0, [r7, #12]
 8003c6c:	f000 fc48 	bl	8004500 <I2C_RequestMemoryWrite>
 8003c70:	4603      	mov	r3, r0
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d052      	beq.n	8003d1c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003c76:	2301      	movs	r3, #1
 8003c78:	e081      	b.n	8003d7e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003c7a:	697a      	ldr	r2, [r7, #20]
 8003c7c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003c7e:	68f8      	ldr	r0, [r7, #12]
 8003c80:	f000 fe92 	bl	80049a8 <I2C_WaitOnTXEFlagUntilTimeout>
 8003c84:	4603      	mov	r3, r0
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d00d      	beq.n	8003ca6 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c8e:	2b04      	cmp	r3, #4
 8003c90:	d107      	bne.n	8003ca2 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	681a      	ldr	r2, [r3, #0]
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ca0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003ca2:	2301      	movs	r3, #1
 8003ca4:	e06b      	b.n	8003d7e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003caa:	781a      	ldrb	r2, [r3, #0]
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cb6:	1c5a      	adds	r2, r3, #1
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cc0:	3b01      	subs	r3, #1
 8003cc2:	b29a      	uxth	r2, r3
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ccc:	b29b      	uxth	r3, r3
 8003cce:	3b01      	subs	r3, #1
 8003cd0:	b29a      	uxth	r2, r3
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	695b      	ldr	r3, [r3, #20]
 8003cdc:	f003 0304 	and.w	r3, r3, #4
 8003ce0:	2b04      	cmp	r3, #4
 8003ce2:	d11b      	bne.n	8003d1c <HAL_I2C_Mem_Write+0x180>
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d017      	beq.n	8003d1c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cf0:	781a      	ldrb	r2, [r3, #0]
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cfc:	1c5a      	adds	r2, r3, #1
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d06:	3b01      	subs	r3, #1
 8003d08:	b29a      	uxth	r2, r3
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d12:	b29b      	uxth	r3, r3
 8003d14:	3b01      	subs	r3, #1
 8003d16:	b29a      	uxth	r2, r3
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d1aa      	bne.n	8003c7a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003d24:	697a      	ldr	r2, [r7, #20]
 8003d26:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003d28:	68f8      	ldr	r0, [r7, #12]
 8003d2a:	f000 fe7e 	bl	8004a2a <I2C_WaitOnBTFFlagUntilTimeout>
 8003d2e:	4603      	mov	r3, r0
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d00d      	beq.n	8003d50 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d38:	2b04      	cmp	r3, #4
 8003d3a:	d107      	bne.n	8003d4c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	681a      	ldr	r2, [r3, #0]
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d4a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003d4c:	2301      	movs	r3, #1
 8003d4e:	e016      	b.n	8003d7e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	681a      	ldr	r2, [r3, #0]
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d5e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	2220      	movs	r2, #32
 8003d64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	2200      	movs	r2, #0
 8003d6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	2200      	movs	r2, #0
 8003d74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003d78:	2300      	movs	r3, #0
 8003d7a:	e000      	b.n	8003d7e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003d7c:	2302      	movs	r3, #2
  }
}
 8003d7e:	4618      	mov	r0, r3
 8003d80:	3718      	adds	r7, #24
 8003d82:	46bd      	mov	sp, r7
 8003d84:	bd80      	pop	{r7, pc}
 8003d86:	bf00      	nop
 8003d88:	00100002 	.word	0x00100002
 8003d8c:	ffff0000 	.word	0xffff0000

08003d90 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003d90:	b580      	push	{r7, lr}
 8003d92:	b08c      	sub	sp, #48	; 0x30
 8003d94:	af02      	add	r7, sp, #8
 8003d96:	60f8      	str	r0, [r7, #12]
 8003d98:	4608      	mov	r0, r1
 8003d9a:	4611      	mov	r1, r2
 8003d9c:	461a      	mov	r2, r3
 8003d9e:	4603      	mov	r3, r0
 8003da0:	817b      	strh	r3, [r7, #10]
 8003da2:	460b      	mov	r3, r1
 8003da4:	813b      	strh	r3, [r7, #8]
 8003da6:	4613      	mov	r3, r2
 8003da8:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8003daa:	2300      	movs	r3, #0
 8003dac:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003dae:	f7fe ffa5 	bl	8002cfc <HAL_GetTick>
 8003db2:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003dba:	b2db      	uxtb	r3, r3
 8003dbc:	2b20      	cmp	r3, #32
 8003dbe:	f040 8244 	bne.w	800424a <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003dc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dc4:	9300      	str	r3, [sp, #0]
 8003dc6:	2319      	movs	r3, #25
 8003dc8:	2201      	movs	r2, #1
 8003dca:	4982      	ldr	r1, [pc, #520]	; (8003fd4 <HAL_I2C_Mem_Read+0x244>)
 8003dcc:	68f8      	ldr	r0, [r7, #12]
 8003dce:	f000 fd15 	bl	80047fc <I2C_WaitOnFlagUntilTimeout>
 8003dd2:	4603      	mov	r3, r0
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d001      	beq.n	8003ddc <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8003dd8:	2302      	movs	r3, #2
 8003dda:	e237      	b.n	800424c <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003de2:	2b01      	cmp	r3, #1
 8003de4:	d101      	bne.n	8003dea <HAL_I2C_Mem_Read+0x5a>
 8003de6:	2302      	movs	r3, #2
 8003de8:	e230      	b.n	800424c <HAL_I2C_Mem_Read+0x4bc>
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	2201      	movs	r2, #1
 8003dee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f003 0301 	and.w	r3, r3, #1
 8003dfc:	2b01      	cmp	r3, #1
 8003dfe:	d007      	beq.n	8003e10 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	681a      	ldr	r2, [r3, #0]
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f042 0201 	orr.w	r2, r2, #1
 8003e0e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	681a      	ldr	r2, [r3, #0]
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003e1e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	2222      	movs	r2, #34	; 0x22
 8003e24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	2240      	movs	r2, #64	; 0x40
 8003e2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	2200      	movs	r2, #0
 8003e34:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003e3a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8003e40:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e46:	b29a      	uxth	r2, r3
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	4a62      	ldr	r2, [pc, #392]	; (8003fd8 <HAL_I2C_Mem_Read+0x248>)
 8003e50:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003e52:	88f8      	ldrh	r0, [r7, #6]
 8003e54:	893a      	ldrh	r2, [r7, #8]
 8003e56:	8979      	ldrh	r1, [r7, #10]
 8003e58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e5a:	9301      	str	r3, [sp, #4]
 8003e5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e5e:	9300      	str	r3, [sp, #0]
 8003e60:	4603      	mov	r3, r0
 8003e62:	68f8      	ldr	r0, [r7, #12]
 8003e64:	f000 fbe2 	bl	800462c <I2C_RequestMemoryRead>
 8003e68:	4603      	mov	r3, r0
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d001      	beq.n	8003e72 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8003e6e:	2301      	movs	r3, #1
 8003e70:	e1ec      	b.n	800424c <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d113      	bne.n	8003ea2 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e7a:	2300      	movs	r3, #0
 8003e7c:	61fb      	str	r3, [r7, #28]
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	695b      	ldr	r3, [r3, #20]
 8003e84:	61fb      	str	r3, [r7, #28]
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	699b      	ldr	r3, [r3, #24]
 8003e8c:	61fb      	str	r3, [r7, #28]
 8003e8e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	681a      	ldr	r2, [r3, #0]
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e9e:	601a      	str	r2, [r3, #0]
 8003ea0:	e1c0      	b.n	8004224 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ea6:	2b01      	cmp	r3, #1
 8003ea8:	d11e      	bne.n	8003ee8 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	681a      	ldr	r2, [r3, #0]
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003eb8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003eba:	b672      	cpsid	i
}
 8003ebc:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ebe:	2300      	movs	r3, #0
 8003ec0:	61bb      	str	r3, [r7, #24]
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	695b      	ldr	r3, [r3, #20]
 8003ec8:	61bb      	str	r3, [r7, #24]
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	699b      	ldr	r3, [r3, #24]
 8003ed0:	61bb      	str	r3, [r7, #24]
 8003ed2:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	681a      	ldr	r2, [r3, #0]
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ee2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003ee4:	b662      	cpsie	i
}
 8003ee6:	e035      	b.n	8003f54 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003eec:	2b02      	cmp	r3, #2
 8003eee:	d11e      	bne.n	8003f2e <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	681a      	ldr	r2, [r3, #0]
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003efe:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003f00:	b672      	cpsid	i
}
 8003f02:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f04:	2300      	movs	r3, #0
 8003f06:	617b      	str	r3, [r7, #20]
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	695b      	ldr	r3, [r3, #20]
 8003f0e:	617b      	str	r3, [r7, #20]
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	699b      	ldr	r3, [r3, #24]
 8003f16:	617b      	str	r3, [r7, #20]
 8003f18:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	681a      	ldr	r2, [r3, #0]
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f28:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003f2a:	b662      	cpsie	i
}
 8003f2c:	e012      	b.n	8003f54 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	681a      	ldr	r2, [r3, #0]
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003f3c:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f3e:	2300      	movs	r3, #0
 8003f40:	613b      	str	r3, [r7, #16]
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	695b      	ldr	r3, [r3, #20]
 8003f48:	613b      	str	r3, [r7, #16]
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	699b      	ldr	r3, [r3, #24]
 8003f50:	613b      	str	r3, [r7, #16]
 8003f52:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8003f54:	e166      	b.n	8004224 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f5a:	2b03      	cmp	r3, #3
 8003f5c:	f200 811f 	bhi.w	800419e <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f64:	2b01      	cmp	r3, #1
 8003f66:	d123      	bne.n	8003fb0 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003f68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f6a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003f6c:	68f8      	ldr	r0, [r7, #12]
 8003f6e:	f000 fd9d 	bl	8004aac <I2C_WaitOnRXNEFlagUntilTimeout>
 8003f72:	4603      	mov	r3, r0
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d001      	beq.n	8003f7c <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8003f78:	2301      	movs	r3, #1
 8003f7a:	e167      	b.n	800424c <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	691a      	ldr	r2, [r3, #16]
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f86:	b2d2      	uxtb	r2, r2
 8003f88:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f8e:	1c5a      	adds	r2, r3, #1
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f98:	3b01      	subs	r3, #1
 8003f9a:	b29a      	uxth	r2, r3
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fa4:	b29b      	uxth	r3, r3
 8003fa6:	3b01      	subs	r3, #1
 8003fa8:	b29a      	uxth	r2, r3
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003fae:	e139      	b.n	8004224 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fb4:	2b02      	cmp	r3, #2
 8003fb6:	d152      	bne.n	800405e <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003fb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fba:	9300      	str	r3, [sp, #0]
 8003fbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fbe:	2200      	movs	r2, #0
 8003fc0:	4906      	ldr	r1, [pc, #24]	; (8003fdc <HAL_I2C_Mem_Read+0x24c>)
 8003fc2:	68f8      	ldr	r0, [r7, #12]
 8003fc4:	f000 fc1a 	bl	80047fc <I2C_WaitOnFlagUntilTimeout>
 8003fc8:	4603      	mov	r3, r0
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d008      	beq.n	8003fe0 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8003fce:	2301      	movs	r3, #1
 8003fd0:	e13c      	b.n	800424c <HAL_I2C_Mem_Read+0x4bc>
 8003fd2:	bf00      	nop
 8003fd4:	00100002 	.word	0x00100002
 8003fd8:	ffff0000 	.word	0xffff0000
 8003fdc:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8003fe0:	b672      	cpsid	i
}
 8003fe2:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	681a      	ldr	r2, [r3, #0]
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ff2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	691a      	ldr	r2, [r3, #16]
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ffe:	b2d2      	uxtb	r2, r2
 8004000:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004006:	1c5a      	adds	r2, r3, #1
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004010:	3b01      	subs	r3, #1
 8004012:	b29a      	uxth	r2, r3
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800401c:	b29b      	uxth	r3, r3
 800401e:	3b01      	subs	r3, #1
 8004020:	b29a      	uxth	r2, r3
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8004026:	b662      	cpsie	i
}
 8004028:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	691a      	ldr	r2, [r3, #16]
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004034:	b2d2      	uxtb	r2, r2
 8004036:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800403c:	1c5a      	adds	r2, r3, #1
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004046:	3b01      	subs	r3, #1
 8004048:	b29a      	uxth	r2, r3
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004052:	b29b      	uxth	r3, r3
 8004054:	3b01      	subs	r3, #1
 8004056:	b29a      	uxth	r2, r3
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800405c:	e0e2      	b.n	8004224 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800405e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004060:	9300      	str	r3, [sp, #0]
 8004062:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004064:	2200      	movs	r2, #0
 8004066:	497b      	ldr	r1, [pc, #492]	; (8004254 <HAL_I2C_Mem_Read+0x4c4>)
 8004068:	68f8      	ldr	r0, [r7, #12]
 800406a:	f000 fbc7 	bl	80047fc <I2C_WaitOnFlagUntilTimeout>
 800406e:	4603      	mov	r3, r0
 8004070:	2b00      	cmp	r3, #0
 8004072:	d001      	beq.n	8004078 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8004074:	2301      	movs	r3, #1
 8004076:	e0e9      	b.n	800424c <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	681a      	ldr	r2, [r3, #0]
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004086:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004088:	b672      	cpsid	i
}
 800408a:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	691a      	ldr	r2, [r3, #16]
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004096:	b2d2      	uxtb	r2, r2
 8004098:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800409e:	1c5a      	adds	r2, r3, #1
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040a8:	3b01      	subs	r3, #1
 80040aa:	b29a      	uxth	r2, r3
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040b4:	b29b      	uxth	r3, r3
 80040b6:	3b01      	subs	r3, #1
 80040b8:	b29a      	uxth	r2, r3
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80040be:	4b66      	ldr	r3, [pc, #408]	; (8004258 <HAL_I2C_Mem_Read+0x4c8>)
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	08db      	lsrs	r3, r3, #3
 80040c4:	4a65      	ldr	r2, [pc, #404]	; (800425c <HAL_I2C_Mem_Read+0x4cc>)
 80040c6:	fba2 2303 	umull	r2, r3, r2, r3
 80040ca:	0a1a      	lsrs	r2, r3, #8
 80040cc:	4613      	mov	r3, r2
 80040ce:	009b      	lsls	r3, r3, #2
 80040d0:	4413      	add	r3, r2
 80040d2:	00da      	lsls	r2, r3, #3
 80040d4:	1ad3      	subs	r3, r2, r3
 80040d6:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 80040d8:	6a3b      	ldr	r3, [r7, #32]
 80040da:	3b01      	subs	r3, #1
 80040dc:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 80040de:	6a3b      	ldr	r3, [r7, #32]
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d118      	bne.n	8004116 <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	2200      	movs	r2, #0
 80040e8:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	2220      	movs	r2, #32
 80040ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	2200      	movs	r2, #0
 80040f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040fe:	f043 0220 	orr.w	r2, r3, #32
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8004106:	b662      	cpsie	i
}
 8004108:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	2200      	movs	r2, #0
 800410e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8004112:	2301      	movs	r3, #1
 8004114:	e09a      	b.n	800424c <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	695b      	ldr	r3, [r3, #20]
 800411c:	f003 0304 	and.w	r3, r3, #4
 8004120:	2b04      	cmp	r3, #4
 8004122:	d1d9      	bne.n	80040d8 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	681a      	ldr	r2, [r3, #0]
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004132:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	691a      	ldr	r2, [r3, #16]
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800413e:	b2d2      	uxtb	r2, r2
 8004140:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004146:	1c5a      	adds	r2, r3, #1
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004150:	3b01      	subs	r3, #1
 8004152:	b29a      	uxth	r2, r3
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800415c:	b29b      	uxth	r3, r3
 800415e:	3b01      	subs	r3, #1
 8004160:	b29a      	uxth	r2, r3
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8004166:	b662      	cpsie	i
}
 8004168:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	691a      	ldr	r2, [r3, #16]
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004174:	b2d2      	uxtb	r2, r2
 8004176:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800417c:	1c5a      	adds	r2, r3, #1
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004186:	3b01      	subs	r3, #1
 8004188:	b29a      	uxth	r2, r3
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004192:	b29b      	uxth	r3, r3
 8004194:	3b01      	subs	r3, #1
 8004196:	b29a      	uxth	r2, r3
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800419c:	e042      	b.n	8004224 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800419e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80041a0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80041a2:	68f8      	ldr	r0, [r7, #12]
 80041a4:	f000 fc82 	bl	8004aac <I2C_WaitOnRXNEFlagUntilTimeout>
 80041a8:	4603      	mov	r3, r0
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d001      	beq.n	80041b2 <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 80041ae:	2301      	movs	r3, #1
 80041b0:	e04c      	b.n	800424c <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	691a      	ldr	r2, [r3, #16]
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041bc:	b2d2      	uxtb	r2, r2
 80041be:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041c4:	1c5a      	adds	r2, r3, #1
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041ce:	3b01      	subs	r3, #1
 80041d0:	b29a      	uxth	r2, r3
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041da:	b29b      	uxth	r3, r3
 80041dc:	3b01      	subs	r3, #1
 80041de:	b29a      	uxth	r2, r3
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	695b      	ldr	r3, [r3, #20]
 80041ea:	f003 0304 	and.w	r3, r3, #4
 80041ee:	2b04      	cmp	r3, #4
 80041f0:	d118      	bne.n	8004224 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	691a      	ldr	r2, [r3, #16]
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041fc:	b2d2      	uxtb	r2, r2
 80041fe:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004204:	1c5a      	adds	r2, r3, #1
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800420e:	3b01      	subs	r3, #1
 8004210:	b29a      	uxth	r2, r3
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800421a:	b29b      	uxth	r3, r3
 800421c:	3b01      	subs	r3, #1
 800421e:	b29a      	uxth	r2, r3
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004228:	2b00      	cmp	r3, #0
 800422a:	f47f ae94 	bne.w	8003f56 <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	2220      	movs	r2, #32
 8004232:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	2200      	movs	r2, #0
 800423a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	2200      	movs	r2, #0
 8004242:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004246:	2300      	movs	r3, #0
 8004248:	e000      	b.n	800424c <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 800424a:	2302      	movs	r3, #2
  }
}
 800424c:	4618      	mov	r0, r3
 800424e:	3728      	adds	r7, #40	; 0x28
 8004250:	46bd      	mov	sp, r7
 8004252:	bd80      	pop	{r7, pc}
 8004254:	00010004 	.word	0x00010004
 8004258:	20000000 	.word	0x20000000
 800425c:	14f8b589 	.word	0x14f8b589

08004260 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004260:	b580      	push	{r7, lr}
 8004262:	b088      	sub	sp, #32
 8004264:	af02      	add	r7, sp, #8
 8004266:	60f8      	str	r0, [r7, #12]
 8004268:	607a      	str	r2, [r7, #4]
 800426a:	603b      	str	r3, [r7, #0]
 800426c:	460b      	mov	r3, r1
 800426e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004274:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004276:	697b      	ldr	r3, [r7, #20]
 8004278:	2b08      	cmp	r3, #8
 800427a:	d006      	beq.n	800428a <I2C_MasterRequestWrite+0x2a>
 800427c:	697b      	ldr	r3, [r7, #20]
 800427e:	2b01      	cmp	r3, #1
 8004280:	d003      	beq.n	800428a <I2C_MasterRequestWrite+0x2a>
 8004282:	697b      	ldr	r3, [r7, #20]
 8004284:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004288:	d108      	bne.n	800429c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	681a      	ldr	r2, [r3, #0]
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004298:	601a      	str	r2, [r3, #0]
 800429a:	e00b      	b.n	80042b4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042a0:	2b12      	cmp	r3, #18
 80042a2:	d107      	bne.n	80042b4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	681a      	ldr	r2, [r3, #0]
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80042b2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80042b4:	683b      	ldr	r3, [r7, #0]
 80042b6:	9300      	str	r3, [sp, #0]
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	2200      	movs	r2, #0
 80042bc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80042c0:	68f8      	ldr	r0, [r7, #12]
 80042c2:	f000 fa9b 	bl	80047fc <I2C_WaitOnFlagUntilTimeout>
 80042c6:	4603      	mov	r3, r0
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d00d      	beq.n	80042e8 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80042da:	d103      	bne.n	80042e4 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	f44f 7200 	mov.w	r2, #512	; 0x200
 80042e2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80042e4:	2303      	movs	r3, #3
 80042e6:	e035      	b.n	8004354 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	691b      	ldr	r3, [r3, #16]
 80042ec:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80042f0:	d108      	bne.n	8004304 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80042f2:	897b      	ldrh	r3, [r7, #10]
 80042f4:	b2db      	uxtb	r3, r3
 80042f6:	461a      	mov	r2, r3
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004300:	611a      	str	r2, [r3, #16]
 8004302:	e01b      	b.n	800433c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004304:	897b      	ldrh	r3, [r7, #10]
 8004306:	11db      	asrs	r3, r3, #7
 8004308:	b2db      	uxtb	r3, r3
 800430a:	f003 0306 	and.w	r3, r3, #6
 800430e:	b2db      	uxtb	r3, r3
 8004310:	f063 030f 	orn	r3, r3, #15
 8004314:	b2da      	uxtb	r2, r3
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800431c:	683b      	ldr	r3, [r7, #0]
 800431e:	687a      	ldr	r2, [r7, #4]
 8004320:	490e      	ldr	r1, [pc, #56]	; (800435c <I2C_MasterRequestWrite+0xfc>)
 8004322:	68f8      	ldr	r0, [r7, #12]
 8004324:	f000 fac1 	bl	80048aa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004328:	4603      	mov	r3, r0
 800432a:	2b00      	cmp	r3, #0
 800432c:	d001      	beq.n	8004332 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800432e:	2301      	movs	r3, #1
 8004330:	e010      	b.n	8004354 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004332:	897b      	ldrh	r3, [r7, #10]
 8004334:	b2da      	uxtb	r2, r3
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800433c:	683b      	ldr	r3, [r7, #0]
 800433e:	687a      	ldr	r2, [r7, #4]
 8004340:	4907      	ldr	r1, [pc, #28]	; (8004360 <I2C_MasterRequestWrite+0x100>)
 8004342:	68f8      	ldr	r0, [r7, #12]
 8004344:	f000 fab1 	bl	80048aa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004348:	4603      	mov	r3, r0
 800434a:	2b00      	cmp	r3, #0
 800434c:	d001      	beq.n	8004352 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800434e:	2301      	movs	r3, #1
 8004350:	e000      	b.n	8004354 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8004352:	2300      	movs	r3, #0
}
 8004354:	4618      	mov	r0, r3
 8004356:	3718      	adds	r7, #24
 8004358:	46bd      	mov	sp, r7
 800435a:	bd80      	pop	{r7, pc}
 800435c:	00010008 	.word	0x00010008
 8004360:	00010002 	.word	0x00010002

08004364 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004364:	b580      	push	{r7, lr}
 8004366:	b088      	sub	sp, #32
 8004368:	af02      	add	r7, sp, #8
 800436a:	60f8      	str	r0, [r7, #12]
 800436c:	607a      	str	r2, [r7, #4]
 800436e:	603b      	str	r3, [r7, #0]
 8004370:	460b      	mov	r3, r1
 8004372:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004378:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	681a      	ldr	r2, [r3, #0]
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004388:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800438a:	697b      	ldr	r3, [r7, #20]
 800438c:	2b08      	cmp	r3, #8
 800438e:	d006      	beq.n	800439e <I2C_MasterRequestRead+0x3a>
 8004390:	697b      	ldr	r3, [r7, #20]
 8004392:	2b01      	cmp	r3, #1
 8004394:	d003      	beq.n	800439e <I2C_MasterRequestRead+0x3a>
 8004396:	697b      	ldr	r3, [r7, #20]
 8004398:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800439c:	d108      	bne.n	80043b0 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	681a      	ldr	r2, [r3, #0]
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80043ac:	601a      	str	r2, [r3, #0]
 80043ae:	e00b      	b.n	80043c8 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043b4:	2b11      	cmp	r3, #17
 80043b6:	d107      	bne.n	80043c8 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	681a      	ldr	r2, [r3, #0]
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80043c6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80043c8:	683b      	ldr	r3, [r7, #0]
 80043ca:	9300      	str	r3, [sp, #0]
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	2200      	movs	r2, #0
 80043d0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80043d4:	68f8      	ldr	r0, [r7, #12]
 80043d6:	f000 fa11 	bl	80047fc <I2C_WaitOnFlagUntilTimeout>
 80043da:	4603      	mov	r3, r0
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d00d      	beq.n	80043fc <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80043ee:	d103      	bne.n	80043f8 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80043f6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80043f8:	2303      	movs	r3, #3
 80043fa:	e079      	b.n	80044f0 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	691b      	ldr	r3, [r3, #16]
 8004400:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004404:	d108      	bne.n	8004418 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004406:	897b      	ldrh	r3, [r7, #10]
 8004408:	b2db      	uxtb	r3, r3
 800440a:	f043 0301 	orr.w	r3, r3, #1
 800440e:	b2da      	uxtb	r2, r3
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	611a      	str	r2, [r3, #16]
 8004416:	e05f      	b.n	80044d8 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004418:	897b      	ldrh	r3, [r7, #10]
 800441a:	11db      	asrs	r3, r3, #7
 800441c:	b2db      	uxtb	r3, r3
 800441e:	f003 0306 	and.w	r3, r3, #6
 8004422:	b2db      	uxtb	r3, r3
 8004424:	f063 030f 	orn	r3, r3, #15
 8004428:	b2da      	uxtb	r2, r3
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004430:	683b      	ldr	r3, [r7, #0]
 8004432:	687a      	ldr	r2, [r7, #4]
 8004434:	4930      	ldr	r1, [pc, #192]	; (80044f8 <I2C_MasterRequestRead+0x194>)
 8004436:	68f8      	ldr	r0, [r7, #12]
 8004438:	f000 fa37 	bl	80048aa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800443c:	4603      	mov	r3, r0
 800443e:	2b00      	cmp	r3, #0
 8004440:	d001      	beq.n	8004446 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8004442:	2301      	movs	r3, #1
 8004444:	e054      	b.n	80044f0 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004446:	897b      	ldrh	r3, [r7, #10]
 8004448:	b2da      	uxtb	r2, r3
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004450:	683b      	ldr	r3, [r7, #0]
 8004452:	687a      	ldr	r2, [r7, #4]
 8004454:	4929      	ldr	r1, [pc, #164]	; (80044fc <I2C_MasterRequestRead+0x198>)
 8004456:	68f8      	ldr	r0, [r7, #12]
 8004458:	f000 fa27 	bl	80048aa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800445c:	4603      	mov	r3, r0
 800445e:	2b00      	cmp	r3, #0
 8004460:	d001      	beq.n	8004466 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8004462:	2301      	movs	r3, #1
 8004464:	e044      	b.n	80044f0 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004466:	2300      	movs	r3, #0
 8004468:	613b      	str	r3, [r7, #16]
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	695b      	ldr	r3, [r3, #20]
 8004470:	613b      	str	r3, [r7, #16]
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	699b      	ldr	r3, [r3, #24]
 8004478:	613b      	str	r3, [r7, #16]
 800447a:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	681a      	ldr	r2, [r3, #0]
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800448a:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800448c:	683b      	ldr	r3, [r7, #0]
 800448e:	9300      	str	r3, [sp, #0]
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	2200      	movs	r2, #0
 8004494:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004498:	68f8      	ldr	r0, [r7, #12]
 800449a:	f000 f9af 	bl	80047fc <I2C_WaitOnFlagUntilTimeout>
 800449e:	4603      	mov	r3, r0
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d00d      	beq.n	80044c0 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80044b2:	d103      	bne.n	80044bc <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80044ba:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 80044bc:	2303      	movs	r3, #3
 80044be:	e017      	b.n	80044f0 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80044c0:	897b      	ldrh	r3, [r7, #10]
 80044c2:	11db      	asrs	r3, r3, #7
 80044c4:	b2db      	uxtb	r3, r3
 80044c6:	f003 0306 	and.w	r3, r3, #6
 80044ca:	b2db      	uxtb	r3, r3
 80044cc:	f063 030e 	orn	r3, r3, #14
 80044d0:	b2da      	uxtb	r2, r3
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80044d8:	683b      	ldr	r3, [r7, #0]
 80044da:	687a      	ldr	r2, [r7, #4]
 80044dc:	4907      	ldr	r1, [pc, #28]	; (80044fc <I2C_MasterRequestRead+0x198>)
 80044de:	68f8      	ldr	r0, [r7, #12]
 80044e0:	f000 f9e3 	bl	80048aa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80044e4:	4603      	mov	r3, r0
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d001      	beq.n	80044ee <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 80044ea:	2301      	movs	r3, #1
 80044ec:	e000      	b.n	80044f0 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 80044ee:	2300      	movs	r3, #0
}
 80044f0:	4618      	mov	r0, r3
 80044f2:	3718      	adds	r7, #24
 80044f4:	46bd      	mov	sp, r7
 80044f6:	bd80      	pop	{r7, pc}
 80044f8:	00010008 	.word	0x00010008
 80044fc:	00010002 	.word	0x00010002

08004500 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004500:	b580      	push	{r7, lr}
 8004502:	b088      	sub	sp, #32
 8004504:	af02      	add	r7, sp, #8
 8004506:	60f8      	str	r0, [r7, #12]
 8004508:	4608      	mov	r0, r1
 800450a:	4611      	mov	r1, r2
 800450c:	461a      	mov	r2, r3
 800450e:	4603      	mov	r3, r0
 8004510:	817b      	strh	r3, [r7, #10]
 8004512:	460b      	mov	r3, r1
 8004514:	813b      	strh	r3, [r7, #8]
 8004516:	4613      	mov	r3, r2
 8004518:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	681a      	ldr	r2, [r3, #0]
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004528:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800452a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800452c:	9300      	str	r3, [sp, #0]
 800452e:	6a3b      	ldr	r3, [r7, #32]
 8004530:	2200      	movs	r2, #0
 8004532:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004536:	68f8      	ldr	r0, [r7, #12]
 8004538:	f000 f960 	bl	80047fc <I2C_WaitOnFlagUntilTimeout>
 800453c:	4603      	mov	r3, r0
 800453e:	2b00      	cmp	r3, #0
 8004540:	d00d      	beq.n	800455e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800454c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004550:	d103      	bne.n	800455a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004558:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800455a:	2303      	movs	r3, #3
 800455c:	e05f      	b.n	800461e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800455e:	897b      	ldrh	r3, [r7, #10]
 8004560:	b2db      	uxtb	r3, r3
 8004562:	461a      	mov	r2, r3
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800456c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800456e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004570:	6a3a      	ldr	r2, [r7, #32]
 8004572:	492d      	ldr	r1, [pc, #180]	; (8004628 <I2C_RequestMemoryWrite+0x128>)
 8004574:	68f8      	ldr	r0, [r7, #12]
 8004576:	f000 f998 	bl	80048aa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800457a:	4603      	mov	r3, r0
 800457c:	2b00      	cmp	r3, #0
 800457e:	d001      	beq.n	8004584 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004580:	2301      	movs	r3, #1
 8004582:	e04c      	b.n	800461e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004584:	2300      	movs	r3, #0
 8004586:	617b      	str	r3, [r7, #20]
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	695b      	ldr	r3, [r3, #20]
 800458e:	617b      	str	r3, [r7, #20]
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	699b      	ldr	r3, [r3, #24]
 8004596:	617b      	str	r3, [r7, #20]
 8004598:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800459a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800459c:	6a39      	ldr	r1, [r7, #32]
 800459e:	68f8      	ldr	r0, [r7, #12]
 80045a0:	f000 fa02 	bl	80049a8 <I2C_WaitOnTXEFlagUntilTimeout>
 80045a4:	4603      	mov	r3, r0
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d00d      	beq.n	80045c6 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045ae:	2b04      	cmp	r3, #4
 80045b0:	d107      	bne.n	80045c2 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	681a      	ldr	r2, [r3, #0]
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80045c0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80045c2:	2301      	movs	r3, #1
 80045c4:	e02b      	b.n	800461e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80045c6:	88fb      	ldrh	r3, [r7, #6]
 80045c8:	2b01      	cmp	r3, #1
 80045ca:	d105      	bne.n	80045d8 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80045cc:	893b      	ldrh	r3, [r7, #8]
 80045ce:	b2da      	uxtb	r2, r3
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	611a      	str	r2, [r3, #16]
 80045d6:	e021      	b.n	800461c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80045d8:	893b      	ldrh	r3, [r7, #8]
 80045da:	0a1b      	lsrs	r3, r3, #8
 80045dc:	b29b      	uxth	r3, r3
 80045de:	b2da      	uxtb	r2, r3
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80045e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80045e8:	6a39      	ldr	r1, [r7, #32]
 80045ea:	68f8      	ldr	r0, [r7, #12]
 80045ec:	f000 f9dc 	bl	80049a8 <I2C_WaitOnTXEFlagUntilTimeout>
 80045f0:	4603      	mov	r3, r0
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d00d      	beq.n	8004612 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045fa:	2b04      	cmp	r3, #4
 80045fc:	d107      	bne.n	800460e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	681a      	ldr	r2, [r3, #0]
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800460c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800460e:	2301      	movs	r3, #1
 8004610:	e005      	b.n	800461e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004612:	893b      	ldrh	r3, [r7, #8]
 8004614:	b2da      	uxtb	r2, r3
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800461c:	2300      	movs	r3, #0
}
 800461e:	4618      	mov	r0, r3
 8004620:	3718      	adds	r7, #24
 8004622:	46bd      	mov	sp, r7
 8004624:	bd80      	pop	{r7, pc}
 8004626:	bf00      	nop
 8004628:	00010002 	.word	0x00010002

0800462c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800462c:	b580      	push	{r7, lr}
 800462e:	b088      	sub	sp, #32
 8004630:	af02      	add	r7, sp, #8
 8004632:	60f8      	str	r0, [r7, #12]
 8004634:	4608      	mov	r0, r1
 8004636:	4611      	mov	r1, r2
 8004638:	461a      	mov	r2, r3
 800463a:	4603      	mov	r3, r0
 800463c:	817b      	strh	r3, [r7, #10]
 800463e:	460b      	mov	r3, r1
 8004640:	813b      	strh	r3, [r7, #8]
 8004642:	4613      	mov	r3, r2
 8004644:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	681a      	ldr	r2, [r3, #0]
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004654:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	681a      	ldr	r2, [r3, #0]
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004664:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004666:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004668:	9300      	str	r3, [sp, #0]
 800466a:	6a3b      	ldr	r3, [r7, #32]
 800466c:	2200      	movs	r2, #0
 800466e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004672:	68f8      	ldr	r0, [r7, #12]
 8004674:	f000 f8c2 	bl	80047fc <I2C_WaitOnFlagUntilTimeout>
 8004678:	4603      	mov	r3, r0
 800467a:	2b00      	cmp	r3, #0
 800467c:	d00d      	beq.n	800469a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004688:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800468c:	d103      	bne.n	8004696 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004694:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004696:	2303      	movs	r3, #3
 8004698:	e0aa      	b.n	80047f0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800469a:	897b      	ldrh	r3, [r7, #10]
 800469c:	b2db      	uxtb	r3, r3
 800469e:	461a      	mov	r2, r3
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80046a8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80046aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046ac:	6a3a      	ldr	r2, [r7, #32]
 80046ae:	4952      	ldr	r1, [pc, #328]	; (80047f8 <I2C_RequestMemoryRead+0x1cc>)
 80046b0:	68f8      	ldr	r0, [r7, #12]
 80046b2:	f000 f8fa 	bl	80048aa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80046b6:	4603      	mov	r3, r0
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d001      	beq.n	80046c0 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80046bc:	2301      	movs	r3, #1
 80046be:	e097      	b.n	80047f0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80046c0:	2300      	movs	r3, #0
 80046c2:	617b      	str	r3, [r7, #20]
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	695b      	ldr	r3, [r3, #20]
 80046ca:	617b      	str	r3, [r7, #20]
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	699b      	ldr	r3, [r3, #24]
 80046d2:	617b      	str	r3, [r7, #20]
 80046d4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80046d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80046d8:	6a39      	ldr	r1, [r7, #32]
 80046da:	68f8      	ldr	r0, [r7, #12]
 80046dc:	f000 f964 	bl	80049a8 <I2C_WaitOnTXEFlagUntilTimeout>
 80046e0:	4603      	mov	r3, r0
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d00d      	beq.n	8004702 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046ea:	2b04      	cmp	r3, #4
 80046ec:	d107      	bne.n	80046fe <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	681a      	ldr	r2, [r3, #0]
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80046fc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80046fe:	2301      	movs	r3, #1
 8004700:	e076      	b.n	80047f0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004702:	88fb      	ldrh	r3, [r7, #6]
 8004704:	2b01      	cmp	r3, #1
 8004706:	d105      	bne.n	8004714 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004708:	893b      	ldrh	r3, [r7, #8]
 800470a:	b2da      	uxtb	r2, r3
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	611a      	str	r2, [r3, #16]
 8004712:	e021      	b.n	8004758 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004714:	893b      	ldrh	r3, [r7, #8]
 8004716:	0a1b      	lsrs	r3, r3, #8
 8004718:	b29b      	uxth	r3, r3
 800471a:	b2da      	uxtb	r2, r3
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004722:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004724:	6a39      	ldr	r1, [r7, #32]
 8004726:	68f8      	ldr	r0, [r7, #12]
 8004728:	f000 f93e 	bl	80049a8 <I2C_WaitOnTXEFlagUntilTimeout>
 800472c:	4603      	mov	r3, r0
 800472e:	2b00      	cmp	r3, #0
 8004730:	d00d      	beq.n	800474e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004736:	2b04      	cmp	r3, #4
 8004738:	d107      	bne.n	800474a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	681a      	ldr	r2, [r3, #0]
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004748:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800474a:	2301      	movs	r3, #1
 800474c:	e050      	b.n	80047f0 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800474e:	893b      	ldrh	r3, [r7, #8]
 8004750:	b2da      	uxtb	r2, r3
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004758:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800475a:	6a39      	ldr	r1, [r7, #32]
 800475c:	68f8      	ldr	r0, [r7, #12]
 800475e:	f000 f923 	bl	80049a8 <I2C_WaitOnTXEFlagUntilTimeout>
 8004762:	4603      	mov	r3, r0
 8004764:	2b00      	cmp	r3, #0
 8004766:	d00d      	beq.n	8004784 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800476c:	2b04      	cmp	r3, #4
 800476e:	d107      	bne.n	8004780 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	681a      	ldr	r2, [r3, #0]
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800477e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004780:	2301      	movs	r3, #1
 8004782:	e035      	b.n	80047f0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	681a      	ldr	r2, [r3, #0]
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004792:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004794:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004796:	9300      	str	r3, [sp, #0]
 8004798:	6a3b      	ldr	r3, [r7, #32]
 800479a:	2200      	movs	r2, #0
 800479c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80047a0:	68f8      	ldr	r0, [r7, #12]
 80047a2:	f000 f82b 	bl	80047fc <I2C_WaitOnFlagUntilTimeout>
 80047a6:	4603      	mov	r3, r0
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d00d      	beq.n	80047c8 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80047ba:	d103      	bne.n	80047c4 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	f44f 7200 	mov.w	r2, #512	; 0x200
 80047c2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80047c4:	2303      	movs	r3, #3
 80047c6:	e013      	b.n	80047f0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80047c8:	897b      	ldrh	r3, [r7, #10]
 80047ca:	b2db      	uxtb	r3, r3
 80047cc:	f043 0301 	orr.w	r3, r3, #1
 80047d0:	b2da      	uxtb	r2, r3
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80047d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047da:	6a3a      	ldr	r2, [r7, #32]
 80047dc:	4906      	ldr	r1, [pc, #24]	; (80047f8 <I2C_RequestMemoryRead+0x1cc>)
 80047de:	68f8      	ldr	r0, [r7, #12]
 80047e0:	f000 f863 	bl	80048aa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80047e4:	4603      	mov	r3, r0
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d001      	beq.n	80047ee <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80047ea:	2301      	movs	r3, #1
 80047ec:	e000      	b.n	80047f0 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80047ee:	2300      	movs	r3, #0
}
 80047f0:	4618      	mov	r0, r3
 80047f2:	3718      	adds	r7, #24
 80047f4:	46bd      	mov	sp, r7
 80047f6:	bd80      	pop	{r7, pc}
 80047f8:	00010002 	.word	0x00010002

080047fc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80047fc:	b580      	push	{r7, lr}
 80047fe:	b084      	sub	sp, #16
 8004800:	af00      	add	r7, sp, #0
 8004802:	60f8      	str	r0, [r7, #12]
 8004804:	60b9      	str	r1, [r7, #8]
 8004806:	603b      	str	r3, [r7, #0]
 8004808:	4613      	mov	r3, r2
 800480a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800480c:	e025      	b.n	800485a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800480e:	683b      	ldr	r3, [r7, #0]
 8004810:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004814:	d021      	beq.n	800485a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004816:	f7fe fa71 	bl	8002cfc <HAL_GetTick>
 800481a:	4602      	mov	r2, r0
 800481c:	69bb      	ldr	r3, [r7, #24]
 800481e:	1ad3      	subs	r3, r2, r3
 8004820:	683a      	ldr	r2, [r7, #0]
 8004822:	429a      	cmp	r2, r3
 8004824:	d302      	bcc.n	800482c <I2C_WaitOnFlagUntilTimeout+0x30>
 8004826:	683b      	ldr	r3, [r7, #0]
 8004828:	2b00      	cmp	r3, #0
 800482a:	d116      	bne.n	800485a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	2200      	movs	r2, #0
 8004830:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	2220      	movs	r2, #32
 8004836:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	2200      	movs	r2, #0
 800483e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004846:	f043 0220 	orr.w	r2, r3, #32
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	2200      	movs	r2, #0
 8004852:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004856:	2301      	movs	r3, #1
 8004858:	e023      	b.n	80048a2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800485a:	68bb      	ldr	r3, [r7, #8]
 800485c:	0c1b      	lsrs	r3, r3, #16
 800485e:	b2db      	uxtb	r3, r3
 8004860:	2b01      	cmp	r3, #1
 8004862:	d10d      	bne.n	8004880 <I2C_WaitOnFlagUntilTimeout+0x84>
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	695b      	ldr	r3, [r3, #20]
 800486a:	43da      	mvns	r2, r3
 800486c:	68bb      	ldr	r3, [r7, #8]
 800486e:	4013      	ands	r3, r2
 8004870:	b29b      	uxth	r3, r3
 8004872:	2b00      	cmp	r3, #0
 8004874:	bf0c      	ite	eq
 8004876:	2301      	moveq	r3, #1
 8004878:	2300      	movne	r3, #0
 800487a:	b2db      	uxtb	r3, r3
 800487c:	461a      	mov	r2, r3
 800487e:	e00c      	b.n	800489a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	699b      	ldr	r3, [r3, #24]
 8004886:	43da      	mvns	r2, r3
 8004888:	68bb      	ldr	r3, [r7, #8]
 800488a:	4013      	ands	r3, r2
 800488c:	b29b      	uxth	r3, r3
 800488e:	2b00      	cmp	r3, #0
 8004890:	bf0c      	ite	eq
 8004892:	2301      	moveq	r3, #1
 8004894:	2300      	movne	r3, #0
 8004896:	b2db      	uxtb	r3, r3
 8004898:	461a      	mov	r2, r3
 800489a:	79fb      	ldrb	r3, [r7, #7]
 800489c:	429a      	cmp	r2, r3
 800489e:	d0b6      	beq.n	800480e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80048a0:	2300      	movs	r3, #0
}
 80048a2:	4618      	mov	r0, r3
 80048a4:	3710      	adds	r7, #16
 80048a6:	46bd      	mov	sp, r7
 80048a8:	bd80      	pop	{r7, pc}

080048aa <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80048aa:	b580      	push	{r7, lr}
 80048ac:	b084      	sub	sp, #16
 80048ae:	af00      	add	r7, sp, #0
 80048b0:	60f8      	str	r0, [r7, #12]
 80048b2:	60b9      	str	r1, [r7, #8]
 80048b4:	607a      	str	r2, [r7, #4]
 80048b6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80048b8:	e051      	b.n	800495e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	695b      	ldr	r3, [r3, #20]
 80048c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80048c4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80048c8:	d123      	bne.n	8004912 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	681a      	ldr	r2, [r3, #0]
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80048d8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80048e2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	2200      	movs	r2, #0
 80048e8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	2220      	movs	r2, #32
 80048ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	2200      	movs	r2, #0
 80048f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048fe:	f043 0204 	orr.w	r2, r3, #4
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	2200      	movs	r2, #0
 800490a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800490e:	2301      	movs	r3, #1
 8004910:	e046      	b.n	80049a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004918:	d021      	beq.n	800495e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800491a:	f7fe f9ef 	bl	8002cfc <HAL_GetTick>
 800491e:	4602      	mov	r2, r0
 8004920:	683b      	ldr	r3, [r7, #0]
 8004922:	1ad3      	subs	r3, r2, r3
 8004924:	687a      	ldr	r2, [r7, #4]
 8004926:	429a      	cmp	r2, r3
 8004928:	d302      	bcc.n	8004930 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	2b00      	cmp	r3, #0
 800492e:	d116      	bne.n	800495e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	2200      	movs	r2, #0
 8004934:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	2220      	movs	r2, #32
 800493a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	2200      	movs	r2, #0
 8004942:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800494a:	f043 0220 	orr.w	r2, r3, #32
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	2200      	movs	r2, #0
 8004956:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800495a:	2301      	movs	r3, #1
 800495c:	e020      	b.n	80049a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800495e:	68bb      	ldr	r3, [r7, #8]
 8004960:	0c1b      	lsrs	r3, r3, #16
 8004962:	b2db      	uxtb	r3, r3
 8004964:	2b01      	cmp	r3, #1
 8004966:	d10c      	bne.n	8004982 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	695b      	ldr	r3, [r3, #20]
 800496e:	43da      	mvns	r2, r3
 8004970:	68bb      	ldr	r3, [r7, #8]
 8004972:	4013      	ands	r3, r2
 8004974:	b29b      	uxth	r3, r3
 8004976:	2b00      	cmp	r3, #0
 8004978:	bf14      	ite	ne
 800497a:	2301      	movne	r3, #1
 800497c:	2300      	moveq	r3, #0
 800497e:	b2db      	uxtb	r3, r3
 8004980:	e00b      	b.n	800499a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	699b      	ldr	r3, [r3, #24]
 8004988:	43da      	mvns	r2, r3
 800498a:	68bb      	ldr	r3, [r7, #8]
 800498c:	4013      	ands	r3, r2
 800498e:	b29b      	uxth	r3, r3
 8004990:	2b00      	cmp	r3, #0
 8004992:	bf14      	ite	ne
 8004994:	2301      	movne	r3, #1
 8004996:	2300      	moveq	r3, #0
 8004998:	b2db      	uxtb	r3, r3
 800499a:	2b00      	cmp	r3, #0
 800499c:	d18d      	bne.n	80048ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800499e:	2300      	movs	r3, #0
}
 80049a0:	4618      	mov	r0, r3
 80049a2:	3710      	adds	r7, #16
 80049a4:	46bd      	mov	sp, r7
 80049a6:	bd80      	pop	{r7, pc}

080049a8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80049a8:	b580      	push	{r7, lr}
 80049aa:	b084      	sub	sp, #16
 80049ac:	af00      	add	r7, sp, #0
 80049ae:	60f8      	str	r0, [r7, #12]
 80049b0:	60b9      	str	r1, [r7, #8]
 80049b2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80049b4:	e02d      	b.n	8004a12 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80049b6:	68f8      	ldr	r0, [r7, #12]
 80049b8:	f000 f8ce 	bl	8004b58 <I2C_IsAcknowledgeFailed>
 80049bc:	4603      	mov	r3, r0
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d001      	beq.n	80049c6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80049c2:	2301      	movs	r3, #1
 80049c4:	e02d      	b.n	8004a22 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80049c6:	68bb      	ldr	r3, [r7, #8]
 80049c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049cc:	d021      	beq.n	8004a12 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80049ce:	f7fe f995 	bl	8002cfc <HAL_GetTick>
 80049d2:	4602      	mov	r2, r0
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	1ad3      	subs	r3, r2, r3
 80049d8:	68ba      	ldr	r2, [r7, #8]
 80049da:	429a      	cmp	r2, r3
 80049dc:	d302      	bcc.n	80049e4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80049de:	68bb      	ldr	r3, [r7, #8]
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d116      	bne.n	8004a12 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	2200      	movs	r2, #0
 80049e8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	2220      	movs	r2, #32
 80049ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	2200      	movs	r2, #0
 80049f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049fe:	f043 0220 	orr.w	r2, r3, #32
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	2200      	movs	r2, #0
 8004a0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004a0e:	2301      	movs	r3, #1
 8004a10:	e007      	b.n	8004a22 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	695b      	ldr	r3, [r3, #20]
 8004a18:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a1c:	2b80      	cmp	r3, #128	; 0x80
 8004a1e:	d1ca      	bne.n	80049b6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004a20:	2300      	movs	r3, #0
}
 8004a22:	4618      	mov	r0, r3
 8004a24:	3710      	adds	r7, #16
 8004a26:	46bd      	mov	sp, r7
 8004a28:	bd80      	pop	{r7, pc}

08004a2a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004a2a:	b580      	push	{r7, lr}
 8004a2c:	b084      	sub	sp, #16
 8004a2e:	af00      	add	r7, sp, #0
 8004a30:	60f8      	str	r0, [r7, #12]
 8004a32:	60b9      	str	r1, [r7, #8]
 8004a34:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004a36:	e02d      	b.n	8004a94 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004a38:	68f8      	ldr	r0, [r7, #12]
 8004a3a:	f000 f88d 	bl	8004b58 <I2C_IsAcknowledgeFailed>
 8004a3e:	4603      	mov	r3, r0
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d001      	beq.n	8004a48 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004a44:	2301      	movs	r3, #1
 8004a46:	e02d      	b.n	8004aa4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a48:	68bb      	ldr	r3, [r7, #8]
 8004a4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a4e:	d021      	beq.n	8004a94 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a50:	f7fe f954 	bl	8002cfc <HAL_GetTick>
 8004a54:	4602      	mov	r2, r0
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	1ad3      	subs	r3, r2, r3
 8004a5a:	68ba      	ldr	r2, [r7, #8]
 8004a5c:	429a      	cmp	r2, r3
 8004a5e:	d302      	bcc.n	8004a66 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004a60:	68bb      	ldr	r3, [r7, #8]
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d116      	bne.n	8004a94 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	2200      	movs	r2, #0
 8004a6a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	2220      	movs	r2, #32
 8004a70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	2200      	movs	r2, #0
 8004a78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a80:	f043 0220 	orr.w	r2, r3, #32
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	2200      	movs	r2, #0
 8004a8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004a90:	2301      	movs	r3, #1
 8004a92:	e007      	b.n	8004aa4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	695b      	ldr	r3, [r3, #20]
 8004a9a:	f003 0304 	and.w	r3, r3, #4
 8004a9e:	2b04      	cmp	r3, #4
 8004aa0:	d1ca      	bne.n	8004a38 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004aa2:	2300      	movs	r3, #0
}
 8004aa4:	4618      	mov	r0, r3
 8004aa6:	3710      	adds	r7, #16
 8004aa8:	46bd      	mov	sp, r7
 8004aaa:	bd80      	pop	{r7, pc}

08004aac <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004aac:	b580      	push	{r7, lr}
 8004aae:	b084      	sub	sp, #16
 8004ab0:	af00      	add	r7, sp, #0
 8004ab2:	60f8      	str	r0, [r7, #12]
 8004ab4:	60b9      	str	r1, [r7, #8]
 8004ab6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004ab8:	e042      	b.n	8004b40 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	695b      	ldr	r3, [r3, #20]
 8004ac0:	f003 0310 	and.w	r3, r3, #16
 8004ac4:	2b10      	cmp	r3, #16
 8004ac6:	d119      	bne.n	8004afc <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	f06f 0210 	mvn.w	r2, #16
 8004ad0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	2200      	movs	r2, #0
 8004ad6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	2220      	movs	r2, #32
 8004adc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	2200      	movs	r2, #0
 8004ae4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	2200      	movs	r2, #0
 8004af4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004af8:	2301      	movs	r3, #1
 8004afa:	e029      	b.n	8004b50 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004afc:	f7fe f8fe 	bl	8002cfc <HAL_GetTick>
 8004b00:	4602      	mov	r2, r0
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	1ad3      	subs	r3, r2, r3
 8004b06:	68ba      	ldr	r2, [r7, #8]
 8004b08:	429a      	cmp	r2, r3
 8004b0a:	d302      	bcc.n	8004b12 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004b0c:	68bb      	ldr	r3, [r7, #8]
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d116      	bne.n	8004b40 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	2200      	movs	r2, #0
 8004b16:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	2220      	movs	r2, #32
 8004b1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	2200      	movs	r2, #0
 8004b24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b2c:	f043 0220 	orr.w	r2, r3, #32
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	2200      	movs	r2, #0
 8004b38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004b3c:	2301      	movs	r3, #1
 8004b3e:	e007      	b.n	8004b50 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	695b      	ldr	r3, [r3, #20]
 8004b46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b4a:	2b40      	cmp	r3, #64	; 0x40
 8004b4c:	d1b5      	bne.n	8004aba <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004b4e:	2300      	movs	r3, #0
}
 8004b50:	4618      	mov	r0, r3
 8004b52:	3710      	adds	r7, #16
 8004b54:	46bd      	mov	sp, r7
 8004b56:	bd80      	pop	{r7, pc}

08004b58 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004b58:	b480      	push	{r7}
 8004b5a:	b083      	sub	sp, #12
 8004b5c:	af00      	add	r7, sp, #0
 8004b5e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	695b      	ldr	r3, [r3, #20]
 8004b66:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b6a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b6e:	d11b      	bne.n	8004ba8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004b78:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	2200      	movs	r2, #0
 8004b7e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	2220      	movs	r2, #32
 8004b84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	2200      	movs	r2, #0
 8004b8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b94:	f043 0204 	orr.w	r2, r3, #4
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	2200      	movs	r2, #0
 8004ba0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004ba4:	2301      	movs	r3, #1
 8004ba6:	e000      	b.n	8004baa <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004ba8:	2300      	movs	r3, #0
}
 8004baa:	4618      	mov	r0, r3
 8004bac:	370c      	adds	r7, #12
 8004bae:	46bd      	mov	sp, r7
 8004bb0:	bc80      	pop	{r7}
 8004bb2:	4770      	bx	lr

08004bb4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004bb4:	b580      	push	{r7, lr}
 8004bb6:	b086      	sub	sp, #24
 8004bb8:	af00      	add	r7, sp, #0
 8004bba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d101      	bne.n	8004bc6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004bc2:	2301      	movs	r3, #1
 8004bc4:	e272      	b.n	80050ac <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	f003 0301 	and.w	r3, r3, #1
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	f000 8087 	beq.w	8004ce2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004bd4:	4b92      	ldr	r3, [pc, #584]	; (8004e20 <HAL_RCC_OscConfig+0x26c>)
 8004bd6:	685b      	ldr	r3, [r3, #4]
 8004bd8:	f003 030c 	and.w	r3, r3, #12
 8004bdc:	2b04      	cmp	r3, #4
 8004bde:	d00c      	beq.n	8004bfa <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004be0:	4b8f      	ldr	r3, [pc, #572]	; (8004e20 <HAL_RCC_OscConfig+0x26c>)
 8004be2:	685b      	ldr	r3, [r3, #4]
 8004be4:	f003 030c 	and.w	r3, r3, #12
 8004be8:	2b08      	cmp	r3, #8
 8004bea:	d112      	bne.n	8004c12 <HAL_RCC_OscConfig+0x5e>
 8004bec:	4b8c      	ldr	r3, [pc, #560]	; (8004e20 <HAL_RCC_OscConfig+0x26c>)
 8004bee:	685b      	ldr	r3, [r3, #4]
 8004bf0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004bf4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004bf8:	d10b      	bne.n	8004c12 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004bfa:	4b89      	ldr	r3, [pc, #548]	; (8004e20 <HAL_RCC_OscConfig+0x26c>)
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d06c      	beq.n	8004ce0 <HAL_RCC_OscConfig+0x12c>
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	685b      	ldr	r3, [r3, #4]
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d168      	bne.n	8004ce0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004c0e:	2301      	movs	r3, #1
 8004c10:	e24c      	b.n	80050ac <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	685b      	ldr	r3, [r3, #4]
 8004c16:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c1a:	d106      	bne.n	8004c2a <HAL_RCC_OscConfig+0x76>
 8004c1c:	4b80      	ldr	r3, [pc, #512]	; (8004e20 <HAL_RCC_OscConfig+0x26c>)
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	4a7f      	ldr	r2, [pc, #508]	; (8004e20 <HAL_RCC_OscConfig+0x26c>)
 8004c22:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c26:	6013      	str	r3, [r2, #0]
 8004c28:	e02e      	b.n	8004c88 <HAL_RCC_OscConfig+0xd4>
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	685b      	ldr	r3, [r3, #4]
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d10c      	bne.n	8004c4c <HAL_RCC_OscConfig+0x98>
 8004c32:	4b7b      	ldr	r3, [pc, #492]	; (8004e20 <HAL_RCC_OscConfig+0x26c>)
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	4a7a      	ldr	r2, [pc, #488]	; (8004e20 <HAL_RCC_OscConfig+0x26c>)
 8004c38:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004c3c:	6013      	str	r3, [r2, #0]
 8004c3e:	4b78      	ldr	r3, [pc, #480]	; (8004e20 <HAL_RCC_OscConfig+0x26c>)
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	4a77      	ldr	r2, [pc, #476]	; (8004e20 <HAL_RCC_OscConfig+0x26c>)
 8004c44:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004c48:	6013      	str	r3, [r2, #0]
 8004c4a:	e01d      	b.n	8004c88 <HAL_RCC_OscConfig+0xd4>
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	685b      	ldr	r3, [r3, #4]
 8004c50:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004c54:	d10c      	bne.n	8004c70 <HAL_RCC_OscConfig+0xbc>
 8004c56:	4b72      	ldr	r3, [pc, #456]	; (8004e20 <HAL_RCC_OscConfig+0x26c>)
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	4a71      	ldr	r2, [pc, #452]	; (8004e20 <HAL_RCC_OscConfig+0x26c>)
 8004c5c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004c60:	6013      	str	r3, [r2, #0]
 8004c62:	4b6f      	ldr	r3, [pc, #444]	; (8004e20 <HAL_RCC_OscConfig+0x26c>)
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	4a6e      	ldr	r2, [pc, #440]	; (8004e20 <HAL_RCC_OscConfig+0x26c>)
 8004c68:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c6c:	6013      	str	r3, [r2, #0]
 8004c6e:	e00b      	b.n	8004c88 <HAL_RCC_OscConfig+0xd4>
 8004c70:	4b6b      	ldr	r3, [pc, #428]	; (8004e20 <HAL_RCC_OscConfig+0x26c>)
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	4a6a      	ldr	r2, [pc, #424]	; (8004e20 <HAL_RCC_OscConfig+0x26c>)
 8004c76:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004c7a:	6013      	str	r3, [r2, #0]
 8004c7c:	4b68      	ldr	r3, [pc, #416]	; (8004e20 <HAL_RCC_OscConfig+0x26c>)
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	4a67      	ldr	r2, [pc, #412]	; (8004e20 <HAL_RCC_OscConfig+0x26c>)
 8004c82:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004c86:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	685b      	ldr	r3, [r3, #4]
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d013      	beq.n	8004cb8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c90:	f7fe f834 	bl	8002cfc <HAL_GetTick>
 8004c94:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c96:	e008      	b.n	8004caa <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004c98:	f7fe f830 	bl	8002cfc <HAL_GetTick>
 8004c9c:	4602      	mov	r2, r0
 8004c9e:	693b      	ldr	r3, [r7, #16]
 8004ca0:	1ad3      	subs	r3, r2, r3
 8004ca2:	2b64      	cmp	r3, #100	; 0x64
 8004ca4:	d901      	bls.n	8004caa <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004ca6:	2303      	movs	r3, #3
 8004ca8:	e200      	b.n	80050ac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004caa:	4b5d      	ldr	r3, [pc, #372]	; (8004e20 <HAL_RCC_OscConfig+0x26c>)
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d0f0      	beq.n	8004c98 <HAL_RCC_OscConfig+0xe4>
 8004cb6:	e014      	b.n	8004ce2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004cb8:	f7fe f820 	bl	8002cfc <HAL_GetTick>
 8004cbc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004cbe:	e008      	b.n	8004cd2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004cc0:	f7fe f81c 	bl	8002cfc <HAL_GetTick>
 8004cc4:	4602      	mov	r2, r0
 8004cc6:	693b      	ldr	r3, [r7, #16]
 8004cc8:	1ad3      	subs	r3, r2, r3
 8004cca:	2b64      	cmp	r3, #100	; 0x64
 8004ccc:	d901      	bls.n	8004cd2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004cce:	2303      	movs	r3, #3
 8004cd0:	e1ec      	b.n	80050ac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004cd2:	4b53      	ldr	r3, [pc, #332]	; (8004e20 <HAL_RCC_OscConfig+0x26c>)
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d1f0      	bne.n	8004cc0 <HAL_RCC_OscConfig+0x10c>
 8004cde:	e000      	b.n	8004ce2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ce0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	f003 0302 	and.w	r3, r3, #2
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d063      	beq.n	8004db6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004cee:	4b4c      	ldr	r3, [pc, #304]	; (8004e20 <HAL_RCC_OscConfig+0x26c>)
 8004cf0:	685b      	ldr	r3, [r3, #4]
 8004cf2:	f003 030c 	and.w	r3, r3, #12
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d00b      	beq.n	8004d12 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004cfa:	4b49      	ldr	r3, [pc, #292]	; (8004e20 <HAL_RCC_OscConfig+0x26c>)
 8004cfc:	685b      	ldr	r3, [r3, #4]
 8004cfe:	f003 030c 	and.w	r3, r3, #12
 8004d02:	2b08      	cmp	r3, #8
 8004d04:	d11c      	bne.n	8004d40 <HAL_RCC_OscConfig+0x18c>
 8004d06:	4b46      	ldr	r3, [pc, #280]	; (8004e20 <HAL_RCC_OscConfig+0x26c>)
 8004d08:	685b      	ldr	r3, [r3, #4]
 8004d0a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d116      	bne.n	8004d40 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004d12:	4b43      	ldr	r3, [pc, #268]	; (8004e20 <HAL_RCC_OscConfig+0x26c>)
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	f003 0302 	and.w	r3, r3, #2
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d005      	beq.n	8004d2a <HAL_RCC_OscConfig+0x176>
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	691b      	ldr	r3, [r3, #16]
 8004d22:	2b01      	cmp	r3, #1
 8004d24:	d001      	beq.n	8004d2a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8004d26:	2301      	movs	r3, #1
 8004d28:	e1c0      	b.n	80050ac <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d2a:	4b3d      	ldr	r3, [pc, #244]	; (8004e20 <HAL_RCC_OscConfig+0x26c>)
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	695b      	ldr	r3, [r3, #20]
 8004d36:	00db      	lsls	r3, r3, #3
 8004d38:	4939      	ldr	r1, [pc, #228]	; (8004e20 <HAL_RCC_OscConfig+0x26c>)
 8004d3a:	4313      	orrs	r3, r2
 8004d3c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004d3e:	e03a      	b.n	8004db6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	691b      	ldr	r3, [r3, #16]
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d020      	beq.n	8004d8a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004d48:	4b36      	ldr	r3, [pc, #216]	; (8004e24 <HAL_RCC_OscConfig+0x270>)
 8004d4a:	2201      	movs	r2, #1
 8004d4c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d4e:	f7fd ffd5 	bl	8002cfc <HAL_GetTick>
 8004d52:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d54:	e008      	b.n	8004d68 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004d56:	f7fd ffd1 	bl	8002cfc <HAL_GetTick>
 8004d5a:	4602      	mov	r2, r0
 8004d5c:	693b      	ldr	r3, [r7, #16]
 8004d5e:	1ad3      	subs	r3, r2, r3
 8004d60:	2b02      	cmp	r3, #2
 8004d62:	d901      	bls.n	8004d68 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004d64:	2303      	movs	r3, #3
 8004d66:	e1a1      	b.n	80050ac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d68:	4b2d      	ldr	r3, [pc, #180]	; (8004e20 <HAL_RCC_OscConfig+0x26c>)
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	f003 0302 	and.w	r3, r3, #2
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d0f0      	beq.n	8004d56 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d74:	4b2a      	ldr	r3, [pc, #168]	; (8004e20 <HAL_RCC_OscConfig+0x26c>)
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	695b      	ldr	r3, [r3, #20]
 8004d80:	00db      	lsls	r3, r3, #3
 8004d82:	4927      	ldr	r1, [pc, #156]	; (8004e20 <HAL_RCC_OscConfig+0x26c>)
 8004d84:	4313      	orrs	r3, r2
 8004d86:	600b      	str	r3, [r1, #0]
 8004d88:	e015      	b.n	8004db6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004d8a:	4b26      	ldr	r3, [pc, #152]	; (8004e24 <HAL_RCC_OscConfig+0x270>)
 8004d8c:	2200      	movs	r2, #0
 8004d8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d90:	f7fd ffb4 	bl	8002cfc <HAL_GetTick>
 8004d94:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004d96:	e008      	b.n	8004daa <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004d98:	f7fd ffb0 	bl	8002cfc <HAL_GetTick>
 8004d9c:	4602      	mov	r2, r0
 8004d9e:	693b      	ldr	r3, [r7, #16]
 8004da0:	1ad3      	subs	r3, r2, r3
 8004da2:	2b02      	cmp	r3, #2
 8004da4:	d901      	bls.n	8004daa <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8004da6:	2303      	movs	r3, #3
 8004da8:	e180      	b.n	80050ac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004daa:	4b1d      	ldr	r3, [pc, #116]	; (8004e20 <HAL_RCC_OscConfig+0x26c>)
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	f003 0302 	and.w	r3, r3, #2
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d1f0      	bne.n	8004d98 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	f003 0308 	and.w	r3, r3, #8
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d03a      	beq.n	8004e38 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	699b      	ldr	r3, [r3, #24]
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d019      	beq.n	8004dfe <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004dca:	4b17      	ldr	r3, [pc, #92]	; (8004e28 <HAL_RCC_OscConfig+0x274>)
 8004dcc:	2201      	movs	r2, #1
 8004dce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004dd0:	f7fd ff94 	bl	8002cfc <HAL_GetTick>
 8004dd4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004dd6:	e008      	b.n	8004dea <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004dd8:	f7fd ff90 	bl	8002cfc <HAL_GetTick>
 8004ddc:	4602      	mov	r2, r0
 8004dde:	693b      	ldr	r3, [r7, #16]
 8004de0:	1ad3      	subs	r3, r2, r3
 8004de2:	2b02      	cmp	r3, #2
 8004de4:	d901      	bls.n	8004dea <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8004de6:	2303      	movs	r3, #3
 8004de8:	e160      	b.n	80050ac <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004dea:	4b0d      	ldr	r3, [pc, #52]	; (8004e20 <HAL_RCC_OscConfig+0x26c>)
 8004dec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dee:	f003 0302 	and.w	r3, r3, #2
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d0f0      	beq.n	8004dd8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8004df6:	2001      	movs	r0, #1
 8004df8:	f000 fad8 	bl	80053ac <RCC_Delay>
 8004dfc:	e01c      	b.n	8004e38 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004dfe:	4b0a      	ldr	r3, [pc, #40]	; (8004e28 <HAL_RCC_OscConfig+0x274>)
 8004e00:	2200      	movs	r2, #0
 8004e02:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004e04:	f7fd ff7a 	bl	8002cfc <HAL_GetTick>
 8004e08:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004e0a:	e00f      	b.n	8004e2c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004e0c:	f7fd ff76 	bl	8002cfc <HAL_GetTick>
 8004e10:	4602      	mov	r2, r0
 8004e12:	693b      	ldr	r3, [r7, #16]
 8004e14:	1ad3      	subs	r3, r2, r3
 8004e16:	2b02      	cmp	r3, #2
 8004e18:	d908      	bls.n	8004e2c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004e1a:	2303      	movs	r3, #3
 8004e1c:	e146      	b.n	80050ac <HAL_RCC_OscConfig+0x4f8>
 8004e1e:	bf00      	nop
 8004e20:	40021000 	.word	0x40021000
 8004e24:	42420000 	.word	0x42420000
 8004e28:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004e2c:	4b92      	ldr	r3, [pc, #584]	; (8005078 <HAL_RCC_OscConfig+0x4c4>)
 8004e2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e30:	f003 0302 	and.w	r3, r3, #2
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d1e9      	bne.n	8004e0c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	f003 0304 	and.w	r3, r3, #4
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	f000 80a6 	beq.w	8004f92 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004e46:	2300      	movs	r3, #0
 8004e48:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004e4a:	4b8b      	ldr	r3, [pc, #556]	; (8005078 <HAL_RCC_OscConfig+0x4c4>)
 8004e4c:	69db      	ldr	r3, [r3, #28]
 8004e4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d10d      	bne.n	8004e72 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004e56:	4b88      	ldr	r3, [pc, #544]	; (8005078 <HAL_RCC_OscConfig+0x4c4>)
 8004e58:	69db      	ldr	r3, [r3, #28]
 8004e5a:	4a87      	ldr	r2, [pc, #540]	; (8005078 <HAL_RCC_OscConfig+0x4c4>)
 8004e5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e60:	61d3      	str	r3, [r2, #28]
 8004e62:	4b85      	ldr	r3, [pc, #532]	; (8005078 <HAL_RCC_OscConfig+0x4c4>)
 8004e64:	69db      	ldr	r3, [r3, #28]
 8004e66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e6a:	60bb      	str	r3, [r7, #8]
 8004e6c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004e6e:	2301      	movs	r3, #1
 8004e70:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e72:	4b82      	ldr	r3, [pc, #520]	; (800507c <HAL_RCC_OscConfig+0x4c8>)
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d118      	bne.n	8004eb0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004e7e:	4b7f      	ldr	r3, [pc, #508]	; (800507c <HAL_RCC_OscConfig+0x4c8>)
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	4a7e      	ldr	r2, [pc, #504]	; (800507c <HAL_RCC_OscConfig+0x4c8>)
 8004e84:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e88:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004e8a:	f7fd ff37 	bl	8002cfc <HAL_GetTick>
 8004e8e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e90:	e008      	b.n	8004ea4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004e92:	f7fd ff33 	bl	8002cfc <HAL_GetTick>
 8004e96:	4602      	mov	r2, r0
 8004e98:	693b      	ldr	r3, [r7, #16]
 8004e9a:	1ad3      	subs	r3, r2, r3
 8004e9c:	2b64      	cmp	r3, #100	; 0x64
 8004e9e:	d901      	bls.n	8004ea4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004ea0:	2303      	movs	r3, #3
 8004ea2:	e103      	b.n	80050ac <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ea4:	4b75      	ldr	r3, [pc, #468]	; (800507c <HAL_RCC_OscConfig+0x4c8>)
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d0f0      	beq.n	8004e92 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	68db      	ldr	r3, [r3, #12]
 8004eb4:	2b01      	cmp	r3, #1
 8004eb6:	d106      	bne.n	8004ec6 <HAL_RCC_OscConfig+0x312>
 8004eb8:	4b6f      	ldr	r3, [pc, #444]	; (8005078 <HAL_RCC_OscConfig+0x4c4>)
 8004eba:	6a1b      	ldr	r3, [r3, #32]
 8004ebc:	4a6e      	ldr	r2, [pc, #440]	; (8005078 <HAL_RCC_OscConfig+0x4c4>)
 8004ebe:	f043 0301 	orr.w	r3, r3, #1
 8004ec2:	6213      	str	r3, [r2, #32]
 8004ec4:	e02d      	b.n	8004f22 <HAL_RCC_OscConfig+0x36e>
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	68db      	ldr	r3, [r3, #12]
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d10c      	bne.n	8004ee8 <HAL_RCC_OscConfig+0x334>
 8004ece:	4b6a      	ldr	r3, [pc, #424]	; (8005078 <HAL_RCC_OscConfig+0x4c4>)
 8004ed0:	6a1b      	ldr	r3, [r3, #32]
 8004ed2:	4a69      	ldr	r2, [pc, #420]	; (8005078 <HAL_RCC_OscConfig+0x4c4>)
 8004ed4:	f023 0301 	bic.w	r3, r3, #1
 8004ed8:	6213      	str	r3, [r2, #32]
 8004eda:	4b67      	ldr	r3, [pc, #412]	; (8005078 <HAL_RCC_OscConfig+0x4c4>)
 8004edc:	6a1b      	ldr	r3, [r3, #32]
 8004ede:	4a66      	ldr	r2, [pc, #408]	; (8005078 <HAL_RCC_OscConfig+0x4c4>)
 8004ee0:	f023 0304 	bic.w	r3, r3, #4
 8004ee4:	6213      	str	r3, [r2, #32]
 8004ee6:	e01c      	b.n	8004f22 <HAL_RCC_OscConfig+0x36e>
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	68db      	ldr	r3, [r3, #12]
 8004eec:	2b05      	cmp	r3, #5
 8004eee:	d10c      	bne.n	8004f0a <HAL_RCC_OscConfig+0x356>
 8004ef0:	4b61      	ldr	r3, [pc, #388]	; (8005078 <HAL_RCC_OscConfig+0x4c4>)
 8004ef2:	6a1b      	ldr	r3, [r3, #32]
 8004ef4:	4a60      	ldr	r2, [pc, #384]	; (8005078 <HAL_RCC_OscConfig+0x4c4>)
 8004ef6:	f043 0304 	orr.w	r3, r3, #4
 8004efa:	6213      	str	r3, [r2, #32]
 8004efc:	4b5e      	ldr	r3, [pc, #376]	; (8005078 <HAL_RCC_OscConfig+0x4c4>)
 8004efe:	6a1b      	ldr	r3, [r3, #32]
 8004f00:	4a5d      	ldr	r2, [pc, #372]	; (8005078 <HAL_RCC_OscConfig+0x4c4>)
 8004f02:	f043 0301 	orr.w	r3, r3, #1
 8004f06:	6213      	str	r3, [r2, #32]
 8004f08:	e00b      	b.n	8004f22 <HAL_RCC_OscConfig+0x36e>
 8004f0a:	4b5b      	ldr	r3, [pc, #364]	; (8005078 <HAL_RCC_OscConfig+0x4c4>)
 8004f0c:	6a1b      	ldr	r3, [r3, #32]
 8004f0e:	4a5a      	ldr	r2, [pc, #360]	; (8005078 <HAL_RCC_OscConfig+0x4c4>)
 8004f10:	f023 0301 	bic.w	r3, r3, #1
 8004f14:	6213      	str	r3, [r2, #32]
 8004f16:	4b58      	ldr	r3, [pc, #352]	; (8005078 <HAL_RCC_OscConfig+0x4c4>)
 8004f18:	6a1b      	ldr	r3, [r3, #32]
 8004f1a:	4a57      	ldr	r2, [pc, #348]	; (8005078 <HAL_RCC_OscConfig+0x4c4>)
 8004f1c:	f023 0304 	bic.w	r3, r3, #4
 8004f20:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	68db      	ldr	r3, [r3, #12]
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d015      	beq.n	8004f56 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004f2a:	f7fd fee7 	bl	8002cfc <HAL_GetTick>
 8004f2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f30:	e00a      	b.n	8004f48 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004f32:	f7fd fee3 	bl	8002cfc <HAL_GetTick>
 8004f36:	4602      	mov	r2, r0
 8004f38:	693b      	ldr	r3, [r7, #16]
 8004f3a:	1ad3      	subs	r3, r2, r3
 8004f3c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f40:	4293      	cmp	r3, r2
 8004f42:	d901      	bls.n	8004f48 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004f44:	2303      	movs	r3, #3
 8004f46:	e0b1      	b.n	80050ac <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f48:	4b4b      	ldr	r3, [pc, #300]	; (8005078 <HAL_RCC_OscConfig+0x4c4>)
 8004f4a:	6a1b      	ldr	r3, [r3, #32]
 8004f4c:	f003 0302 	and.w	r3, r3, #2
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d0ee      	beq.n	8004f32 <HAL_RCC_OscConfig+0x37e>
 8004f54:	e014      	b.n	8004f80 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004f56:	f7fd fed1 	bl	8002cfc <HAL_GetTick>
 8004f5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004f5c:	e00a      	b.n	8004f74 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004f5e:	f7fd fecd 	bl	8002cfc <HAL_GetTick>
 8004f62:	4602      	mov	r2, r0
 8004f64:	693b      	ldr	r3, [r7, #16]
 8004f66:	1ad3      	subs	r3, r2, r3
 8004f68:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f6c:	4293      	cmp	r3, r2
 8004f6e:	d901      	bls.n	8004f74 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004f70:	2303      	movs	r3, #3
 8004f72:	e09b      	b.n	80050ac <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004f74:	4b40      	ldr	r3, [pc, #256]	; (8005078 <HAL_RCC_OscConfig+0x4c4>)
 8004f76:	6a1b      	ldr	r3, [r3, #32]
 8004f78:	f003 0302 	and.w	r3, r3, #2
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d1ee      	bne.n	8004f5e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004f80:	7dfb      	ldrb	r3, [r7, #23]
 8004f82:	2b01      	cmp	r3, #1
 8004f84:	d105      	bne.n	8004f92 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004f86:	4b3c      	ldr	r3, [pc, #240]	; (8005078 <HAL_RCC_OscConfig+0x4c4>)
 8004f88:	69db      	ldr	r3, [r3, #28]
 8004f8a:	4a3b      	ldr	r2, [pc, #236]	; (8005078 <HAL_RCC_OscConfig+0x4c4>)
 8004f8c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004f90:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	69db      	ldr	r3, [r3, #28]
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	f000 8087 	beq.w	80050aa <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004f9c:	4b36      	ldr	r3, [pc, #216]	; (8005078 <HAL_RCC_OscConfig+0x4c4>)
 8004f9e:	685b      	ldr	r3, [r3, #4]
 8004fa0:	f003 030c 	and.w	r3, r3, #12
 8004fa4:	2b08      	cmp	r3, #8
 8004fa6:	d061      	beq.n	800506c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	69db      	ldr	r3, [r3, #28]
 8004fac:	2b02      	cmp	r3, #2
 8004fae:	d146      	bne.n	800503e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004fb0:	4b33      	ldr	r3, [pc, #204]	; (8005080 <HAL_RCC_OscConfig+0x4cc>)
 8004fb2:	2200      	movs	r2, #0
 8004fb4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004fb6:	f7fd fea1 	bl	8002cfc <HAL_GetTick>
 8004fba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004fbc:	e008      	b.n	8004fd0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004fbe:	f7fd fe9d 	bl	8002cfc <HAL_GetTick>
 8004fc2:	4602      	mov	r2, r0
 8004fc4:	693b      	ldr	r3, [r7, #16]
 8004fc6:	1ad3      	subs	r3, r2, r3
 8004fc8:	2b02      	cmp	r3, #2
 8004fca:	d901      	bls.n	8004fd0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004fcc:	2303      	movs	r3, #3
 8004fce:	e06d      	b.n	80050ac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004fd0:	4b29      	ldr	r3, [pc, #164]	; (8005078 <HAL_RCC_OscConfig+0x4c4>)
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d1f0      	bne.n	8004fbe <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	6a1b      	ldr	r3, [r3, #32]
 8004fe0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004fe4:	d108      	bne.n	8004ff8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004fe6:	4b24      	ldr	r3, [pc, #144]	; (8005078 <HAL_RCC_OscConfig+0x4c4>)
 8004fe8:	685b      	ldr	r3, [r3, #4]
 8004fea:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	689b      	ldr	r3, [r3, #8]
 8004ff2:	4921      	ldr	r1, [pc, #132]	; (8005078 <HAL_RCC_OscConfig+0x4c4>)
 8004ff4:	4313      	orrs	r3, r2
 8004ff6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004ff8:	4b1f      	ldr	r3, [pc, #124]	; (8005078 <HAL_RCC_OscConfig+0x4c4>)
 8004ffa:	685b      	ldr	r3, [r3, #4]
 8004ffc:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	6a19      	ldr	r1, [r3, #32]
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005008:	430b      	orrs	r3, r1
 800500a:	491b      	ldr	r1, [pc, #108]	; (8005078 <HAL_RCC_OscConfig+0x4c4>)
 800500c:	4313      	orrs	r3, r2
 800500e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005010:	4b1b      	ldr	r3, [pc, #108]	; (8005080 <HAL_RCC_OscConfig+0x4cc>)
 8005012:	2201      	movs	r2, #1
 8005014:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005016:	f7fd fe71 	bl	8002cfc <HAL_GetTick>
 800501a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800501c:	e008      	b.n	8005030 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800501e:	f7fd fe6d 	bl	8002cfc <HAL_GetTick>
 8005022:	4602      	mov	r2, r0
 8005024:	693b      	ldr	r3, [r7, #16]
 8005026:	1ad3      	subs	r3, r2, r3
 8005028:	2b02      	cmp	r3, #2
 800502a:	d901      	bls.n	8005030 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800502c:	2303      	movs	r3, #3
 800502e:	e03d      	b.n	80050ac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005030:	4b11      	ldr	r3, [pc, #68]	; (8005078 <HAL_RCC_OscConfig+0x4c4>)
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005038:	2b00      	cmp	r3, #0
 800503a:	d0f0      	beq.n	800501e <HAL_RCC_OscConfig+0x46a>
 800503c:	e035      	b.n	80050aa <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800503e:	4b10      	ldr	r3, [pc, #64]	; (8005080 <HAL_RCC_OscConfig+0x4cc>)
 8005040:	2200      	movs	r2, #0
 8005042:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005044:	f7fd fe5a 	bl	8002cfc <HAL_GetTick>
 8005048:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800504a:	e008      	b.n	800505e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800504c:	f7fd fe56 	bl	8002cfc <HAL_GetTick>
 8005050:	4602      	mov	r2, r0
 8005052:	693b      	ldr	r3, [r7, #16]
 8005054:	1ad3      	subs	r3, r2, r3
 8005056:	2b02      	cmp	r3, #2
 8005058:	d901      	bls.n	800505e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800505a:	2303      	movs	r3, #3
 800505c:	e026      	b.n	80050ac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800505e:	4b06      	ldr	r3, [pc, #24]	; (8005078 <HAL_RCC_OscConfig+0x4c4>)
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005066:	2b00      	cmp	r3, #0
 8005068:	d1f0      	bne.n	800504c <HAL_RCC_OscConfig+0x498>
 800506a:	e01e      	b.n	80050aa <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	69db      	ldr	r3, [r3, #28]
 8005070:	2b01      	cmp	r3, #1
 8005072:	d107      	bne.n	8005084 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8005074:	2301      	movs	r3, #1
 8005076:	e019      	b.n	80050ac <HAL_RCC_OscConfig+0x4f8>
 8005078:	40021000 	.word	0x40021000
 800507c:	40007000 	.word	0x40007000
 8005080:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005084:	4b0b      	ldr	r3, [pc, #44]	; (80050b4 <HAL_RCC_OscConfig+0x500>)
 8005086:	685b      	ldr	r3, [r3, #4]
 8005088:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	6a1b      	ldr	r3, [r3, #32]
 8005094:	429a      	cmp	r2, r3
 8005096:	d106      	bne.n	80050a6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80050a2:	429a      	cmp	r2, r3
 80050a4:	d001      	beq.n	80050aa <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80050a6:	2301      	movs	r3, #1
 80050a8:	e000      	b.n	80050ac <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80050aa:	2300      	movs	r3, #0
}
 80050ac:	4618      	mov	r0, r3
 80050ae:	3718      	adds	r7, #24
 80050b0:	46bd      	mov	sp, r7
 80050b2:	bd80      	pop	{r7, pc}
 80050b4:	40021000 	.word	0x40021000

080050b8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80050b8:	b580      	push	{r7, lr}
 80050ba:	b084      	sub	sp, #16
 80050bc:	af00      	add	r7, sp, #0
 80050be:	6078      	str	r0, [r7, #4]
 80050c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d101      	bne.n	80050cc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80050c8:	2301      	movs	r3, #1
 80050ca:	e0d0      	b.n	800526e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80050cc:	4b6a      	ldr	r3, [pc, #424]	; (8005278 <HAL_RCC_ClockConfig+0x1c0>)
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	f003 0307 	and.w	r3, r3, #7
 80050d4:	683a      	ldr	r2, [r7, #0]
 80050d6:	429a      	cmp	r2, r3
 80050d8:	d910      	bls.n	80050fc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80050da:	4b67      	ldr	r3, [pc, #412]	; (8005278 <HAL_RCC_ClockConfig+0x1c0>)
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	f023 0207 	bic.w	r2, r3, #7
 80050e2:	4965      	ldr	r1, [pc, #404]	; (8005278 <HAL_RCC_ClockConfig+0x1c0>)
 80050e4:	683b      	ldr	r3, [r7, #0]
 80050e6:	4313      	orrs	r3, r2
 80050e8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80050ea:	4b63      	ldr	r3, [pc, #396]	; (8005278 <HAL_RCC_ClockConfig+0x1c0>)
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	f003 0307 	and.w	r3, r3, #7
 80050f2:	683a      	ldr	r2, [r7, #0]
 80050f4:	429a      	cmp	r2, r3
 80050f6:	d001      	beq.n	80050fc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80050f8:	2301      	movs	r3, #1
 80050fa:	e0b8      	b.n	800526e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	f003 0302 	and.w	r3, r3, #2
 8005104:	2b00      	cmp	r3, #0
 8005106:	d020      	beq.n	800514a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	f003 0304 	and.w	r3, r3, #4
 8005110:	2b00      	cmp	r3, #0
 8005112:	d005      	beq.n	8005120 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005114:	4b59      	ldr	r3, [pc, #356]	; (800527c <HAL_RCC_ClockConfig+0x1c4>)
 8005116:	685b      	ldr	r3, [r3, #4]
 8005118:	4a58      	ldr	r2, [pc, #352]	; (800527c <HAL_RCC_ClockConfig+0x1c4>)
 800511a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800511e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	f003 0308 	and.w	r3, r3, #8
 8005128:	2b00      	cmp	r3, #0
 800512a:	d005      	beq.n	8005138 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800512c:	4b53      	ldr	r3, [pc, #332]	; (800527c <HAL_RCC_ClockConfig+0x1c4>)
 800512e:	685b      	ldr	r3, [r3, #4]
 8005130:	4a52      	ldr	r2, [pc, #328]	; (800527c <HAL_RCC_ClockConfig+0x1c4>)
 8005132:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8005136:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005138:	4b50      	ldr	r3, [pc, #320]	; (800527c <HAL_RCC_ClockConfig+0x1c4>)
 800513a:	685b      	ldr	r3, [r3, #4]
 800513c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	689b      	ldr	r3, [r3, #8]
 8005144:	494d      	ldr	r1, [pc, #308]	; (800527c <HAL_RCC_ClockConfig+0x1c4>)
 8005146:	4313      	orrs	r3, r2
 8005148:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	f003 0301 	and.w	r3, r3, #1
 8005152:	2b00      	cmp	r3, #0
 8005154:	d040      	beq.n	80051d8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	685b      	ldr	r3, [r3, #4]
 800515a:	2b01      	cmp	r3, #1
 800515c:	d107      	bne.n	800516e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800515e:	4b47      	ldr	r3, [pc, #284]	; (800527c <HAL_RCC_ClockConfig+0x1c4>)
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005166:	2b00      	cmp	r3, #0
 8005168:	d115      	bne.n	8005196 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800516a:	2301      	movs	r3, #1
 800516c:	e07f      	b.n	800526e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	685b      	ldr	r3, [r3, #4]
 8005172:	2b02      	cmp	r3, #2
 8005174:	d107      	bne.n	8005186 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005176:	4b41      	ldr	r3, [pc, #260]	; (800527c <HAL_RCC_ClockConfig+0x1c4>)
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800517e:	2b00      	cmp	r3, #0
 8005180:	d109      	bne.n	8005196 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005182:	2301      	movs	r3, #1
 8005184:	e073      	b.n	800526e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005186:	4b3d      	ldr	r3, [pc, #244]	; (800527c <HAL_RCC_ClockConfig+0x1c4>)
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	f003 0302 	and.w	r3, r3, #2
 800518e:	2b00      	cmp	r3, #0
 8005190:	d101      	bne.n	8005196 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005192:	2301      	movs	r3, #1
 8005194:	e06b      	b.n	800526e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005196:	4b39      	ldr	r3, [pc, #228]	; (800527c <HAL_RCC_ClockConfig+0x1c4>)
 8005198:	685b      	ldr	r3, [r3, #4]
 800519a:	f023 0203 	bic.w	r2, r3, #3
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	685b      	ldr	r3, [r3, #4]
 80051a2:	4936      	ldr	r1, [pc, #216]	; (800527c <HAL_RCC_ClockConfig+0x1c4>)
 80051a4:	4313      	orrs	r3, r2
 80051a6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80051a8:	f7fd fda8 	bl	8002cfc <HAL_GetTick>
 80051ac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80051ae:	e00a      	b.n	80051c6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80051b0:	f7fd fda4 	bl	8002cfc <HAL_GetTick>
 80051b4:	4602      	mov	r2, r0
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	1ad3      	subs	r3, r2, r3
 80051ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80051be:	4293      	cmp	r3, r2
 80051c0:	d901      	bls.n	80051c6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80051c2:	2303      	movs	r3, #3
 80051c4:	e053      	b.n	800526e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80051c6:	4b2d      	ldr	r3, [pc, #180]	; (800527c <HAL_RCC_ClockConfig+0x1c4>)
 80051c8:	685b      	ldr	r3, [r3, #4]
 80051ca:	f003 020c 	and.w	r2, r3, #12
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	685b      	ldr	r3, [r3, #4]
 80051d2:	009b      	lsls	r3, r3, #2
 80051d4:	429a      	cmp	r2, r3
 80051d6:	d1eb      	bne.n	80051b0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80051d8:	4b27      	ldr	r3, [pc, #156]	; (8005278 <HAL_RCC_ClockConfig+0x1c0>)
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	f003 0307 	and.w	r3, r3, #7
 80051e0:	683a      	ldr	r2, [r7, #0]
 80051e2:	429a      	cmp	r2, r3
 80051e4:	d210      	bcs.n	8005208 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80051e6:	4b24      	ldr	r3, [pc, #144]	; (8005278 <HAL_RCC_ClockConfig+0x1c0>)
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	f023 0207 	bic.w	r2, r3, #7
 80051ee:	4922      	ldr	r1, [pc, #136]	; (8005278 <HAL_RCC_ClockConfig+0x1c0>)
 80051f0:	683b      	ldr	r3, [r7, #0]
 80051f2:	4313      	orrs	r3, r2
 80051f4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80051f6:	4b20      	ldr	r3, [pc, #128]	; (8005278 <HAL_RCC_ClockConfig+0x1c0>)
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	f003 0307 	and.w	r3, r3, #7
 80051fe:	683a      	ldr	r2, [r7, #0]
 8005200:	429a      	cmp	r2, r3
 8005202:	d001      	beq.n	8005208 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8005204:	2301      	movs	r3, #1
 8005206:	e032      	b.n	800526e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	f003 0304 	and.w	r3, r3, #4
 8005210:	2b00      	cmp	r3, #0
 8005212:	d008      	beq.n	8005226 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005214:	4b19      	ldr	r3, [pc, #100]	; (800527c <HAL_RCC_ClockConfig+0x1c4>)
 8005216:	685b      	ldr	r3, [r3, #4]
 8005218:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	68db      	ldr	r3, [r3, #12]
 8005220:	4916      	ldr	r1, [pc, #88]	; (800527c <HAL_RCC_ClockConfig+0x1c4>)
 8005222:	4313      	orrs	r3, r2
 8005224:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	f003 0308 	and.w	r3, r3, #8
 800522e:	2b00      	cmp	r3, #0
 8005230:	d009      	beq.n	8005246 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005232:	4b12      	ldr	r3, [pc, #72]	; (800527c <HAL_RCC_ClockConfig+0x1c4>)
 8005234:	685b      	ldr	r3, [r3, #4]
 8005236:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	691b      	ldr	r3, [r3, #16]
 800523e:	00db      	lsls	r3, r3, #3
 8005240:	490e      	ldr	r1, [pc, #56]	; (800527c <HAL_RCC_ClockConfig+0x1c4>)
 8005242:	4313      	orrs	r3, r2
 8005244:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005246:	f000 f821 	bl	800528c <HAL_RCC_GetSysClockFreq>
 800524a:	4602      	mov	r2, r0
 800524c:	4b0b      	ldr	r3, [pc, #44]	; (800527c <HAL_RCC_ClockConfig+0x1c4>)
 800524e:	685b      	ldr	r3, [r3, #4]
 8005250:	091b      	lsrs	r3, r3, #4
 8005252:	f003 030f 	and.w	r3, r3, #15
 8005256:	490a      	ldr	r1, [pc, #40]	; (8005280 <HAL_RCC_ClockConfig+0x1c8>)
 8005258:	5ccb      	ldrb	r3, [r1, r3]
 800525a:	fa22 f303 	lsr.w	r3, r2, r3
 800525e:	4a09      	ldr	r2, [pc, #36]	; (8005284 <HAL_RCC_ClockConfig+0x1cc>)
 8005260:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005262:	4b09      	ldr	r3, [pc, #36]	; (8005288 <HAL_RCC_ClockConfig+0x1d0>)
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	4618      	mov	r0, r3
 8005268:	f7fd fd06 	bl	8002c78 <HAL_InitTick>

  return HAL_OK;
 800526c:	2300      	movs	r3, #0
}
 800526e:	4618      	mov	r0, r3
 8005270:	3710      	adds	r7, #16
 8005272:	46bd      	mov	sp, r7
 8005274:	bd80      	pop	{r7, pc}
 8005276:	bf00      	nop
 8005278:	40022000 	.word	0x40022000
 800527c:	40021000 	.word	0x40021000
 8005280:	08009afc 	.word	0x08009afc
 8005284:	20000000 	.word	0x20000000
 8005288:	20000004 	.word	0x20000004

0800528c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800528c:	b490      	push	{r4, r7}
 800528e:	b08a      	sub	sp, #40	; 0x28
 8005290:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8005292:	4b29      	ldr	r3, [pc, #164]	; (8005338 <HAL_RCC_GetSysClockFreq+0xac>)
 8005294:	1d3c      	adds	r4, r7, #4
 8005296:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005298:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800529c:	f240 2301 	movw	r3, #513	; 0x201
 80052a0:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80052a2:	2300      	movs	r3, #0
 80052a4:	61fb      	str	r3, [r7, #28]
 80052a6:	2300      	movs	r3, #0
 80052a8:	61bb      	str	r3, [r7, #24]
 80052aa:	2300      	movs	r3, #0
 80052ac:	627b      	str	r3, [r7, #36]	; 0x24
 80052ae:	2300      	movs	r3, #0
 80052b0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80052b2:	2300      	movs	r3, #0
 80052b4:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80052b6:	4b21      	ldr	r3, [pc, #132]	; (800533c <HAL_RCC_GetSysClockFreq+0xb0>)
 80052b8:	685b      	ldr	r3, [r3, #4]
 80052ba:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80052bc:	69fb      	ldr	r3, [r7, #28]
 80052be:	f003 030c 	and.w	r3, r3, #12
 80052c2:	2b04      	cmp	r3, #4
 80052c4:	d002      	beq.n	80052cc <HAL_RCC_GetSysClockFreq+0x40>
 80052c6:	2b08      	cmp	r3, #8
 80052c8:	d003      	beq.n	80052d2 <HAL_RCC_GetSysClockFreq+0x46>
 80052ca:	e02b      	b.n	8005324 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80052cc:	4b1c      	ldr	r3, [pc, #112]	; (8005340 <HAL_RCC_GetSysClockFreq+0xb4>)
 80052ce:	623b      	str	r3, [r7, #32]
      break;
 80052d0:	e02b      	b.n	800532a <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80052d2:	69fb      	ldr	r3, [r7, #28]
 80052d4:	0c9b      	lsrs	r3, r3, #18
 80052d6:	f003 030f 	and.w	r3, r3, #15
 80052da:	3328      	adds	r3, #40	; 0x28
 80052dc:	443b      	add	r3, r7
 80052de:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80052e2:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80052e4:	69fb      	ldr	r3, [r7, #28]
 80052e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d012      	beq.n	8005314 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80052ee:	4b13      	ldr	r3, [pc, #76]	; (800533c <HAL_RCC_GetSysClockFreq+0xb0>)
 80052f0:	685b      	ldr	r3, [r3, #4]
 80052f2:	0c5b      	lsrs	r3, r3, #17
 80052f4:	f003 0301 	and.w	r3, r3, #1
 80052f8:	3328      	adds	r3, #40	; 0x28
 80052fa:	443b      	add	r3, r7
 80052fc:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8005300:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8005302:	697b      	ldr	r3, [r7, #20]
 8005304:	4a0e      	ldr	r2, [pc, #56]	; (8005340 <HAL_RCC_GetSysClockFreq+0xb4>)
 8005306:	fb03 f202 	mul.w	r2, r3, r2
 800530a:	69bb      	ldr	r3, [r7, #24]
 800530c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005310:	627b      	str	r3, [r7, #36]	; 0x24
 8005312:	e004      	b.n	800531e <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005314:	697b      	ldr	r3, [r7, #20]
 8005316:	4a0b      	ldr	r2, [pc, #44]	; (8005344 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005318:	fb02 f303 	mul.w	r3, r2, r3
 800531c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800531e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005320:	623b      	str	r3, [r7, #32]
      break;
 8005322:	e002      	b.n	800532a <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005324:	4b06      	ldr	r3, [pc, #24]	; (8005340 <HAL_RCC_GetSysClockFreq+0xb4>)
 8005326:	623b      	str	r3, [r7, #32]
      break;
 8005328:	bf00      	nop
    }
  }
  return sysclockfreq;
 800532a:	6a3b      	ldr	r3, [r7, #32]
}
 800532c:	4618      	mov	r0, r3
 800532e:	3728      	adds	r7, #40	; 0x28
 8005330:	46bd      	mov	sp, r7
 8005332:	bc90      	pop	{r4, r7}
 8005334:	4770      	bx	lr
 8005336:	bf00      	nop
 8005338:	08009aec 	.word	0x08009aec
 800533c:	40021000 	.word	0x40021000
 8005340:	007a1200 	.word	0x007a1200
 8005344:	003d0900 	.word	0x003d0900

08005348 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005348:	b480      	push	{r7}
 800534a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800534c:	4b02      	ldr	r3, [pc, #8]	; (8005358 <HAL_RCC_GetHCLKFreq+0x10>)
 800534e:	681b      	ldr	r3, [r3, #0]
}
 8005350:	4618      	mov	r0, r3
 8005352:	46bd      	mov	sp, r7
 8005354:	bc80      	pop	{r7}
 8005356:	4770      	bx	lr
 8005358:	20000000 	.word	0x20000000

0800535c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800535c:	b580      	push	{r7, lr}
 800535e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005360:	f7ff fff2 	bl	8005348 <HAL_RCC_GetHCLKFreq>
 8005364:	4602      	mov	r2, r0
 8005366:	4b05      	ldr	r3, [pc, #20]	; (800537c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005368:	685b      	ldr	r3, [r3, #4]
 800536a:	0a1b      	lsrs	r3, r3, #8
 800536c:	f003 0307 	and.w	r3, r3, #7
 8005370:	4903      	ldr	r1, [pc, #12]	; (8005380 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005372:	5ccb      	ldrb	r3, [r1, r3]
 8005374:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005378:	4618      	mov	r0, r3
 800537a:	bd80      	pop	{r7, pc}
 800537c:	40021000 	.word	0x40021000
 8005380:	08009b0c 	.word	0x08009b0c

08005384 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005384:	b580      	push	{r7, lr}
 8005386:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005388:	f7ff ffde 	bl	8005348 <HAL_RCC_GetHCLKFreq>
 800538c:	4602      	mov	r2, r0
 800538e:	4b05      	ldr	r3, [pc, #20]	; (80053a4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005390:	685b      	ldr	r3, [r3, #4]
 8005392:	0adb      	lsrs	r3, r3, #11
 8005394:	f003 0307 	and.w	r3, r3, #7
 8005398:	4903      	ldr	r1, [pc, #12]	; (80053a8 <HAL_RCC_GetPCLK2Freq+0x24>)
 800539a:	5ccb      	ldrb	r3, [r1, r3]
 800539c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80053a0:	4618      	mov	r0, r3
 80053a2:	bd80      	pop	{r7, pc}
 80053a4:	40021000 	.word	0x40021000
 80053a8:	08009b0c 	.word	0x08009b0c

080053ac <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80053ac:	b480      	push	{r7}
 80053ae:	b085      	sub	sp, #20
 80053b0:	af00      	add	r7, sp, #0
 80053b2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80053b4:	4b0a      	ldr	r3, [pc, #40]	; (80053e0 <RCC_Delay+0x34>)
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	4a0a      	ldr	r2, [pc, #40]	; (80053e4 <RCC_Delay+0x38>)
 80053ba:	fba2 2303 	umull	r2, r3, r2, r3
 80053be:	0a5b      	lsrs	r3, r3, #9
 80053c0:	687a      	ldr	r2, [r7, #4]
 80053c2:	fb02 f303 	mul.w	r3, r2, r3
 80053c6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80053c8:	bf00      	nop
  }
  while (Delay --);
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	1e5a      	subs	r2, r3, #1
 80053ce:	60fa      	str	r2, [r7, #12]
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d1f9      	bne.n	80053c8 <RCC_Delay+0x1c>
}
 80053d4:	bf00      	nop
 80053d6:	bf00      	nop
 80053d8:	3714      	adds	r7, #20
 80053da:	46bd      	mov	sp, r7
 80053dc:	bc80      	pop	{r7}
 80053de:	4770      	bx	lr
 80053e0:	20000000 	.word	0x20000000
 80053e4:	10624dd3 	.word	0x10624dd3

080053e8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80053e8:	b580      	push	{r7, lr}
 80053ea:	b082      	sub	sp, #8
 80053ec:	af00      	add	r7, sp, #0
 80053ee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d101      	bne.n	80053fa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80053f6:	2301      	movs	r3, #1
 80053f8:	e041      	b.n	800547e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005400:	b2db      	uxtb	r3, r3
 8005402:	2b00      	cmp	r3, #0
 8005404:	d106      	bne.n	8005414 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	2200      	movs	r2, #0
 800540a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800540e:	6878      	ldr	r0, [r7, #4]
 8005410:	f7fd fa34 	bl	800287c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	2202      	movs	r2, #2
 8005418:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681a      	ldr	r2, [r3, #0]
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	3304      	adds	r3, #4
 8005424:	4619      	mov	r1, r3
 8005426:	4610      	mov	r0, r2
 8005428:	f000 fa08 	bl	800583c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	2201      	movs	r2, #1
 8005430:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	2201      	movs	r2, #1
 8005438:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	2201      	movs	r2, #1
 8005440:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	2201      	movs	r2, #1
 8005448:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	2201      	movs	r2, #1
 8005450:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	2201      	movs	r2, #1
 8005458:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	2201      	movs	r2, #1
 8005460:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	2201      	movs	r2, #1
 8005468:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	2201      	movs	r2, #1
 8005470:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	2201      	movs	r2, #1
 8005478:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800547c:	2300      	movs	r3, #0
}
 800547e:	4618      	mov	r0, r3
 8005480:	3708      	adds	r7, #8
 8005482:	46bd      	mov	sp, r7
 8005484:	bd80      	pop	{r7, pc}

08005486 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005486:	b580      	push	{r7, lr}
 8005488:	b082      	sub	sp, #8
 800548a:	af00      	add	r7, sp, #0
 800548c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	2b00      	cmp	r3, #0
 8005492:	d101      	bne.n	8005498 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005494:	2301      	movs	r3, #1
 8005496:	e041      	b.n	800551c <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800549e:	b2db      	uxtb	r3, r3
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d106      	bne.n	80054b2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	2200      	movs	r2, #0
 80054a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80054ac:	6878      	ldr	r0, [r7, #4]
 80054ae:	f000 f839 	bl	8005524 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	2202      	movs	r2, #2
 80054b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681a      	ldr	r2, [r3, #0]
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	3304      	adds	r3, #4
 80054c2:	4619      	mov	r1, r3
 80054c4:	4610      	mov	r0, r2
 80054c6:	f000 f9b9 	bl	800583c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	2201      	movs	r2, #1
 80054ce:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	2201      	movs	r2, #1
 80054d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	2201      	movs	r2, #1
 80054de:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	2201      	movs	r2, #1
 80054e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	2201      	movs	r2, #1
 80054ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	2201      	movs	r2, #1
 80054f6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	2201      	movs	r2, #1
 80054fe:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	2201      	movs	r2, #1
 8005506:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	2201      	movs	r2, #1
 800550e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	2201      	movs	r2, #1
 8005516:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800551a:	2300      	movs	r3, #0
}
 800551c:	4618      	mov	r0, r3
 800551e:	3708      	adds	r7, #8
 8005520:	46bd      	mov	sp, r7
 8005522:	bd80      	pop	{r7, pc}

08005524 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005524:	b480      	push	{r7}
 8005526:	b083      	sub	sp, #12
 8005528:	af00      	add	r7, sp, #0
 800552a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800552c:	bf00      	nop
 800552e:	370c      	adds	r7, #12
 8005530:	46bd      	mov	sp, r7
 8005532:	bc80      	pop	{r7}
 8005534:	4770      	bx	lr
	...

08005538 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005538:	b580      	push	{r7, lr}
 800553a:	b084      	sub	sp, #16
 800553c:	af00      	add	r7, sp, #0
 800553e:	60f8      	str	r0, [r7, #12]
 8005540:	60b9      	str	r1, [r7, #8]
 8005542:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800554a:	2b01      	cmp	r3, #1
 800554c:	d101      	bne.n	8005552 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800554e:	2302      	movs	r3, #2
 8005550:	e0ac      	b.n	80056ac <HAL_TIM_PWM_ConfigChannel+0x174>
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	2201      	movs	r2, #1
 8005556:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	2b0c      	cmp	r3, #12
 800555e:	f200 809f 	bhi.w	80056a0 <HAL_TIM_PWM_ConfigChannel+0x168>
 8005562:	a201      	add	r2, pc, #4	; (adr r2, 8005568 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8005564:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005568:	0800559d 	.word	0x0800559d
 800556c:	080056a1 	.word	0x080056a1
 8005570:	080056a1 	.word	0x080056a1
 8005574:	080056a1 	.word	0x080056a1
 8005578:	080055dd 	.word	0x080055dd
 800557c:	080056a1 	.word	0x080056a1
 8005580:	080056a1 	.word	0x080056a1
 8005584:	080056a1 	.word	0x080056a1
 8005588:	0800561f 	.word	0x0800561f
 800558c:	080056a1 	.word	0x080056a1
 8005590:	080056a1 	.word	0x080056a1
 8005594:	080056a1 	.word	0x080056a1
 8005598:	0800565f 	.word	0x0800565f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	68b9      	ldr	r1, [r7, #8]
 80055a2:	4618      	mov	r0, r3
 80055a4:	f000 f9ac 	bl	8005900 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	699a      	ldr	r2, [r3, #24]
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	f042 0208 	orr.w	r2, r2, #8
 80055b6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	699a      	ldr	r2, [r3, #24]
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	f022 0204 	bic.w	r2, r2, #4
 80055c6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	6999      	ldr	r1, [r3, #24]
 80055ce:	68bb      	ldr	r3, [r7, #8]
 80055d0:	691a      	ldr	r2, [r3, #16]
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	430a      	orrs	r2, r1
 80055d8:	619a      	str	r2, [r3, #24]
      break;
 80055da:	e062      	b.n	80056a2 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	68b9      	ldr	r1, [r7, #8]
 80055e2:	4618      	mov	r0, r3
 80055e4:	f000 f9f2 	bl	80059cc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	699a      	ldr	r2, [r3, #24]
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80055f6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	699a      	ldr	r2, [r3, #24]
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005606:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	6999      	ldr	r1, [r3, #24]
 800560e:	68bb      	ldr	r3, [r7, #8]
 8005610:	691b      	ldr	r3, [r3, #16]
 8005612:	021a      	lsls	r2, r3, #8
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	430a      	orrs	r2, r1
 800561a:	619a      	str	r2, [r3, #24]
      break;
 800561c:	e041      	b.n	80056a2 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	68b9      	ldr	r1, [r7, #8]
 8005624:	4618      	mov	r0, r3
 8005626:	f000 fa3b 	bl	8005aa0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	69da      	ldr	r2, [r3, #28]
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	f042 0208 	orr.w	r2, r2, #8
 8005638:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	69da      	ldr	r2, [r3, #28]
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	f022 0204 	bic.w	r2, r2, #4
 8005648:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	69d9      	ldr	r1, [r3, #28]
 8005650:	68bb      	ldr	r3, [r7, #8]
 8005652:	691a      	ldr	r2, [r3, #16]
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	430a      	orrs	r2, r1
 800565a:	61da      	str	r2, [r3, #28]
      break;
 800565c:	e021      	b.n	80056a2 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	68b9      	ldr	r1, [r7, #8]
 8005664:	4618      	mov	r0, r3
 8005666:	f000 fa85 	bl	8005b74 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	69da      	ldr	r2, [r3, #28]
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005678:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	69da      	ldr	r2, [r3, #28]
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005688:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	69d9      	ldr	r1, [r3, #28]
 8005690:	68bb      	ldr	r3, [r7, #8]
 8005692:	691b      	ldr	r3, [r3, #16]
 8005694:	021a      	lsls	r2, r3, #8
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	430a      	orrs	r2, r1
 800569c:	61da      	str	r2, [r3, #28]
      break;
 800569e:	e000      	b.n	80056a2 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 80056a0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	2200      	movs	r2, #0
 80056a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80056aa:	2300      	movs	r3, #0
}
 80056ac:	4618      	mov	r0, r3
 80056ae:	3710      	adds	r7, #16
 80056b0:	46bd      	mov	sp, r7
 80056b2:	bd80      	pop	{r7, pc}

080056b4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80056b4:	b580      	push	{r7, lr}
 80056b6:	b084      	sub	sp, #16
 80056b8:	af00      	add	r7, sp, #0
 80056ba:	6078      	str	r0, [r7, #4]
 80056bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80056c4:	2b01      	cmp	r3, #1
 80056c6:	d101      	bne.n	80056cc <HAL_TIM_ConfigClockSource+0x18>
 80056c8:	2302      	movs	r3, #2
 80056ca:	e0b3      	b.n	8005834 <HAL_TIM_ConfigClockSource+0x180>
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	2201      	movs	r2, #1
 80056d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	2202      	movs	r2, #2
 80056d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	689b      	ldr	r3, [r3, #8]
 80056e2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80056ea:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80056f2:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	68fa      	ldr	r2, [r7, #12]
 80056fa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80056fc:	683b      	ldr	r3, [r7, #0]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005704:	d03e      	beq.n	8005784 <HAL_TIM_ConfigClockSource+0xd0>
 8005706:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800570a:	f200 8087 	bhi.w	800581c <HAL_TIM_ConfigClockSource+0x168>
 800570e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005712:	f000 8085 	beq.w	8005820 <HAL_TIM_ConfigClockSource+0x16c>
 8005716:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800571a:	d87f      	bhi.n	800581c <HAL_TIM_ConfigClockSource+0x168>
 800571c:	2b70      	cmp	r3, #112	; 0x70
 800571e:	d01a      	beq.n	8005756 <HAL_TIM_ConfigClockSource+0xa2>
 8005720:	2b70      	cmp	r3, #112	; 0x70
 8005722:	d87b      	bhi.n	800581c <HAL_TIM_ConfigClockSource+0x168>
 8005724:	2b60      	cmp	r3, #96	; 0x60
 8005726:	d050      	beq.n	80057ca <HAL_TIM_ConfigClockSource+0x116>
 8005728:	2b60      	cmp	r3, #96	; 0x60
 800572a:	d877      	bhi.n	800581c <HAL_TIM_ConfigClockSource+0x168>
 800572c:	2b50      	cmp	r3, #80	; 0x50
 800572e:	d03c      	beq.n	80057aa <HAL_TIM_ConfigClockSource+0xf6>
 8005730:	2b50      	cmp	r3, #80	; 0x50
 8005732:	d873      	bhi.n	800581c <HAL_TIM_ConfigClockSource+0x168>
 8005734:	2b40      	cmp	r3, #64	; 0x40
 8005736:	d058      	beq.n	80057ea <HAL_TIM_ConfigClockSource+0x136>
 8005738:	2b40      	cmp	r3, #64	; 0x40
 800573a:	d86f      	bhi.n	800581c <HAL_TIM_ConfigClockSource+0x168>
 800573c:	2b30      	cmp	r3, #48	; 0x30
 800573e:	d064      	beq.n	800580a <HAL_TIM_ConfigClockSource+0x156>
 8005740:	2b30      	cmp	r3, #48	; 0x30
 8005742:	d86b      	bhi.n	800581c <HAL_TIM_ConfigClockSource+0x168>
 8005744:	2b20      	cmp	r3, #32
 8005746:	d060      	beq.n	800580a <HAL_TIM_ConfigClockSource+0x156>
 8005748:	2b20      	cmp	r3, #32
 800574a:	d867      	bhi.n	800581c <HAL_TIM_ConfigClockSource+0x168>
 800574c:	2b00      	cmp	r3, #0
 800574e:	d05c      	beq.n	800580a <HAL_TIM_ConfigClockSource+0x156>
 8005750:	2b10      	cmp	r3, #16
 8005752:	d05a      	beq.n	800580a <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8005754:	e062      	b.n	800581c <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	6818      	ldr	r0, [r3, #0]
 800575a:	683b      	ldr	r3, [r7, #0]
 800575c:	6899      	ldr	r1, [r3, #8]
 800575e:	683b      	ldr	r3, [r7, #0]
 8005760:	685a      	ldr	r2, [r3, #4]
 8005762:	683b      	ldr	r3, [r7, #0]
 8005764:	68db      	ldr	r3, [r3, #12]
 8005766:	f000 faca 	bl	8005cfe <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	689b      	ldr	r3, [r3, #8]
 8005770:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005778:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	68fa      	ldr	r2, [r7, #12]
 8005780:	609a      	str	r2, [r3, #8]
      break;
 8005782:	e04e      	b.n	8005822 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	6818      	ldr	r0, [r3, #0]
 8005788:	683b      	ldr	r3, [r7, #0]
 800578a:	6899      	ldr	r1, [r3, #8]
 800578c:	683b      	ldr	r3, [r7, #0]
 800578e:	685a      	ldr	r2, [r3, #4]
 8005790:	683b      	ldr	r3, [r7, #0]
 8005792:	68db      	ldr	r3, [r3, #12]
 8005794:	f000 fab3 	bl	8005cfe <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	689a      	ldr	r2, [r3, #8]
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80057a6:	609a      	str	r2, [r3, #8]
      break;
 80057a8:	e03b      	b.n	8005822 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	6818      	ldr	r0, [r3, #0]
 80057ae:	683b      	ldr	r3, [r7, #0]
 80057b0:	6859      	ldr	r1, [r3, #4]
 80057b2:	683b      	ldr	r3, [r7, #0]
 80057b4:	68db      	ldr	r3, [r3, #12]
 80057b6:	461a      	mov	r2, r3
 80057b8:	f000 fa2a 	bl	8005c10 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	2150      	movs	r1, #80	; 0x50
 80057c2:	4618      	mov	r0, r3
 80057c4:	f000 fa81 	bl	8005cca <TIM_ITRx_SetConfig>
      break;
 80057c8:	e02b      	b.n	8005822 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	6818      	ldr	r0, [r3, #0]
 80057ce:	683b      	ldr	r3, [r7, #0]
 80057d0:	6859      	ldr	r1, [r3, #4]
 80057d2:	683b      	ldr	r3, [r7, #0]
 80057d4:	68db      	ldr	r3, [r3, #12]
 80057d6:	461a      	mov	r2, r3
 80057d8:	f000 fa48 	bl	8005c6c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	2160      	movs	r1, #96	; 0x60
 80057e2:	4618      	mov	r0, r3
 80057e4:	f000 fa71 	bl	8005cca <TIM_ITRx_SetConfig>
      break;
 80057e8:	e01b      	b.n	8005822 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	6818      	ldr	r0, [r3, #0]
 80057ee:	683b      	ldr	r3, [r7, #0]
 80057f0:	6859      	ldr	r1, [r3, #4]
 80057f2:	683b      	ldr	r3, [r7, #0]
 80057f4:	68db      	ldr	r3, [r3, #12]
 80057f6:	461a      	mov	r2, r3
 80057f8:	f000 fa0a 	bl	8005c10 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	2140      	movs	r1, #64	; 0x40
 8005802:	4618      	mov	r0, r3
 8005804:	f000 fa61 	bl	8005cca <TIM_ITRx_SetConfig>
      break;
 8005808:	e00b      	b.n	8005822 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681a      	ldr	r2, [r3, #0]
 800580e:	683b      	ldr	r3, [r7, #0]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	4619      	mov	r1, r3
 8005814:	4610      	mov	r0, r2
 8005816:	f000 fa58 	bl	8005cca <TIM_ITRx_SetConfig>
        break;
 800581a:	e002      	b.n	8005822 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800581c:	bf00      	nop
 800581e:	e000      	b.n	8005822 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8005820:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	2201      	movs	r2, #1
 8005826:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	2200      	movs	r2, #0
 800582e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005832:	2300      	movs	r3, #0
}
 8005834:	4618      	mov	r0, r3
 8005836:	3710      	adds	r7, #16
 8005838:	46bd      	mov	sp, r7
 800583a:	bd80      	pop	{r7, pc}

0800583c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800583c:	b480      	push	{r7}
 800583e:	b085      	sub	sp, #20
 8005840:	af00      	add	r7, sp, #0
 8005842:	6078      	str	r0, [r7, #4]
 8005844:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	4a29      	ldr	r2, [pc, #164]	; (80058f4 <TIM_Base_SetConfig+0xb8>)
 8005850:	4293      	cmp	r3, r2
 8005852:	d00b      	beq.n	800586c <TIM_Base_SetConfig+0x30>
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800585a:	d007      	beq.n	800586c <TIM_Base_SetConfig+0x30>
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	4a26      	ldr	r2, [pc, #152]	; (80058f8 <TIM_Base_SetConfig+0xbc>)
 8005860:	4293      	cmp	r3, r2
 8005862:	d003      	beq.n	800586c <TIM_Base_SetConfig+0x30>
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	4a25      	ldr	r2, [pc, #148]	; (80058fc <TIM_Base_SetConfig+0xc0>)
 8005868:	4293      	cmp	r3, r2
 800586a:	d108      	bne.n	800587e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005872:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005874:	683b      	ldr	r3, [r7, #0]
 8005876:	685b      	ldr	r3, [r3, #4]
 8005878:	68fa      	ldr	r2, [r7, #12]
 800587a:	4313      	orrs	r3, r2
 800587c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	4a1c      	ldr	r2, [pc, #112]	; (80058f4 <TIM_Base_SetConfig+0xb8>)
 8005882:	4293      	cmp	r3, r2
 8005884:	d00b      	beq.n	800589e <TIM_Base_SetConfig+0x62>
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800588c:	d007      	beq.n	800589e <TIM_Base_SetConfig+0x62>
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	4a19      	ldr	r2, [pc, #100]	; (80058f8 <TIM_Base_SetConfig+0xbc>)
 8005892:	4293      	cmp	r3, r2
 8005894:	d003      	beq.n	800589e <TIM_Base_SetConfig+0x62>
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	4a18      	ldr	r2, [pc, #96]	; (80058fc <TIM_Base_SetConfig+0xc0>)
 800589a:	4293      	cmp	r3, r2
 800589c:	d108      	bne.n	80058b0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80058a4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80058a6:	683b      	ldr	r3, [r7, #0]
 80058a8:	68db      	ldr	r3, [r3, #12]
 80058aa:	68fa      	ldr	r2, [r7, #12]
 80058ac:	4313      	orrs	r3, r2
 80058ae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80058b6:	683b      	ldr	r3, [r7, #0]
 80058b8:	695b      	ldr	r3, [r3, #20]
 80058ba:	4313      	orrs	r3, r2
 80058bc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	68fa      	ldr	r2, [r7, #12]
 80058c2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80058c4:	683b      	ldr	r3, [r7, #0]
 80058c6:	689a      	ldr	r2, [r3, #8]
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80058cc:	683b      	ldr	r3, [r7, #0]
 80058ce:	681a      	ldr	r2, [r3, #0]
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	4a07      	ldr	r2, [pc, #28]	; (80058f4 <TIM_Base_SetConfig+0xb8>)
 80058d8:	4293      	cmp	r3, r2
 80058da:	d103      	bne.n	80058e4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80058dc:	683b      	ldr	r3, [r7, #0]
 80058de:	691a      	ldr	r2, [r3, #16]
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	2201      	movs	r2, #1
 80058e8:	615a      	str	r2, [r3, #20]
}
 80058ea:	bf00      	nop
 80058ec:	3714      	adds	r7, #20
 80058ee:	46bd      	mov	sp, r7
 80058f0:	bc80      	pop	{r7}
 80058f2:	4770      	bx	lr
 80058f4:	40012c00 	.word	0x40012c00
 80058f8:	40000400 	.word	0x40000400
 80058fc:	40000800 	.word	0x40000800

08005900 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005900:	b480      	push	{r7}
 8005902:	b087      	sub	sp, #28
 8005904:	af00      	add	r7, sp, #0
 8005906:	6078      	str	r0, [r7, #4]
 8005908:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	6a1b      	ldr	r3, [r3, #32]
 800590e:	f023 0201 	bic.w	r2, r3, #1
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	6a1b      	ldr	r3, [r3, #32]
 800591a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	685b      	ldr	r3, [r3, #4]
 8005920:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	699b      	ldr	r3, [r3, #24]
 8005926:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800592e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	f023 0303 	bic.w	r3, r3, #3
 8005936:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005938:	683b      	ldr	r3, [r7, #0]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	68fa      	ldr	r2, [r7, #12]
 800593e:	4313      	orrs	r3, r2
 8005940:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005942:	697b      	ldr	r3, [r7, #20]
 8005944:	f023 0302 	bic.w	r3, r3, #2
 8005948:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800594a:	683b      	ldr	r3, [r7, #0]
 800594c:	689b      	ldr	r3, [r3, #8]
 800594e:	697a      	ldr	r2, [r7, #20]
 8005950:	4313      	orrs	r3, r2
 8005952:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	4a1c      	ldr	r2, [pc, #112]	; (80059c8 <TIM_OC1_SetConfig+0xc8>)
 8005958:	4293      	cmp	r3, r2
 800595a:	d10c      	bne.n	8005976 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800595c:	697b      	ldr	r3, [r7, #20]
 800595e:	f023 0308 	bic.w	r3, r3, #8
 8005962:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005964:	683b      	ldr	r3, [r7, #0]
 8005966:	68db      	ldr	r3, [r3, #12]
 8005968:	697a      	ldr	r2, [r7, #20]
 800596a:	4313      	orrs	r3, r2
 800596c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800596e:	697b      	ldr	r3, [r7, #20]
 8005970:	f023 0304 	bic.w	r3, r3, #4
 8005974:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	4a13      	ldr	r2, [pc, #76]	; (80059c8 <TIM_OC1_SetConfig+0xc8>)
 800597a:	4293      	cmp	r3, r2
 800597c:	d111      	bne.n	80059a2 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800597e:	693b      	ldr	r3, [r7, #16]
 8005980:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005984:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005986:	693b      	ldr	r3, [r7, #16]
 8005988:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800598c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800598e:	683b      	ldr	r3, [r7, #0]
 8005990:	695b      	ldr	r3, [r3, #20]
 8005992:	693a      	ldr	r2, [r7, #16]
 8005994:	4313      	orrs	r3, r2
 8005996:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005998:	683b      	ldr	r3, [r7, #0]
 800599a:	699b      	ldr	r3, [r3, #24]
 800599c:	693a      	ldr	r2, [r7, #16]
 800599e:	4313      	orrs	r3, r2
 80059a0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	693a      	ldr	r2, [r7, #16]
 80059a6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	68fa      	ldr	r2, [r7, #12]
 80059ac:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80059ae:	683b      	ldr	r3, [r7, #0]
 80059b0:	685a      	ldr	r2, [r3, #4]
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	697a      	ldr	r2, [r7, #20]
 80059ba:	621a      	str	r2, [r3, #32]
}
 80059bc:	bf00      	nop
 80059be:	371c      	adds	r7, #28
 80059c0:	46bd      	mov	sp, r7
 80059c2:	bc80      	pop	{r7}
 80059c4:	4770      	bx	lr
 80059c6:	bf00      	nop
 80059c8:	40012c00 	.word	0x40012c00

080059cc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80059cc:	b480      	push	{r7}
 80059ce:	b087      	sub	sp, #28
 80059d0:	af00      	add	r7, sp, #0
 80059d2:	6078      	str	r0, [r7, #4]
 80059d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	6a1b      	ldr	r3, [r3, #32]
 80059da:	f023 0210 	bic.w	r2, r3, #16
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	6a1b      	ldr	r3, [r3, #32]
 80059e6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	685b      	ldr	r3, [r3, #4]
 80059ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	699b      	ldr	r3, [r3, #24]
 80059f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80059fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005a02:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005a04:	683b      	ldr	r3, [r7, #0]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	021b      	lsls	r3, r3, #8
 8005a0a:	68fa      	ldr	r2, [r7, #12]
 8005a0c:	4313      	orrs	r3, r2
 8005a0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005a10:	697b      	ldr	r3, [r7, #20]
 8005a12:	f023 0320 	bic.w	r3, r3, #32
 8005a16:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005a18:	683b      	ldr	r3, [r7, #0]
 8005a1a:	689b      	ldr	r3, [r3, #8]
 8005a1c:	011b      	lsls	r3, r3, #4
 8005a1e:	697a      	ldr	r2, [r7, #20]
 8005a20:	4313      	orrs	r3, r2
 8005a22:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	4a1d      	ldr	r2, [pc, #116]	; (8005a9c <TIM_OC2_SetConfig+0xd0>)
 8005a28:	4293      	cmp	r3, r2
 8005a2a:	d10d      	bne.n	8005a48 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005a2c:	697b      	ldr	r3, [r7, #20]
 8005a2e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005a32:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005a34:	683b      	ldr	r3, [r7, #0]
 8005a36:	68db      	ldr	r3, [r3, #12]
 8005a38:	011b      	lsls	r3, r3, #4
 8005a3a:	697a      	ldr	r2, [r7, #20]
 8005a3c:	4313      	orrs	r3, r2
 8005a3e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005a40:	697b      	ldr	r3, [r7, #20]
 8005a42:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005a46:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	4a14      	ldr	r2, [pc, #80]	; (8005a9c <TIM_OC2_SetConfig+0xd0>)
 8005a4c:	4293      	cmp	r3, r2
 8005a4e:	d113      	bne.n	8005a78 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005a50:	693b      	ldr	r3, [r7, #16]
 8005a52:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005a56:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005a58:	693b      	ldr	r3, [r7, #16]
 8005a5a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005a5e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005a60:	683b      	ldr	r3, [r7, #0]
 8005a62:	695b      	ldr	r3, [r3, #20]
 8005a64:	009b      	lsls	r3, r3, #2
 8005a66:	693a      	ldr	r2, [r7, #16]
 8005a68:	4313      	orrs	r3, r2
 8005a6a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005a6c:	683b      	ldr	r3, [r7, #0]
 8005a6e:	699b      	ldr	r3, [r3, #24]
 8005a70:	009b      	lsls	r3, r3, #2
 8005a72:	693a      	ldr	r2, [r7, #16]
 8005a74:	4313      	orrs	r3, r2
 8005a76:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	693a      	ldr	r2, [r7, #16]
 8005a7c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	68fa      	ldr	r2, [r7, #12]
 8005a82:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005a84:	683b      	ldr	r3, [r7, #0]
 8005a86:	685a      	ldr	r2, [r3, #4]
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	697a      	ldr	r2, [r7, #20]
 8005a90:	621a      	str	r2, [r3, #32]
}
 8005a92:	bf00      	nop
 8005a94:	371c      	adds	r7, #28
 8005a96:	46bd      	mov	sp, r7
 8005a98:	bc80      	pop	{r7}
 8005a9a:	4770      	bx	lr
 8005a9c:	40012c00 	.word	0x40012c00

08005aa0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005aa0:	b480      	push	{r7}
 8005aa2:	b087      	sub	sp, #28
 8005aa4:	af00      	add	r7, sp, #0
 8005aa6:	6078      	str	r0, [r7, #4]
 8005aa8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	6a1b      	ldr	r3, [r3, #32]
 8005aae:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	6a1b      	ldr	r3, [r3, #32]
 8005aba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	685b      	ldr	r3, [r3, #4]
 8005ac0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	69db      	ldr	r3, [r3, #28]
 8005ac6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ace:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	f023 0303 	bic.w	r3, r3, #3
 8005ad6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005ad8:	683b      	ldr	r3, [r7, #0]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	68fa      	ldr	r2, [r7, #12]
 8005ade:	4313      	orrs	r3, r2
 8005ae0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005ae2:	697b      	ldr	r3, [r7, #20]
 8005ae4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005ae8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005aea:	683b      	ldr	r3, [r7, #0]
 8005aec:	689b      	ldr	r3, [r3, #8]
 8005aee:	021b      	lsls	r3, r3, #8
 8005af0:	697a      	ldr	r2, [r7, #20]
 8005af2:	4313      	orrs	r3, r2
 8005af4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	4a1d      	ldr	r2, [pc, #116]	; (8005b70 <TIM_OC3_SetConfig+0xd0>)
 8005afa:	4293      	cmp	r3, r2
 8005afc:	d10d      	bne.n	8005b1a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005afe:	697b      	ldr	r3, [r7, #20]
 8005b00:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005b04:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005b06:	683b      	ldr	r3, [r7, #0]
 8005b08:	68db      	ldr	r3, [r3, #12]
 8005b0a:	021b      	lsls	r3, r3, #8
 8005b0c:	697a      	ldr	r2, [r7, #20]
 8005b0e:	4313      	orrs	r3, r2
 8005b10:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005b12:	697b      	ldr	r3, [r7, #20]
 8005b14:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005b18:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	4a14      	ldr	r2, [pc, #80]	; (8005b70 <TIM_OC3_SetConfig+0xd0>)
 8005b1e:	4293      	cmp	r3, r2
 8005b20:	d113      	bne.n	8005b4a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005b22:	693b      	ldr	r3, [r7, #16]
 8005b24:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005b28:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005b2a:	693b      	ldr	r3, [r7, #16]
 8005b2c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005b30:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005b32:	683b      	ldr	r3, [r7, #0]
 8005b34:	695b      	ldr	r3, [r3, #20]
 8005b36:	011b      	lsls	r3, r3, #4
 8005b38:	693a      	ldr	r2, [r7, #16]
 8005b3a:	4313      	orrs	r3, r2
 8005b3c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005b3e:	683b      	ldr	r3, [r7, #0]
 8005b40:	699b      	ldr	r3, [r3, #24]
 8005b42:	011b      	lsls	r3, r3, #4
 8005b44:	693a      	ldr	r2, [r7, #16]
 8005b46:	4313      	orrs	r3, r2
 8005b48:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	693a      	ldr	r2, [r7, #16]
 8005b4e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	68fa      	ldr	r2, [r7, #12]
 8005b54:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005b56:	683b      	ldr	r3, [r7, #0]
 8005b58:	685a      	ldr	r2, [r3, #4]
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	697a      	ldr	r2, [r7, #20]
 8005b62:	621a      	str	r2, [r3, #32]
}
 8005b64:	bf00      	nop
 8005b66:	371c      	adds	r7, #28
 8005b68:	46bd      	mov	sp, r7
 8005b6a:	bc80      	pop	{r7}
 8005b6c:	4770      	bx	lr
 8005b6e:	bf00      	nop
 8005b70:	40012c00 	.word	0x40012c00

08005b74 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005b74:	b480      	push	{r7}
 8005b76:	b087      	sub	sp, #28
 8005b78:	af00      	add	r7, sp, #0
 8005b7a:	6078      	str	r0, [r7, #4]
 8005b7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	6a1b      	ldr	r3, [r3, #32]
 8005b82:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	6a1b      	ldr	r3, [r3, #32]
 8005b8e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	685b      	ldr	r3, [r3, #4]
 8005b94:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	69db      	ldr	r3, [r3, #28]
 8005b9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005ba2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005baa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005bac:	683b      	ldr	r3, [r7, #0]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	021b      	lsls	r3, r3, #8
 8005bb2:	68fa      	ldr	r2, [r7, #12]
 8005bb4:	4313      	orrs	r3, r2
 8005bb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005bb8:	693b      	ldr	r3, [r7, #16]
 8005bba:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005bbe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005bc0:	683b      	ldr	r3, [r7, #0]
 8005bc2:	689b      	ldr	r3, [r3, #8]
 8005bc4:	031b      	lsls	r3, r3, #12
 8005bc6:	693a      	ldr	r2, [r7, #16]
 8005bc8:	4313      	orrs	r3, r2
 8005bca:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	4a0f      	ldr	r2, [pc, #60]	; (8005c0c <TIM_OC4_SetConfig+0x98>)
 8005bd0:	4293      	cmp	r3, r2
 8005bd2:	d109      	bne.n	8005be8 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005bd4:	697b      	ldr	r3, [r7, #20]
 8005bd6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005bda:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005bdc:	683b      	ldr	r3, [r7, #0]
 8005bde:	695b      	ldr	r3, [r3, #20]
 8005be0:	019b      	lsls	r3, r3, #6
 8005be2:	697a      	ldr	r2, [r7, #20]
 8005be4:	4313      	orrs	r3, r2
 8005be6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	697a      	ldr	r2, [r7, #20]
 8005bec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	68fa      	ldr	r2, [r7, #12]
 8005bf2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005bf4:	683b      	ldr	r3, [r7, #0]
 8005bf6:	685a      	ldr	r2, [r3, #4]
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	693a      	ldr	r2, [r7, #16]
 8005c00:	621a      	str	r2, [r3, #32]
}
 8005c02:	bf00      	nop
 8005c04:	371c      	adds	r7, #28
 8005c06:	46bd      	mov	sp, r7
 8005c08:	bc80      	pop	{r7}
 8005c0a:	4770      	bx	lr
 8005c0c:	40012c00 	.word	0x40012c00

08005c10 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005c10:	b480      	push	{r7}
 8005c12:	b087      	sub	sp, #28
 8005c14:	af00      	add	r7, sp, #0
 8005c16:	60f8      	str	r0, [r7, #12]
 8005c18:	60b9      	str	r1, [r7, #8]
 8005c1a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	6a1b      	ldr	r3, [r3, #32]
 8005c20:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	6a1b      	ldr	r3, [r3, #32]
 8005c26:	f023 0201 	bic.w	r2, r3, #1
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	699b      	ldr	r3, [r3, #24]
 8005c32:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005c34:	693b      	ldr	r3, [r7, #16]
 8005c36:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005c3a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	011b      	lsls	r3, r3, #4
 8005c40:	693a      	ldr	r2, [r7, #16]
 8005c42:	4313      	orrs	r3, r2
 8005c44:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005c46:	697b      	ldr	r3, [r7, #20]
 8005c48:	f023 030a 	bic.w	r3, r3, #10
 8005c4c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005c4e:	697a      	ldr	r2, [r7, #20]
 8005c50:	68bb      	ldr	r3, [r7, #8]
 8005c52:	4313      	orrs	r3, r2
 8005c54:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	693a      	ldr	r2, [r7, #16]
 8005c5a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	697a      	ldr	r2, [r7, #20]
 8005c60:	621a      	str	r2, [r3, #32]
}
 8005c62:	bf00      	nop
 8005c64:	371c      	adds	r7, #28
 8005c66:	46bd      	mov	sp, r7
 8005c68:	bc80      	pop	{r7}
 8005c6a:	4770      	bx	lr

08005c6c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005c6c:	b480      	push	{r7}
 8005c6e:	b087      	sub	sp, #28
 8005c70:	af00      	add	r7, sp, #0
 8005c72:	60f8      	str	r0, [r7, #12]
 8005c74:	60b9      	str	r1, [r7, #8]
 8005c76:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	6a1b      	ldr	r3, [r3, #32]
 8005c7c:	f023 0210 	bic.w	r2, r3, #16
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	699b      	ldr	r3, [r3, #24]
 8005c88:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	6a1b      	ldr	r3, [r3, #32]
 8005c8e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005c90:	697b      	ldr	r3, [r7, #20]
 8005c92:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005c96:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	031b      	lsls	r3, r3, #12
 8005c9c:	697a      	ldr	r2, [r7, #20]
 8005c9e:	4313      	orrs	r3, r2
 8005ca0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005ca2:	693b      	ldr	r3, [r7, #16]
 8005ca4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005ca8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005caa:	68bb      	ldr	r3, [r7, #8]
 8005cac:	011b      	lsls	r3, r3, #4
 8005cae:	693a      	ldr	r2, [r7, #16]
 8005cb0:	4313      	orrs	r3, r2
 8005cb2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	697a      	ldr	r2, [r7, #20]
 8005cb8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	693a      	ldr	r2, [r7, #16]
 8005cbe:	621a      	str	r2, [r3, #32]
}
 8005cc0:	bf00      	nop
 8005cc2:	371c      	adds	r7, #28
 8005cc4:	46bd      	mov	sp, r7
 8005cc6:	bc80      	pop	{r7}
 8005cc8:	4770      	bx	lr

08005cca <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005cca:	b480      	push	{r7}
 8005ccc:	b085      	sub	sp, #20
 8005cce:	af00      	add	r7, sp, #0
 8005cd0:	6078      	str	r0, [r7, #4]
 8005cd2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	689b      	ldr	r3, [r3, #8]
 8005cd8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ce0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005ce2:	683a      	ldr	r2, [r7, #0]
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	4313      	orrs	r3, r2
 8005ce8:	f043 0307 	orr.w	r3, r3, #7
 8005cec:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	68fa      	ldr	r2, [r7, #12]
 8005cf2:	609a      	str	r2, [r3, #8]
}
 8005cf4:	bf00      	nop
 8005cf6:	3714      	adds	r7, #20
 8005cf8:	46bd      	mov	sp, r7
 8005cfa:	bc80      	pop	{r7}
 8005cfc:	4770      	bx	lr

08005cfe <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005cfe:	b480      	push	{r7}
 8005d00:	b087      	sub	sp, #28
 8005d02:	af00      	add	r7, sp, #0
 8005d04:	60f8      	str	r0, [r7, #12]
 8005d06:	60b9      	str	r1, [r7, #8]
 8005d08:	607a      	str	r2, [r7, #4]
 8005d0a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	689b      	ldr	r3, [r3, #8]
 8005d10:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005d12:	697b      	ldr	r3, [r7, #20]
 8005d14:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005d18:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005d1a:	683b      	ldr	r3, [r7, #0]
 8005d1c:	021a      	lsls	r2, r3, #8
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	431a      	orrs	r2, r3
 8005d22:	68bb      	ldr	r3, [r7, #8]
 8005d24:	4313      	orrs	r3, r2
 8005d26:	697a      	ldr	r2, [r7, #20]
 8005d28:	4313      	orrs	r3, r2
 8005d2a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	697a      	ldr	r2, [r7, #20]
 8005d30:	609a      	str	r2, [r3, #8]
}
 8005d32:	bf00      	nop
 8005d34:	371c      	adds	r7, #28
 8005d36:	46bd      	mov	sp, r7
 8005d38:	bc80      	pop	{r7}
 8005d3a:	4770      	bx	lr

08005d3c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005d3c:	b480      	push	{r7}
 8005d3e:	b085      	sub	sp, #20
 8005d40:	af00      	add	r7, sp, #0
 8005d42:	6078      	str	r0, [r7, #4]
 8005d44:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005d4c:	2b01      	cmp	r3, #1
 8005d4e:	d101      	bne.n	8005d54 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005d50:	2302      	movs	r3, #2
 8005d52:	e046      	b.n	8005de2 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	2201      	movs	r2, #1
 8005d58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	2202      	movs	r2, #2
 8005d60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	685b      	ldr	r3, [r3, #4]
 8005d6a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	689b      	ldr	r3, [r3, #8]
 8005d72:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d7a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005d7c:	683b      	ldr	r3, [r7, #0]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	68fa      	ldr	r2, [r7, #12]
 8005d82:	4313      	orrs	r3, r2
 8005d84:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	68fa      	ldr	r2, [r7, #12]
 8005d8c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	4a16      	ldr	r2, [pc, #88]	; (8005dec <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8005d94:	4293      	cmp	r3, r2
 8005d96:	d00e      	beq.n	8005db6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005da0:	d009      	beq.n	8005db6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	4a12      	ldr	r2, [pc, #72]	; (8005df0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8005da8:	4293      	cmp	r3, r2
 8005daa:	d004      	beq.n	8005db6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	4a10      	ldr	r2, [pc, #64]	; (8005df4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8005db2:	4293      	cmp	r3, r2
 8005db4:	d10c      	bne.n	8005dd0 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005db6:	68bb      	ldr	r3, [r7, #8]
 8005db8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005dbc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005dbe:	683b      	ldr	r3, [r7, #0]
 8005dc0:	685b      	ldr	r3, [r3, #4]
 8005dc2:	68ba      	ldr	r2, [r7, #8]
 8005dc4:	4313      	orrs	r3, r2
 8005dc6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	68ba      	ldr	r2, [r7, #8]
 8005dce:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	2201      	movs	r2, #1
 8005dd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	2200      	movs	r2, #0
 8005ddc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005de0:	2300      	movs	r3, #0
}
 8005de2:	4618      	mov	r0, r3
 8005de4:	3714      	adds	r7, #20
 8005de6:	46bd      	mov	sp, r7
 8005de8:	bc80      	pop	{r7}
 8005dea:	4770      	bx	lr
 8005dec:	40012c00 	.word	0x40012c00
 8005df0:	40000400 	.word	0x40000400
 8005df4:	40000800 	.word	0x40000800

08005df8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005df8:	b580      	push	{r7, lr}
 8005dfa:	b082      	sub	sp, #8
 8005dfc:	af00      	add	r7, sp, #0
 8005dfe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d101      	bne.n	8005e0a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005e06:	2301      	movs	r3, #1
 8005e08:	e03f      	b.n	8005e8a <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e10:	b2db      	uxtb	r3, r3
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d106      	bne.n	8005e24 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	2200      	movs	r2, #0
 8005e1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005e1e:	6878      	ldr	r0, [r7, #4]
 8005e20:	f7fc fd78 	bl	8002914 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	2224      	movs	r2, #36	; 0x24
 8005e28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	68da      	ldr	r2, [r3, #12]
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005e3a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005e3c:	6878      	ldr	r0, [r7, #4]
 8005e3e:	f000 f899 	bl	8005f74 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	691a      	ldr	r2, [r3, #16]
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005e50:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	695a      	ldr	r2, [r3, #20]
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005e60:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	68da      	ldr	r2, [r3, #12]
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005e70:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	2200      	movs	r2, #0
 8005e76:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	2220      	movs	r2, #32
 8005e7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	2220      	movs	r2, #32
 8005e84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005e88:	2300      	movs	r3, #0
}
 8005e8a:	4618      	mov	r0, r3
 8005e8c:	3708      	adds	r7, #8
 8005e8e:	46bd      	mov	sp, r7
 8005e90:	bd80      	pop	{r7, pc}

08005e92 <HAL_MultiProcessor_Init>:
  *            @arg UART_WAKEUPMETHOD_IDLELINE: Wake-up by an idle line detection
  *            @arg UART_WAKEUPMETHOD_ADDRESSMARK: Wake-up by an address mark
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MultiProcessor_Init(UART_HandleTypeDef *huart, uint8_t Address, uint32_t WakeUpMethod)
{
 8005e92:	b580      	push	{r7, lr}
 8005e94:	b084      	sub	sp, #16
 8005e96:	af00      	add	r7, sp, #0
 8005e98:	60f8      	str	r0, [r7, #12]
 8005e9a:	460b      	mov	r3, r1
 8005e9c:	607a      	str	r2, [r7, #4]
 8005e9e:	72fb      	strb	r3, [r7, #11]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d101      	bne.n	8005eaa <HAL_MultiProcessor_Init+0x18>
  {
    return HAL_ERROR;
 8005ea6:	2301      	movs	r3, #1
 8005ea8:	e05f      	b.n	8005f6a <HAL_MultiProcessor_Init+0xd8>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005eb0:	b2db      	uxtb	r3, r3
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d106      	bne.n	8005ec4 <HAL_MultiProcessor_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	2200      	movs	r2, #0
 8005eba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005ebe:	68f8      	ldr	r0, [r7, #12]
 8005ec0:	f7fc fd28 	bl	8002914 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	2224      	movs	r2, #36	; 0x24
 8005ec8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	68da      	ldr	r2, [r3, #12]
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005eda:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005edc:	68f8      	ldr	r0, [r7, #12]
 8005ede:	f000 f849 	bl	8005f74 <UART_SetConfig>

  /* In Multi-Processor mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register */
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	691a      	ldr	r2, [r3, #16]
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005ef0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	695a      	ldr	r2, [r3, #20]
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005f00:	615a      	str	r2, [r3, #20]

  /* Set the USART address node */
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_ADD);
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	691a      	ldr	r2, [r3, #16]
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	f022 020f 	bic.w	r2, r2, #15
 8005f10:	611a      	str	r2, [r3, #16]
  SET_BIT(huart->Instance->CR2, Address);
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	6919      	ldr	r1, [r3, #16]
 8005f18:	7afa      	ldrb	r2, [r7, #11]
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	430a      	orrs	r2, r1
 8005f20:	611a      	str	r2, [r3, #16]

  /* Set the wake up method by setting the WAKE bit in the CR1 register */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_WAKE);
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	68da      	ldr	r2, [r3, #12]
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005f30:	60da      	str	r2, [r3, #12]
  SET_BIT(huart->Instance->CR1, WakeUpMethod);
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	68d9      	ldr	r1, [r3, #12]
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	687a      	ldr	r2, [r7, #4]
 8005f3e:	430a      	orrs	r2, r1
 8005f40:	60da      	str	r2, [r3, #12]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	68da      	ldr	r2, [r3, #12]
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005f50:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	2200      	movs	r2, #0
 8005f56:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	2220      	movs	r2, #32
 8005f5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	2220      	movs	r2, #32
 8005f64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005f68:	2300      	movs	r3, #0
}
 8005f6a:	4618      	mov	r0, r3
 8005f6c:	3710      	adds	r7, #16
 8005f6e:	46bd      	mov	sp, r7
 8005f70:	bd80      	pop	{r7, pc}
	...

08005f74 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005f74:	b580      	push	{r7, lr}
 8005f76:	b084      	sub	sp, #16
 8005f78:	af00      	add	r7, sp, #0
 8005f7a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	691b      	ldr	r3, [r3, #16]
 8005f82:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	68da      	ldr	r2, [r3, #12]
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	430a      	orrs	r2, r1
 8005f90:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	689a      	ldr	r2, [r3, #8]
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	691b      	ldr	r3, [r3, #16]
 8005f9a:	431a      	orrs	r2, r3
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	695b      	ldr	r3, [r3, #20]
 8005fa0:	4313      	orrs	r3, r2
 8005fa2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	68db      	ldr	r3, [r3, #12]
 8005faa:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8005fae:	f023 030c 	bic.w	r3, r3, #12
 8005fb2:	687a      	ldr	r2, [r7, #4]
 8005fb4:	6812      	ldr	r2, [r2, #0]
 8005fb6:	68b9      	ldr	r1, [r7, #8]
 8005fb8:	430b      	orrs	r3, r1
 8005fba:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	695b      	ldr	r3, [r3, #20]
 8005fc2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	699a      	ldr	r2, [r3, #24]
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	430a      	orrs	r2, r1
 8005fd0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	4a2c      	ldr	r2, [pc, #176]	; (8006088 <UART_SetConfig+0x114>)
 8005fd8:	4293      	cmp	r3, r2
 8005fda:	d103      	bne.n	8005fe4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005fdc:	f7ff f9d2 	bl	8005384 <HAL_RCC_GetPCLK2Freq>
 8005fe0:	60f8      	str	r0, [r7, #12]
 8005fe2:	e002      	b.n	8005fea <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8005fe4:	f7ff f9ba 	bl	800535c <HAL_RCC_GetPCLK1Freq>
 8005fe8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005fea:	68fa      	ldr	r2, [r7, #12]
 8005fec:	4613      	mov	r3, r2
 8005fee:	009b      	lsls	r3, r3, #2
 8005ff0:	4413      	add	r3, r2
 8005ff2:	009a      	lsls	r2, r3, #2
 8005ff4:	441a      	add	r2, r3
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	685b      	ldr	r3, [r3, #4]
 8005ffa:	009b      	lsls	r3, r3, #2
 8005ffc:	fbb2 f3f3 	udiv	r3, r2, r3
 8006000:	4a22      	ldr	r2, [pc, #136]	; (800608c <UART_SetConfig+0x118>)
 8006002:	fba2 2303 	umull	r2, r3, r2, r3
 8006006:	095b      	lsrs	r3, r3, #5
 8006008:	0119      	lsls	r1, r3, #4
 800600a:	68fa      	ldr	r2, [r7, #12]
 800600c:	4613      	mov	r3, r2
 800600e:	009b      	lsls	r3, r3, #2
 8006010:	4413      	add	r3, r2
 8006012:	009a      	lsls	r2, r3, #2
 8006014:	441a      	add	r2, r3
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	685b      	ldr	r3, [r3, #4]
 800601a:	009b      	lsls	r3, r3, #2
 800601c:	fbb2 f2f3 	udiv	r2, r2, r3
 8006020:	4b1a      	ldr	r3, [pc, #104]	; (800608c <UART_SetConfig+0x118>)
 8006022:	fba3 0302 	umull	r0, r3, r3, r2
 8006026:	095b      	lsrs	r3, r3, #5
 8006028:	2064      	movs	r0, #100	; 0x64
 800602a:	fb00 f303 	mul.w	r3, r0, r3
 800602e:	1ad3      	subs	r3, r2, r3
 8006030:	011b      	lsls	r3, r3, #4
 8006032:	3332      	adds	r3, #50	; 0x32
 8006034:	4a15      	ldr	r2, [pc, #84]	; (800608c <UART_SetConfig+0x118>)
 8006036:	fba2 2303 	umull	r2, r3, r2, r3
 800603a:	095b      	lsrs	r3, r3, #5
 800603c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006040:	4419      	add	r1, r3
 8006042:	68fa      	ldr	r2, [r7, #12]
 8006044:	4613      	mov	r3, r2
 8006046:	009b      	lsls	r3, r3, #2
 8006048:	4413      	add	r3, r2
 800604a:	009a      	lsls	r2, r3, #2
 800604c:	441a      	add	r2, r3
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	685b      	ldr	r3, [r3, #4]
 8006052:	009b      	lsls	r3, r3, #2
 8006054:	fbb2 f2f3 	udiv	r2, r2, r3
 8006058:	4b0c      	ldr	r3, [pc, #48]	; (800608c <UART_SetConfig+0x118>)
 800605a:	fba3 0302 	umull	r0, r3, r3, r2
 800605e:	095b      	lsrs	r3, r3, #5
 8006060:	2064      	movs	r0, #100	; 0x64
 8006062:	fb00 f303 	mul.w	r3, r0, r3
 8006066:	1ad3      	subs	r3, r2, r3
 8006068:	011b      	lsls	r3, r3, #4
 800606a:	3332      	adds	r3, #50	; 0x32
 800606c:	4a07      	ldr	r2, [pc, #28]	; (800608c <UART_SetConfig+0x118>)
 800606e:	fba2 2303 	umull	r2, r3, r2, r3
 8006072:	095b      	lsrs	r3, r3, #5
 8006074:	f003 020f 	and.w	r2, r3, #15
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	440a      	add	r2, r1
 800607e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8006080:	bf00      	nop
 8006082:	3710      	adds	r7, #16
 8006084:	46bd      	mov	sp, r7
 8006086:	bd80      	pop	{r7, pc}
 8006088:	40013800 	.word	0x40013800
 800608c:	51eb851f 	.word	0x51eb851f

08006090 <__errno>:
 8006090:	4b01      	ldr	r3, [pc, #4]	; (8006098 <__errno+0x8>)
 8006092:	6818      	ldr	r0, [r3, #0]
 8006094:	4770      	bx	lr
 8006096:	bf00      	nop
 8006098:	2000000c 	.word	0x2000000c

0800609c <__libc_init_array>:
 800609c:	b570      	push	{r4, r5, r6, lr}
 800609e:	2600      	movs	r6, #0
 80060a0:	4d0c      	ldr	r5, [pc, #48]	; (80060d4 <__libc_init_array+0x38>)
 80060a2:	4c0d      	ldr	r4, [pc, #52]	; (80060d8 <__libc_init_array+0x3c>)
 80060a4:	1b64      	subs	r4, r4, r5
 80060a6:	10a4      	asrs	r4, r4, #2
 80060a8:	42a6      	cmp	r6, r4
 80060aa:	d109      	bne.n	80060c0 <__libc_init_array+0x24>
 80060ac:	f003 fc9e 	bl	80099ec <_init>
 80060b0:	2600      	movs	r6, #0
 80060b2:	4d0a      	ldr	r5, [pc, #40]	; (80060dc <__libc_init_array+0x40>)
 80060b4:	4c0a      	ldr	r4, [pc, #40]	; (80060e0 <__libc_init_array+0x44>)
 80060b6:	1b64      	subs	r4, r4, r5
 80060b8:	10a4      	asrs	r4, r4, #2
 80060ba:	42a6      	cmp	r6, r4
 80060bc:	d105      	bne.n	80060ca <__libc_init_array+0x2e>
 80060be:	bd70      	pop	{r4, r5, r6, pc}
 80060c0:	f855 3b04 	ldr.w	r3, [r5], #4
 80060c4:	4798      	blx	r3
 80060c6:	3601      	adds	r6, #1
 80060c8:	e7ee      	b.n	80060a8 <__libc_init_array+0xc>
 80060ca:	f855 3b04 	ldr.w	r3, [r5], #4
 80060ce:	4798      	blx	r3
 80060d0:	3601      	adds	r6, #1
 80060d2:	e7f2      	b.n	80060ba <__libc_init_array+0x1e>
 80060d4:	08009f28 	.word	0x08009f28
 80060d8:	08009f28 	.word	0x08009f28
 80060dc:	08009f28 	.word	0x08009f28
 80060e0:	08009f2c 	.word	0x08009f2c

080060e4 <memset>:
 80060e4:	4603      	mov	r3, r0
 80060e6:	4402      	add	r2, r0
 80060e8:	4293      	cmp	r3, r2
 80060ea:	d100      	bne.n	80060ee <memset+0xa>
 80060ec:	4770      	bx	lr
 80060ee:	f803 1b01 	strb.w	r1, [r3], #1
 80060f2:	e7f9      	b.n	80060e8 <memset+0x4>

080060f4 <__cvt>:
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80060fa:	461f      	mov	r7, r3
 80060fc:	bfbb      	ittet	lt
 80060fe:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8006102:	461f      	movlt	r7, r3
 8006104:	2300      	movge	r3, #0
 8006106:	232d      	movlt	r3, #45	; 0x2d
 8006108:	b088      	sub	sp, #32
 800610a:	4614      	mov	r4, r2
 800610c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800610e:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8006110:	7013      	strb	r3, [r2, #0]
 8006112:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006114:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8006118:	f023 0820 	bic.w	r8, r3, #32
 800611c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006120:	d005      	beq.n	800612e <__cvt+0x3a>
 8006122:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8006126:	d100      	bne.n	800612a <__cvt+0x36>
 8006128:	3501      	adds	r5, #1
 800612a:	2302      	movs	r3, #2
 800612c:	e000      	b.n	8006130 <__cvt+0x3c>
 800612e:	2303      	movs	r3, #3
 8006130:	aa07      	add	r2, sp, #28
 8006132:	9204      	str	r2, [sp, #16]
 8006134:	aa06      	add	r2, sp, #24
 8006136:	e9cd a202 	strd	sl, r2, [sp, #8]
 800613a:	e9cd 3500 	strd	r3, r5, [sp]
 800613e:	4622      	mov	r2, r4
 8006140:	463b      	mov	r3, r7
 8006142:	f000 fe11 	bl	8006d68 <_dtoa_r>
 8006146:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800614a:	4606      	mov	r6, r0
 800614c:	d102      	bne.n	8006154 <__cvt+0x60>
 800614e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006150:	07db      	lsls	r3, r3, #31
 8006152:	d522      	bpl.n	800619a <__cvt+0xa6>
 8006154:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006158:	eb06 0905 	add.w	r9, r6, r5
 800615c:	d110      	bne.n	8006180 <__cvt+0x8c>
 800615e:	7833      	ldrb	r3, [r6, #0]
 8006160:	2b30      	cmp	r3, #48	; 0x30
 8006162:	d10a      	bne.n	800617a <__cvt+0x86>
 8006164:	2200      	movs	r2, #0
 8006166:	2300      	movs	r3, #0
 8006168:	4620      	mov	r0, r4
 800616a:	4639      	mov	r1, r7
 800616c:	f7fa fc1c 	bl	80009a8 <__aeabi_dcmpeq>
 8006170:	b918      	cbnz	r0, 800617a <__cvt+0x86>
 8006172:	f1c5 0501 	rsb	r5, r5, #1
 8006176:	f8ca 5000 	str.w	r5, [sl]
 800617a:	f8da 3000 	ldr.w	r3, [sl]
 800617e:	4499      	add	r9, r3
 8006180:	2200      	movs	r2, #0
 8006182:	2300      	movs	r3, #0
 8006184:	4620      	mov	r0, r4
 8006186:	4639      	mov	r1, r7
 8006188:	f7fa fc0e 	bl	80009a8 <__aeabi_dcmpeq>
 800618c:	b108      	cbz	r0, 8006192 <__cvt+0x9e>
 800618e:	f8cd 901c 	str.w	r9, [sp, #28]
 8006192:	2230      	movs	r2, #48	; 0x30
 8006194:	9b07      	ldr	r3, [sp, #28]
 8006196:	454b      	cmp	r3, r9
 8006198:	d307      	bcc.n	80061aa <__cvt+0xb6>
 800619a:	4630      	mov	r0, r6
 800619c:	9b07      	ldr	r3, [sp, #28]
 800619e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80061a0:	1b9b      	subs	r3, r3, r6
 80061a2:	6013      	str	r3, [r2, #0]
 80061a4:	b008      	add	sp, #32
 80061a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80061aa:	1c59      	adds	r1, r3, #1
 80061ac:	9107      	str	r1, [sp, #28]
 80061ae:	701a      	strb	r2, [r3, #0]
 80061b0:	e7f0      	b.n	8006194 <__cvt+0xa0>

080061b2 <__exponent>:
 80061b2:	4603      	mov	r3, r0
 80061b4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80061b6:	2900      	cmp	r1, #0
 80061b8:	f803 2b02 	strb.w	r2, [r3], #2
 80061bc:	bfb6      	itet	lt
 80061be:	222d      	movlt	r2, #45	; 0x2d
 80061c0:	222b      	movge	r2, #43	; 0x2b
 80061c2:	4249      	neglt	r1, r1
 80061c4:	2909      	cmp	r1, #9
 80061c6:	7042      	strb	r2, [r0, #1]
 80061c8:	dd2b      	ble.n	8006222 <__exponent+0x70>
 80061ca:	f10d 0407 	add.w	r4, sp, #7
 80061ce:	46a4      	mov	ip, r4
 80061d0:	270a      	movs	r7, #10
 80061d2:	fb91 f6f7 	sdiv	r6, r1, r7
 80061d6:	460a      	mov	r2, r1
 80061d8:	46a6      	mov	lr, r4
 80061da:	fb07 1516 	mls	r5, r7, r6, r1
 80061de:	2a63      	cmp	r2, #99	; 0x63
 80061e0:	f105 0530 	add.w	r5, r5, #48	; 0x30
 80061e4:	4631      	mov	r1, r6
 80061e6:	f104 34ff 	add.w	r4, r4, #4294967295
 80061ea:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80061ee:	dcf0      	bgt.n	80061d2 <__exponent+0x20>
 80061f0:	3130      	adds	r1, #48	; 0x30
 80061f2:	f1ae 0502 	sub.w	r5, lr, #2
 80061f6:	f804 1c01 	strb.w	r1, [r4, #-1]
 80061fa:	4629      	mov	r1, r5
 80061fc:	1c44      	adds	r4, r0, #1
 80061fe:	4561      	cmp	r1, ip
 8006200:	d30a      	bcc.n	8006218 <__exponent+0x66>
 8006202:	f10d 0209 	add.w	r2, sp, #9
 8006206:	eba2 020e 	sub.w	r2, r2, lr
 800620a:	4565      	cmp	r5, ip
 800620c:	bf88      	it	hi
 800620e:	2200      	movhi	r2, #0
 8006210:	4413      	add	r3, r2
 8006212:	1a18      	subs	r0, r3, r0
 8006214:	b003      	add	sp, #12
 8006216:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006218:	f811 2b01 	ldrb.w	r2, [r1], #1
 800621c:	f804 2f01 	strb.w	r2, [r4, #1]!
 8006220:	e7ed      	b.n	80061fe <__exponent+0x4c>
 8006222:	2330      	movs	r3, #48	; 0x30
 8006224:	3130      	adds	r1, #48	; 0x30
 8006226:	7083      	strb	r3, [r0, #2]
 8006228:	70c1      	strb	r1, [r0, #3]
 800622a:	1d03      	adds	r3, r0, #4
 800622c:	e7f1      	b.n	8006212 <__exponent+0x60>
	...

08006230 <_printf_float>:
 8006230:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006234:	b091      	sub	sp, #68	; 0x44
 8006236:	460c      	mov	r4, r1
 8006238:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 800623c:	4616      	mov	r6, r2
 800623e:	461f      	mov	r7, r3
 8006240:	4605      	mov	r5, r0
 8006242:	f001 fd33 	bl	8007cac <_localeconv_r>
 8006246:	6803      	ldr	r3, [r0, #0]
 8006248:	4618      	mov	r0, r3
 800624a:	9309      	str	r3, [sp, #36]	; 0x24
 800624c:	f7f9 ff80 	bl	8000150 <strlen>
 8006250:	2300      	movs	r3, #0
 8006252:	930e      	str	r3, [sp, #56]	; 0x38
 8006254:	f8d8 3000 	ldr.w	r3, [r8]
 8006258:	900a      	str	r0, [sp, #40]	; 0x28
 800625a:	3307      	adds	r3, #7
 800625c:	f023 0307 	bic.w	r3, r3, #7
 8006260:	f103 0208 	add.w	r2, r3, #8
 8006264:	f894 9018 	ldrb.w	r9, [r4, #24]
 8006268:	f8d4 b000 	ldr.w	fp, [r4]
 800626c:	f8c8 2000 	str.w	r2, [r8]
 8006270:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006274:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8006278:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 800627c:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8006280:	930b      	str	r3, [sp, #44]	; 0x2c
 8006282:	f04f 32ff 	mov.w	r2, #4294967295
 8006286:	4640      	mov	r0, r8
 8006288:	4b9c      	ldr	r3, [pc, #624]	; (80064fc <_printf_float+0x2cc>)
 800628a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800628c:	f7fa fbbe 	bl	8000a0c <__aeabi_dcmpun>
 8006290:	bb70      	cbnz	r0, 80062f0 <_printf_float+0xc0>
 8006292:	f04f 32ff 	mov.w	r2, #4294967295
 8006296:	4640      	mov	r0, r8
 8006298:	4b98      	ldr	r3, [pc, #608]	; (80064fc <_printf_float+0x2cc>)
 800629a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800629c:	f7fa fb98 	bl	80009d0 <__aeabi_dcmple>
 80062a0:	bb30      	cbnz	r0, 80062f0 <_printf_float+0xc0>
 80062a2:	2200      	movs	r2, #0
 80062a4:	2300      	movs	r3, #0
 80062a6:	4640      	mov	r0, r8
 80062a8:	4651      	mov	r1, sl
 80062aa:	f7fa fb87 	bl	80009bc <__aeabi_dcmplt>
 80062ae:	b110      	cbz	r0, 80062b6 <_printf_float+0x86>
 80062b0:	232d      	movs	r3, #45	; 0x2d
 80062b2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80062b6:	4b92      	ldr	r3, [pc, #584]	; (8006500 <_printf_float+0x2d0>)
 80062b8:	4892      	ldr	r0, [pc, #584]	; (8006504 <_printf_float+0x2d4>)
 80062ba:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 80062be:	bf94      	ite	ls
 80062c0:	4698      	movls	r8, r3
 80062c2:	4680      	movhi	r8, r0
 80062c4:	2303      	movs	r3, #3
 80062c6:	f04f 0a00 	mov.w	sl, #0
 80062ca:	6123      	str	r3, [r4, #16]
 80062cc:	f02b 0304 	bic.w	r3, fp, #4
 80062d0:	6023      	str	r3, [r4, #0]
 80062d2:	4633      	mov	r3, r6
 80062d4:	4621      	mov	r1, r4
 80062d6:	4628      	mov	r0, r5
 80062d8:	9700      	str	r7, [sp, #0]
 80062da:	aa0f      	add	r2, sp, #60	; 0x3c
 80062dc:	f000 f9d4 	bl	8006688 <_printf_common>
 80062e0:	3001      	adds	r0, #1
 80062e2:	f040 8090 	bne.w	8006406 <_printf_float+0x1d6>
 80062e6:	f04f 30ff 	mov.w	r0, #4294967295
 80062ea:	b011      	add	sp, #68	; 0x44
 80062ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80062f0:	4642      	mov	r2, r8
 80062f2:	4653      	mov	r3, sl
 80062f4:	4640      	mov	r0, r8
 80062f6:	4651      	mov	r1, sl
 80062f8:	f7fa fb88 	bl	8000a0c <__aeabi_dcmpun>
 80062fc:	b148      	cbz	r0, 8006312 <_printf_float+0xe2>
 80062fe:	f1ba 0f00 	cmp.w	sl, #0
 8006302:	bfb8      	it	lt
 8006304:	232d      	movlt	r3, #45	; 0x2d
 8006306:	4880      	ldr	r0, [pc, #512]	; (8006508 <_printf_float+0x2d8>)
 8006308:	bfb8      	it	lt
 800630a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800630e:	4b7f      	ldr	r3, [pc, #508]	; (800650c <_printf_float+0x2dc>)
 8006310:	e7d3      	b.n	80062ba <_printf_float+0x8a>
 8006312:	6863      	ldr	r3, [r4, #4]
 8006314:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8006318:	1c5a      	adds	r2, r3, #1
 800631a:	d142      	bne.n	80063a2 <_printf_float+0x172>
 800631c:	2306      	movs	r3, #6
 800631e:	6063      	str	r3, [r4, #4]
 8006320:	2200      	movs	r2, #0
 8006322:	9206      	str	r2, [sp, #24]
 8006324:	aa0e      	add	r2, sp, #56	; 0x38
 8006326:	e9cd 9204 	strd	r9, r2, [sp, #16]
 800632a:	aa0d      	add	r2, sp, #52	; 0x34
 800632c:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8006330:	9203      	str	r2, [sp, #12]
 8006332:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8006336:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800633a:	6023      	str	r3, [r4, #0]
 800633c:	6863      	ldr	r3, [r4, #4]
 800633e:	4642      	mov	r2, r8
 8006340:	9300      	str	r3, [sp, #0]
 8006342:	4628      	mov	r0, r5
 8006344:	4653      	mov	r3, sl
 8006346:	910b      	str	r1, [sp, #44]	; 0x2c
 8006348:	f7ff fed4 	bl	80060f4 <__cvt>
 800634c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800634e:	4680      	mov	r8, r0
 8006350:	2947      	cmp	r1, #71	; 0x47
 8006352:	990d      	ldr	r1, [sp, #52]	; 0x34
 8006354:	d108      	bne.n	8006368 <_printf_float+0x138>
 8006356:	1cc8      	adds	r0, r1, #3
 8006358:	db02      	blt.n	8006360 <_printf_float+0x130>
 800635a:	6863      	ldr	r3, [r4, #4]
 800635c:	4299      	cmp	r1, r3
 800635e:	dd40      	ble.n	80063e2 <_printf_float+0x1b2>
 8006360:	f1a9 0902 	sub.w	r9, r9, #2
 8006364:	fa5f f989 	uxtb.w	r9, r9
 8006368:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800636c:	d81f      	bhi.n	80063ae <_printf_float+0x17e>
 800636e:	464a      	mov	r2, r9
 8006370:	3901      	subs	r1, #1
 8006372:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006376:	910d      	str	r1, [sp, #52]	; 0x34
 8006378:	f7ff ff1b 	bl	80061b2 <__exponent>
 800637c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800637e:	4682      	mov	sl, r0
 8006380:	1813      	adds	r3, r2, r0
 8006382:	2a01      	cmp	r2, #1
 8006384:	6123      	str	r3, [r4, #16]
 8006386:	dc02      	bgt.n	800638e <_printf_float+0x15e>
 8006388:	6822      	ldr	r2, [r4, #0]
 800638a:	07d2      	lsls	r2, r2, #31
 800638c:	d501      	bpl.n	8006392 <_printf_float+0x162>
 800638e:	3301      	adds	r3, #1
 8006390:	6123      	str	r3, [r4, #16]
 8006392:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8006396:	2b00      	cmp	r3, #0
 8006398:	d09b      	beq.n	80062d2 <_printf_float+0xa2>
 800639a:	232d      	movs	r3, #45	; 0x2d
 800639c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80063a0:	e797      	b.n	80062d2 <_printf_float+0xa2>
 80063a2:	2947      	cmp	r1, #71	; 0x47
 80063a4:	d1bc      	bne.n	8006320 <_printf_float+0xf0>
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d1ba      	bne.n	8006320 <_printf_float+0xf0>
 80063aa:	2301      	movs	r3, #1
 80063ac:	e7b7      	b.n	800631e <_printf_float+0xee>
 80063ae:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 80063b2:	d118      	bne.n	80063e6 <_printf_float+0x1b6>
 80063b4:	2900      	cmp	r1, #0
 80063b6:	6863      	ldr	r3, [r4, #4]
 80063b8:	dd0b      	ble.n	80063d2 <_printf_float+0x1a2>
 80063ba:	6121      	str	r1, [r4, #16]
 80063bc:	b913      	cbnz	r3, 80063c4 <_printf_float+0x194>
 80063be:	6822      	ldr	r2, [r4, #0]
 80063c0:	07d0      	lsls	r0, r2, #31
 80063c2:	d502      	bpl.n	80063ca <_printf_float+0x19a>
 80063c4:	3301      	adds	r3, #1
 80063c6:	440b      	add	r3, r1
 80063c8:	6123      	str	r3, [r4, #16]
 80063ca:	f04f 0a00 	mov.w	sl, #0
 80063ce:	65a1      	str	r1, [r4, #88]	; 0x58
 80063d0:	e7df      	b.n	8006392 <_printf_float+0x162>
 80063d2:	b913      	cbnz	r3, 80063da <_printf_float+0x1aa>
 80063d4:	6822      	ldr	r2, [r4, #0]
 80063d6:	07d2      	lsls	r2, r2, #31
 80063d8:	d501      	bpl.n	80063de <_printf_float+0x1ae>
 80063da:	3302      	adds	r3, #2
 80063dc:	e7f4      	b.n	80063c8 <_printf_float+0x198>
 80063de:	2301      	movs	r3, #1
 80063e0:	e7f2      	b.n	80063c8 <_printf_float+0x198>
 80063e2:	f04f 0967 	mov.w	r9, #103	; 0x67
 80063e6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80063e8:	4299      	cmp	r1, r3
 80063ea:	db05      	blt.n	80063f8 <_printf_float+0x1c8>
 80063ec:	6823      	ldr	r3, [r4, #0]
 80063ee:	6121      	str	r1, [r4, #16]
 80063f0:	07d8      	lsls	r0, r3, #31
 80063f2:	d5ea      	bpl.n	80063ca <_printf_float+0x19a>
 80063f4:	1c4b      	adds	r3, r1, #1
 80063f6:	e7e7      	b.n	80063c8 <_printf_float+0x198>
 80063f8:	2900      	cmp	r1, #0
 80063fa:	bfcc      	ite	gt
 80063fc:	2201      	movgt	r2, #1
 80063fe:	f1c1 0202 	rsble	r2, r1, #2
 8006402:	4413      	add	r3, r2
 8006404:	e7e0      	b.n	80063c8 <_printf_float+0x198>
 8006406:	6823      	ldr	r3, [r4, #0]
 8006408:	055a      	lsls	r2, r3, #21
 800640a:	d407      	bmi.n	800641c <_printf_float+0x1ec>
 800640c:	6923      	ldr	r3, [r4, #16]
 800640e:	4642      	mov	r2, r8
 8006410:	4631      	mov	r1, r6
 8006412:	4628      	mov	r0, r5
 8006414:	47b8      	blx	r7
 8006416:	3001      	adds	r0, #1
 8006418:	d12b      	bne.n	8006472 <_printf_float+0x242>
 800641a:	e764      	b.n	80062e6 <_printf_float+0xb6>
 800641c:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8006420:	f240 80dd 	bls.w	80065de <_printf_float+0x3ae>
 8006424:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006428:	2200      	movs	r2, #0
 800642a:	2300      	movs	r3, #0
 800642c:	f7fa fabc 	bl	80009a8 <__aeabi_dcmpeq>
 8006430:	2800      	cmp	r0, #0
 8006432:	d033      	beq.n	800649c <_printf_float+0x26c>
 8006434:	2301      	movs	r3, #1
 8006436:	4631      	mov	r1, r6
 8006438:	4628      	mov	r0, r5
 800643a:	4a35      	ldr	r2, [pc, #212]	; (8006510 <_printf_float+0x2e0>)
 800643c:	47b8      	blx	r7
 800643e:	3001      	adds	r0, #1
 8006440:	f43f af51 	beq.w	80062e6 <_printf_float+0xb6>
 8006444:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8006448:	429a      	cmp	r2, r3
 800644a:	db02      	blt.n	8006452 <_printf_float+0x222>
 800644c:	6823      	ldr	r3, [r4, #0]
 800644e:	07d8      	lsls	r0, r3, #31
 8006450:	d50f      	bpl.n	8006472 <_printf_float+0x242>
 8006452:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006456:	4631      	mov	r1, r6
 8006458:	4628      	mov	r0, r5
 800645a:	47b8      	blx	r7
 800645c:	3001      	adds	r0, #1
 800645e:	f43f af42 	beq.w	80062e6 <_printf_float+0xb6>
 8006462:	f04f 0800 	mov.w	r8, #0
 8006466:	f104 091a 	add.w	r9, r4, #26
 800646a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800646c:	3b01      	subs	r3, #1
 800646e:	4543      	cmp	r3, r8
 8006470:	dc09      	bgt.n	8006486 <_printf_float+0x256>
 8006472:	6823      	ldr	r3, [r4, #0]
 8006474:	079b      	lsls	r3, r3, #30
 8006476:	f100 8102 	bmi.w	800667e <_printf_float+0x44e>
 800647a:	68e0      	ldr	r0, [r4, #12]
 800647c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800647e:	4298      	cmp	r0, r3
 8006480:	bfb8      	it	lt
 8006482:	4618      	movlt	r0, r3
 8006484:	e731      	b.n	80062ea <_printf_float+0xba>
 8006486:	2301      	movs	r3, #1
 8006488:	464a      	mov	r2, r9
 800648a:	4631      	mov	r1, r6
 800648c:	4628      	mov	r0, r5
 800648e:	47b8      	blx	r7
 8006490:	3001      	adds	r0, #1
 8006492:	f43f af28 	beq.w	80062e6 <_printf_float+0xb6>
 8006496:	f108 0801 	add.w	r8, r8, #1
 800649a:	e7e6      	b.n	800646a <_printf_float+0x23a>
 800649c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800649e:	2b00      	cmp	r3, #0
 80064a0:	dc38      	bgt.n	8006514 <_printf_float+0x2e4>
 80064a2:	2301      	movs	r3, #1
 80064a4:	4631      	mov	r1, r6
 80064a6:	4628      	mov	r0, r5
 80064a8:	4a19      	ldr	r2, [pc, #100]	; (8006510 <_printf_float+0x2e0>)
 80064aa:	47b8      	blx	r7
 80064ac:	3001      	adds	r0, #1
 80064ae:	f43f af1a 	beq.w	80062e6 <_printf_float+0xb6>
 80064b2:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80064b6:	4313      	orrs	r3, r2
 80064b8:	d102      	bne.n	80064c0 <_printf_float+0x290>
 80064ba:	6823      	ldr	r3, [r4, #0]
 80064bc:	07d9      	lsls	r1, r3, #31
 80064be:	d5d8      	bpl.n	8006472 <_printf_float+0x242>
 80064c0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80064c4:	4631      	mov	r1, r6
 80064c6:	4628      	mov	r0, r5
 80064c8:	47b8      	blx	r7
 80064ca:	3001      	adds	r0, #1
 80064cc:	f43f af0b 	beq.w	80062e6 <_printf_float+0xb6>
 80064d0:	f04f 0900 	mov.w	r9, #0
 80064d4:	f104 0a1a 	add.w	sl, r4, #26
 80064d8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80064da:	425b      	negs	r3, r3
 80064dc:	454b      	cmp	r3, r9
 80064de:	dc01      	bgt.n	80064e4 <_printf_float+0x2b4>
 80064e0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80064e2:	e794      	b.n	800640e <_printf_float+0x1de>
 80064e4:	2301      	movs	r3, #1
 80064e6:	4652      	mov	r2, sl
 80064e8:	4631      	mov	r1, r6
 80064ea:	4628      	mov	r0, r5
 80064ec:	47b8      	blx	r7
 80064ee:	3001      	adds	r0, #1
 80064f0:	f43f aef9 	beq.w	80062e6 <_printf_float+0xb6>
 80064f4:	f109 0901 	add.w	r9, r9, #1
 80064f8:	e7ee      	b.n	80064d8 <_printf_float+0x2a8>
 80064fa:	bf00      	nop
 80064fc:	7fefffff 	.word	0x7fefffff
 8006500:	08009b18 	.word	0x08009b18
 8006504:	08009b1c 	.word	0x08009b1c
 8006508:	08009b24 	.word	0x08009b24
 800650c:	08009b20 	.word	0x08009b20
 8006510:	08009b28 	.word	0x08009b28
 8006514:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006516:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006518:	429a      	cmp	r2, r3
 800651a:	bfa8      	it	ge
 800651c:	461a      	movge	r2, r3
 800651e:	2a00      	cmp	r2, #0
 8006520:	4691      	mov	r9, r2
 8006522:	dc37      	bgt.n	8006594 <_printf_float+0x364>
 8006524:	f04f 0b00 	mov.w	fp, #0
 8006528:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800652c:	f104 021a 	add.w	r2, r4, #26
 8006530:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8006534:	ebaa 0309 	sub.w	r3, sl, r9
 8006538:	455b      	cmp	r3, fp
 800653a:	dc33      	bgt.n	80065a4 <_printf_float+0x374>
 800653c:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8006540:	429a      	cmp	r2, r3
 8006542:	db3b      	blt.n	80065bc <_printf_float+0x38c>
 8006544:	6823      	ldr	r3, [r4, #0]
 8006546:	07da      	lsls	r2, r3, #31
 8006548:	d438      	bmi.n	80065bc <_printf_float+0x38c>
 800654a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800654c:	990d      	ldr	r1, [sp, #52]	; 0x34
 800654e:	eba3 020a 	sub.w	r2, r3, sl
 8006552:	eba3 0901 	sub.w	r9, r3, r1
 8006556:	4591      	cmp	r9, r2
 8006558:	bfa8      	it	ge
 800655a:	4691      	movge	r9, r2
 800655c:	f1b9 0f00 	cmp.w	r9, #0
 8006560:	dc34      	bgt.n	80065cc <_printf_float+0x39c>
 8006562:	f04f 0800 	mov.w	r8, #0
 8006566:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800656a:	f104 0a1a 	add.w	sl, r4, #26
 800656e:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8006572:	1a9b      	subs	r3, r3, r2
 8006574:	eba3 0309 	sub.w	r3, r3, r9
 8006578:	4543      	cmp	r3, r8
 800657a:	f77f af7a 	ble.w	8006472 <_printf_float+0x242>
 800657e:	2301      	movs	r3, #1
 8006580:	4652      	mov	r2, sl
 8006582:	4631      	mov	r1, r6
 8006584:	4628      	mov	r0, r5
 8006586:	47b8      	blx	r7
 8006588:	3001      	adds	r0, #1
 800658a:	f43f aeac 	beq.w	80062e6 <_printf_float+0xb6>
 800658e:	f108 0801 	add.w	r8, r8, #1
 8006592:	e7ec      	b.n	800656e <_printf_float+0x33e>
 8006594:	4613      	mov	r3, r2
 8006596:	4631      	mov	r1, r6
 8006598:	4642      	mov	r2, r8
 800659a:	4628      	mov	r0, r5
 800659c:	47b8      	blx	r7
 800659e:	3001      	adds	r0, #1
 80065a0:	d1c0      	bne.n	8006524 <_printf_float+0x2f4>
 80065a2:	e6a0      	b.n	80062e6 <_printf_float+0xb6>
 80065a4:	2301      	movs	r3, #1
 80065a6:	4631      	mov	r1, r6
 80065a8:	4628      	mov	r0, r5
 80065aa:	920b      	str	r2, [sp, #44]	; 0x2c
 80065ac:	47b8      	blx	r7
 80065ae:	3001      	adds	r0, #1
 80065b0:	f43f ae99 	beq.w	80062e6 <_printf_float+0xb6>
 80065b4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80065b6:	f10b 0b01 	add.w	fp, fp, #1
 80065ba:	e7b9      	b.n	8006530 <_printf_float+0x300>
 80065bc:	4631      	mov	r1, r6
 80065be:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80065c2:	4628      	mov	r0, r5
 80065c4:	47b8      	blx	r7
 80065c6:	3001      	adds	r0, #1
 80065c8:	d1bf      	bne.n	800654a <_printf_float+0x31a>
 80065ca:	e68c      	b.n	80062e6 <_printf_float+0xb6>
 80065cc:	464b      	mov	r3, r9
 80065ce:	4631      	mov	r1, r6
 80065d0:	4628      	mov	r0, r5
 80065d2:	eb08 020a 	add.w	r2, r8, sl
 80065d6:	47b8      	blx	r7
 80065d8:	3001      	adds	r0, #1
 80065da:	d1c2      	bne.n	8006562 <_printf_float+0x332>
 80065dc:	e683      	b.n	80062e6 <_printf_float+0xb6>
 80065de:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80065e0:	2a01      	cmp	r2, #1
 80065e2:	dc01      	bgt.n	80065e8 <_printf_float+0x3b8>
 80065e4:	07db      	lsls	r3, r3, #31
 80065e6:	d537      	bpl.n	8006658 <_printf_float+0x428>
 80065e8:	2301      	movs	r3, #1
 80065ea:	4642      	mov	r2, r8
 80065ec:	4631      	mov	r1, r6
 80065ee:	4628      	mov	r0, r5
 80065f0:	47b8      	blx	r7
 80065f2:	3001      	adds	r0, #1
 80065f4:	f43f ae77 	beq.w	80062e6 <_printf_float+0xb6>
 80065f8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80065fc:	4631      	mov	r1, r6
 80065fe:	4628      	mov	r0, r5
 8006600:	47b8      	blx	r7
 8006602:	3001      	adds	r0, #1
 8006604:	f43f ae6f 	beq.w	80062e6 <_printf_float+0xb6>
 8006608:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800660c:	2200      	movs	r2, #0
 800660e:	2300      	movs	r3, #0
 8006610:	f7fa f9ca 	bl	80009a8 <__aeabi_dcmpeq>
 8006614:	b9d8      	cbnz	r0, 800664e <_printf_float+0x41e>
 8006616:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006618:	f108 0201 	add.w	r2, r8, #1
 800661c:	3b01      	subs	r3, #1
 800661e:	4631      	mov	r1, r6
 8006620:	4628      	mov	r0, r5
 8006622:	47b8      	blx	r7
 8006624:	3001      	adds	r0, #1
 8006626:	d10e      	bne.n	8006646 <_printf_float+0x416>
 8006628:	e65d      	b.n	80062e6 <_printf_float+0xb6>
 800662a:	2301      	movs	r3, #1
 800662c:	464a      	mov	r2, r9
 800662e:	4631      	mov	r1, r6
 8006630:	4628      	mov	r0, r5
 8006632:	47b8      	blx	r7
 8006634:	3001      	adds	r0, #1
 8006636:	f43f ae56 	beq.w	80062e6 <_printf_float+0xb6>
 800663a:	f108 0801 	add.w	r8, r8, #1
 800663e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006640:	3b01      	subs	r3, #1
 8006642:	4543      	cmp	r3, r8
 8006644:	dcf1      	bgt.n	800662a <_printf_float+0x3fa>
 8006646:	4653      	mov	r3, sl
 8006648:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800664c:	e6e0      	b.n	8006410 <_printf_float+0x1e0>
 800664e:	f04f 0800 	mov.w	r8, #0
 8006652:	f104 091a 	add.w	r9, r4, #26
 8006656:	e7f2      	b.n	800663e <_printf_float+0x40e>
 8006658:	2301      	movs	r3, #1
 800665a:	4642      	mov	r2, r8
 800665c:	e7df      	b.n	800661e <_printf_float+0x3ee>
 800665e:	2301      	movs	r3, #1
 8006660:	464a      	mov	r2, r9
 8006662:	4631      	mov	r1, r6
 8006664:	4628      	mov	r0, r5
 8006666:	47b8      	blx	r7
 8006668:	3001      	adds	r0, #1
 800666a:	f43f ae3c 	beq.w	80062e6 <_printf_float+0xb6>
 800666e:	f108 0801 	add.w	r8, r8, #1
 8006672:	68e3      	ldr	r3, [r4, #12]
 8006674:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8006676:	1a5b      	subs	r3, r3, r1
 8006678:	4543      	cmp	r3, r8
 800667a:	dcf0      	bgt.n	800665e <_printf_float+0x42e>
 800667c:	e6fd      	b.n	800647a <_printf_float+0x24a>
 800667e:	f04f 0800 	mov.w	r8, #0
 8006682:	f104 0919 	add.w	r9, r4, #25
 8006686:	e7f4      	b.n	8006672 <_printf_float+0x442>

08006688 <_printf_common>:
 8006688:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800668c:	4616      	mov	r6, r2
 800668e:	4699      	mov	r9, r3
 8006690:	688a      	ldr	r2, [r1, #8]
 8006692:	690b      	ldr	r3, [r1, #16]
 8006694:	4607      	mov	r7, r0
 8006696:	4293      	cmp	r3, r2
 8006698:	bfb8      	it	lt
 800669a:	4613      	movlt	r3, r2
 800669c:	6033      	str	r3, [r6, #0]
 800669e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80066a2:	460c      	mov	r4, r1
 80066a4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80066a8:	b10a      	cbz	r2, 80066ae <_printf_common+0x26>
 80066aa:	3301      	adds	r3, #1
 80066ac:	6033      	str	r3, [r6, #0]
 80066ae:	6823      	ldr	r3, [r4, #0]
 80066b0:	0699      	lsls	r1, r3, #26
 80066b2:	bf42      	ittt	mi
 80066b4:	6833      	ldrmi	r3, [r6, #0]
 80066b6:	3302      	addmi	r3, #2
 80066b8:	6033      	strmi	r3, [r6, #0]
 80066ba:	6825      	ldr	r5, [r4, #0]
 80066bc:	f015 0506 	ands.w	r5, r5, #6
 80066c0:	d106      	bne.n	80066d0 <_printf_common+0x48>
 80066c2:	f104 0a19 	add.w	sl, r4, #25
 80066c6:	68e3      	ldr	r3, [r4, #12]
 80066c8:	6832      	ldr	r2, [r6, #0]
 80066ca:	1a9b      	subs	r3, r3, r2
 80066cc:	42ab      	cmp	r3, r5
 80066ce:	dc28      	bgt.n	8006722 <_printf_common+0x9a>
 80066d0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80066d4:	1e13      	subs	r3, r2, #0
 80066d6:	6822      	ldr	r2, [r4, #0]
 80066d8:	bf18      	it	ne
 80066da:	2301      	movne	r3, #1
 80066dc:	0692      	lsls	r2, r2, #26
 80066de:	d42d      	bmi.n	800673c <_printf_common+0xb4>
 80066e0:	4649      	mov	r1, r9
 80066e2:	4638      	mov	r0, r7
 80066e4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80066e8:	47c0      	blx	r8
 80066ea:	3001      	adds	r0, #1
 80066ec:	d020      	beq.n	8006730 <_printf_common+0xa8>
 80066ee:	6823      	ldr	r3, [r4, #0]
 80066f0:	68e5      	ldr	r5, [r4, #12]
 80066f2:	f003 0306 	and.w	r3, r3, #6
 80066f6:	2b04      	cmp	r3, #4
 80066f8:	bf18      	it	ne
 80066fa:	2500      	movne	r5, #0
 80066fc:	6832      	ldr	r2, [r6, #0]
 80066fe:	f04f 0600 	mov.w	r6, #0
 8006702:	68a3      	ldr	r3, [r4, #8]
 8006704:	bf08      	it	eq
 8006706:	1aad      	subeq	r5, r5, r2
 8006708:	6922      	ldr	r2, [r4, #16]
 800670a:	bf08      	it	eq
 800670c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006710:	4293      	cmp	r3, r2
 8006712:	bfc4      	itt	gt
 8006714:	1a9b      	subgt	r3, r3, r2
 8006716:	18ed      	addgt	r5, r5, r3
 8006718:	341a      	adds	r4, #26
 800671a:	42b5      	cmp	r5, r6
 800671c:	d11a      	bne.n	8006754 <_printf_common+0xcc>
 800671e:	2000      	movs	r0, #0
 8006720:	e008      	b.n	8006734 <_printf_common+0xac>
 8006722:	2301      	movs	r3, #1
 8006724:	4652      	mov	r2, sl
 8006726:	4649      	mov	r1, r9
 8006728:	4638      	mov	r0, r7
 800672a:	47c0      	blx	r8
 800672c:	3001      	adds	r0, #1
 800672e:	d103      	bne.n	8006738 <_printf_common+0xb0>
 8006730:	f04f 30ff 	mov.w	r0, #4294967295
 8006734:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006738:	3501      	adds	r5, #1
 800673a:	e7c4      	b.n	80066c6 <_printf_common+0x3e>
 800673c:	2030      	movs	r0, #48	; 0x30
 800673e:	18e1      	adds	r1, r4, r3
 8006740:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006744:	1c5a      	adds	r2, r3, #1
 8006746:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800674a:	4422      	add	r2, r4
 800674c:	3302      	adds	r3, #2
 800674e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006752:	e7c5      	b.n	80066e0 <_printf_common+0x58>
 8006754:	2301      	movs	r3, #1
 8006756:	4622      	mov	r2, r4
 8006758:	4649      	mov	r1, r9
 800675a:	4638      	mov	r0, r7
 800675c:	47c0      	blx	r8
 800675e:	3001      	adds	r0, #1
 8006760:	d0e6      	beq.n	8006730 <_printf_common+0xa8>
 8006762:	3601      	adds	r6, #1
 8006764:	e7d9      	b.n	800671a <_printf_common+0x92>
	...

08006768 <_printf_i>:
 8006768:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800676c:	7e0f      	ldrb	r7, [r1, #24]
 800676e:	4691      	mov	r9, r2
 8006770:	2f78      	cmp	r7, #120	; 0x78
 8006772:	4680      	mov	r8, r0
 8006774:	460c      	mov	r4, r1
 8006776:	469a      	mov	sl, r3
 8006778:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800677a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800677e:	d807      	bhi.n	8006790 <_printf_i+0x28>
 8006780:	2f62      	cmp	r7, #98	; 0x62
 8006782:	d80a      	bhi.n	800679a <_printf_i+0x32>
 8006784:	2f00      	cmp	r7, #0
 8006786:	f000 80d9 	beq.w	800693c <_printf_i+0x1d4>
 800678a:	2f58      	cmp	r7, #88	; 0x58
 800678c:	f000 80a4 	beq.w	80068d8 <_printf_i+0x170>
 8006790:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006794:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006798:	e03a      	b.n	8006810 <_printf_i+0xa8>
 800679a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800679e:	2b15      	cmp	r3, #21
 80067a0:	d8f6      	bhi.n	8006790 <_printf_i+0x28>
 80067a2:	a101      	add	r1, pc, #4	; (adr r1, 80067a8 <_printf_i+0x40>)
 80067a4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80067a8:	08006801 	.word	0x08006801
 80067ac:	08006815 	.word	0x08006815
 80067b0:	08006791 	.word	0x08006791
 80067b4:	08006791 	.word	0x08006791
 80067b8:	08006791 	.word	0x08006791
 80067bc:	08006791 	.word	0x08006791
 80067c0:	08006815 	.word	0x08006815
 80067c4:	08006791 	.word	0x08006791
 80067c8:	08006791 	.word	0x08006791
 80067cc:	08006791 	.word	0x08006791
 80067d0:	08006791 	.word	0x08006791
 80067d4:	08006923 	.word	0x08006923
 80067d8:	08006845 	.word	0x08006845
 80067dc:	08006905 	.word	0x08006905
 80067e0:	08006791 	.word	0x08006791
 80067e4:	08006791 	.word	0x08006791
 80067e8:	08006945 	.word	0x08006945
 80067ec:	08006791 	.word	0x08006791
 80067f0:	08006845 	.word	0x08006845
 80067f4:	08006791 	.word	0x08006791
 80067f8:	08006791 	.word	0x08006791
 80067fc:	0800690d 	.word	0x0800690d
 8006800:	682b      	ldr	r3, [r5, #0]
 8006802:	1d1a      	adds	r2, r3, #4
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	602a      	str	r2, [r5, #0]
 8006808:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800680c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006810:	2301      	movs	r3, #1
 8006812:	e0a4      	b.n	800695e <_printf_i+0x1f6>
 8006814:	6820      	ldr	r0, [r4, #0]
 8006816:	6829      	ldr	r1, [r5, #0]
 8006818:	0606      	lsls	r6, r0, #24
 800681a:	f101 0304 	add.w	r3, r1, #4
 800681e:	d50a      	bpl.n	8006836 <_printf_i+0xce>
 8006820:	680e      	ldr	r6, [r1, #0]
 8006822:	602b      	str	r3, [r5, #0]
 8006824:	2e00      	cmp	r6, #0
 8006826:	da03      	bge.n	8006830 <_printf_i+0xc8>
 8006828:	232d      	movs	r3, #45	; 0x2d
 800682a:	4276      	negs	r6, r6
 800682c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006830:	230a      	movs	r3, #10
 8006832:	485e      	ldr	r0, [pc, #376]	; (80069ac <_printf_i+0x244>)
 8006834:	e019      	b.n	800686a <_printf_i+0x102>
 8006836:	680e      	ldr	r6, [r1, #0]
 8006838:	f010 0f40 	tst.w	r0, #64	; 0x40
 800683c:	602b      	str	r3, [r5, #0]
 800683e:	bf18      	it	ne
 8006840:	b236      	sxthne	r6, r6
 8006842:	e7ef      	b.n	8006824 <_printf_i+0xbc>
 8006844:	682b      	ldr	r3, [r5, #0]
 8006846:	6820      	ldr	r0, [r4, #0]
 8006848:	1d19      	adds	r1, r3, #4
 800684a:	6029      	str	r1, [r5, #0]
 800684c:	0601      	lsls	r1, r0, #24
 800684e:	d501      	bpl.n	8006854 <_printf_i+0xec>
 8006850:	681e      	ldr	r6, [r3, #0]
 8006852:	e002      	b.n	800685a <_printf_i+0xf2>
 8006854:	0646      	lsls	r6, r0, #25
 8006856:	d5fb      	bpl.n	8006850 <_printf_i+0xe8>
 8006858:	881e      	ldrh	r6, [r3, #0]
 800685a:	2f6f      	cmp	r7, #111	; 0x6f
 800685c:	bf0c      	ite	eq
 800685e:	2308      	moveq	r3, #8
 8006860:	230a      	movne	r3, #10
 8006862:	4852      	ldr	r0, [pc, #328]	; (80069ac <_printf_i+0x244>)
 8006864:	2100      	movs	r1, #0
 8006866:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800686a:	6865      	ldr	r5, [r4, #4]
 800686c:	2d00      	cmp	r5, #0
 800686e:	bfa8      	it	ge
 8006870:	6821      	ldrge	r1, [r4, #0]
 8006872:	60a5      	str	r5, [r4, #8]
 8006874:	bfa4      	itt	ge
 8006876:	f021 0104 	bicge.w	r1, r1, #4
 800687a:	6021      	strge	r1, [r4, #0]
 800687c:	b90e      	cbnz	r6, 8006882 <_printf_i+0x11a>
 800687e:	2d00      	cmp	r5, #0
 8006880:	d04d      	beq.n	800691e <_printf_i+0x1b6>
 8006882:	4615      	mov	r5, r2
 8006884:	fbb6 f1f3 	udiv	r1, r6, r3
 8006888:	fb03 6711 	mls	r7, r3, r1, r6
 800688c:	5dc7      	ldrb	r7, [r0, r7]
 800688e:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006892:	4637      	mov	r7, r6
 8006894:	42bb      	cmp	r3, r7
 8006896:	460e      	mov	r6, r1
 8006898:	d9f4      	bls.n	8006884 <_printf_i+0x11c>
 800689a:	2b08      	cmp	r3, #8
 800689c:	d10b      	bne.n	80068b6 <_printf_i+0x14e>
 800689e:	6823      	ldr	r3, [r4, #0]
 80068a0:	07de      	lsls	r6, r3, #31
 80068a2:	d508      	bpl.n	80068b6 <_printf_i+0x14e>
 80068a4:	6923      	ldr	r3, [r4, #16]
 80068a6:	6861      	ldr	r1, [r4, #4]
 80068a8:	4299      	cmp	r1, r3
 80068aa:	bfde      	ittt	le
 80068ac:	2330      	movle	r3, #48	; 0x30
 80068ae:	f805 3c01 	strble.w	r3, [r5, #-1]
 80068b2:	f105 35ff 	addle.w	r5, r5, #4294967295
 80068b6:	1b52      	subs	r2, r2, r5
 80068b8:	6122      	str	r2, [r4, #16]
 80068ba:	464b      	mov	r3, r9
 80068bc:	4621      	mov	r1, r4
 80068be:	4640      	mov	r0, r8
 80068c0:	f8cd a000 	str.w	sl, [sp]
 80068c4:	aa03      	add	r2, sp, #12
 80068c6:	f7ff fedf 	bl	8006688 <_printf_common>
 80068ca:	3001      	adds	r0, #1
 80068cc:	d14c      	bne.n	8006968 <_printf_i+0x200>
 80068ce:	f04f 30ff 	mov.w	r0, #4294967295
 80068d2:	b004      	add	sp, #16
 80068d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80068d8:	4834      	ldr	r0, [pc, #208]	; (80069ac <_printf_i+0x244>)
 80068da:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80068de:	6829      	ldr	r1, [r5, #0]
 80068e0:	6823      	ldr	r3, [r4, #0]
 80068e2:	f851 6b04 	ldr.w	r6, [r1], #4
 80068e6:	6029      	str	r1, [r5, #0]
 80068e8:	061d      	lsls	r5, r3, #24
 80068ea:	d514      	bpl.n	8006916 <_printf_i+0x1ae>
 80068ec:	07df      	lsls	r7, r3, #31
 80068ee:	bf44      	itt	mi
 80068f0:	f043 0320 	orrmi.w	r3, r3, #32
 80068f4:	6023      	strmi	r3, [r4, #0]
 80068f6:	b91e      	cbnz	r6, 8006900 <_printf_i+0x198>
 80068f8:	6823      	ldr	r3, [r4, #0]
 80068fa:	f023 0320 	bic.w	r3, r3, #32
 80068fe:	6023      	str	r3, [r4, #0]
 8006900:	2310      	movs	r3, #16
 8006902:	e7af      	b.n	8006864 <_printf_i+0xfc>
 8006904:	6823      	ldr	r3, [r4, #0]
 8006906:	f043 0320 	orr.w	r3, r3, #32
 800690a:	6023      	str	r3, [r4, #0]
 800690c:	2378      	movs	r3, #120	; 0x78
 800690e:	4828      	ldr	r0, [pc, #160]	; (80069b0 <_printf_i+0x248>)
 8006910:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006914:	e7e3      	b.n	80068de <_printf_i+0x176>
 8006916:	0659      	lsls	r1, r3, #25
 8006918:	bf48      	it	mi
 800691a:	b2b6      	uxthmi	r6, r6
 800691c:	e7e6      	b.n	80068ec <_printf_i+0x184>
 800691e:	4615      	mov	r5, r2
 8006920:	e7bb      	b.n	800689a <_printf_i+0x132>
 8006922:	682b      	ldr	r3, [r5, #0]
 8006924:	6826      	ldr	r6, [r4, #0]
 8006926:	1d18      	adds	r0, r3, #4
 8006928:	6961      	ldr	r1, [r4, #20]
 800692a:	6028      	str	r0, [r5, #0]
 800692c:	0635      	lsls	r5, r6, #24
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	d501      	bpl.n	8006936 <_printf_i+0x1ce>
 8006932:	6019      	str	r1, [r3, #0]
 8006934:	e002      	b.n	800693c <_printf_i+0x1d4>
 8006936:	0670      	lsls	r0, r6, #25
 8006938:	d5fb      	bpl.n	8006932 <_printf_i+0x1ca>
 800693a:	8019      	strh	r1, [r3, #0]
 800693c:	2300      	movs	r3, #0
 800693e:	4615      	mov	r5, r2
 8006940:	6123      	str	r3, [r4, #16]
 8006942:	e7ba      	b.n	80068ba <_printf_i+0x152>
 8006944:	682b      	ldr	r3, [r5, #0]
 8006946:	2100      	movs	r1, #0
 8006948:	1d1a      	adds	r2, r3, #4
 800694a:	602a      	str	r2, [r5, #0]
 800694c:	681d      	ldr	r5, [r3, #0]
 800694e:	6862      	ldr	r2, [r4, #4]
 8006950:	4628      	mov	r0, r5
 8006952:	f001 fa1f 	bl	8007d94 <memchr>
 8006956:	b108      	cbz	r0, 800695c <_printf_i+0x1f4>
 8006958:	1b40      	subs	r0, r0, r5
 800695a:	6060      	str	r0, [r4, #4]
 800695c:	6863      	ldr	r3, [r4, #4]
 800695e:	6123      	str	r3, [r4, #16]
 8006960:	2300      	movs	r3, #0
 8006962:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006966:	e7a8      	b.n	80068ba <_printf_i+0x152>
 8006968:	462a      	mov	r2, r5
 800696a:	4649      	mov	r1, r9
 800696c:	4640      	mov	r0, r8
 800696e:	6923      	ldr	r3, [r4, #16]
 8006970:	47d0      	blx	sl
 8006972:	3001      	adds	r0, #1
 8006974:	d0ab      	beq.n	80068ce <_printf_i+0x166>
 8006976:	6823      	ldr	r3, [r4, #0]
 8006978:	079b      	lsls	r3, r3, #30
 800697a:	d413      	bmi.n	80069a4 <_printf_i+0x23c>
 800697c:	68e0      	ldr	r0, [r4, #12]
 800697e:	9b03      	ldr	r3, [sp, #12]
 8006980:	4298      	cmp	r0, r3
 8006982:	bfb8      	it	lt
 8006984:	4618      	movlt	r0, r3
 8006986:	e7a4      	b.n	80068d2 <_printf_i+0x16a>
 8006988:	2301      	movs	r3, #1
 800698a:	4632      	mov	r2, r6
 800698c:	4649      	mov	r1, r9
 800698e:	4640      	mov	r0, r8
 8006990:	47d0      	blx	sl
 8006992:	3001      	adds	r0, #1
 8006994:	d09b      	beq.n	80068ce <_printf_i+0x166>
 8006996:	3501      	adds	r5, #1
 8006998:	68e3      	ldr	r3, [r4, #12]
 800699a:	9903      	ldr	r1, [sp, #12]
 800699c:	1a5b      	subs	r3, r3, r1
 800699e:	42ab      	cmp	r3, r5
 80069a0:	dcf2      	bgt.n	8006988 <_printf_i+0x220>
 80069a2:	e7eb      	b.n	800697c <_printf_i+0x214>
 80069a4:	2500      	movs	r5, #0
 80069a6:	f104 0619 	add.w	r6, r4, #25
 80069aa:	e7f5      	b.n	8006998 <_printf_i+0x230>
 80069ac:	08009b2a 	.word	0x08009b2a
 80069b0:	08009b3b 	.word	0x08009b3b

080069b4 <iprintf>:
 80069b4:	b40f      	push	{r0, r1, r2, r3}
 80069b6:	4b0a      	ldr	r3, [pc, #40]	; (80069e0 <iprintf+0x2c>)
 80069b8:	b513      	push	{r0, r1, r4, lr}
 80069ba:	681c      	ldr	r4, [r3, #0]
 80069bc:	b124      	cbz	r4, 80069c8 <iprintf+0x14>
 80069be:	69a3      	ldr	r3, [r4, #24]
 80069c0:	b913      	cbnz	r3, 80069c8 <iprintf+0x14>
 80069c2:	4620      	mov	r0, r4
 80069c4:	f001 f8d4 	bl	8007b70 <__sinit>
 80069c8:	ab05      	add	r3, sp, #20
 80069ca:	4620      	mov	r0, r4
 80069cc:	9a04      	ldr	r2, [sp, #16]
 80069ce:	68a1      	ldr	r1, [r4, #8]
 80069d0:	9301      	str	r3, [sp, #4]
 80069d2:	f001 fe95 	bl	8008700 <_vfiprintf_r>
 80069d6:	b002      	add	sp, #8
 80069d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80069dc:	b004      	add	sp, #16
 80069de:	4770      	bx	lr
 80069e0:	2000000c 	.word	0x2000000c

080069e4 <_puts_r>:
 80069e4:	b570      	push	{r4, r5, r6, lr}
 80069e6:	460e      	mov	r6, r1
 80069e8:	4605      	mov	r5, r0
 80069ea:	b118      	cbz	r0, 80069f4 <_puts_r+0x10>
 80069ec:	6983      	ldr	r3, [r0, #24]
 80069ee:	b90b      	cbnz	r3, 80069f4 <_puts_r+0x10>
 80069f0:	f001 f8be 	bl	8007b70 <__sinit>
 80069f4:	69ab      	ldr	r3, [r5, #24]
 80069f6:	68ac      	ldr	r4, [r5, #8]
 80069f8:	b913      	cbnz	r3, 8006a00 <_puts_r+0x1c>
 80069fa:	4628      	mov	r0, r5
 80069fc:	f001 f8b8 	bl	8007b70 <__sinit>
 8006a00:	4b2c      	ldr	r3, [pc, #176]	; (8006ab4 <_puts_r+0xd0>)
 8006a02:	429c      	cmp	r4, r3
 8006a04:	d120      	bne.n	8006a48 <_puts_r+0x64>
 8006a06:	686c      	ldr	r4, [r5, #4]
 8006a08:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006a0a:	07db      	lsls	r3, r3, #31
 8006a0c:	d405      	bmi.n	8006a1a <_puts_r+0x36>
 8006a0e:	89a3      	ldrh	r3, [r4, #12]
 8006a10:	0598      	lsls	r0, r3, #22
 8006a12:	d402      	bmi.n	8006a1a <_puts_r+0x36>
 8006a14:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006a16:	f001 f94e 	bl	8007cb6 <__retarget_lock_acquire_recursive>
 8006a1a:	89a3      	ldrh	r3, [r4, #12]
 8006a1c:	0719      	lsls	r1, r3, #28
 8006a1e:	d51d      	bpl.n	8006a5c <_puts_r+0x78>
 8006a20:	6923      	ldr	r3, [r4, #16]
 8006a22:	b1db      	cbz	r3, 8006a5c <_puts_r+0x78>
 8006a24:	3e01      	subs	r6, #1
 8006a26:	68a3      	ldr	r3, [r4, #8]
 8006a28:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006a2c:	3b01      	subs	r3, #1
 8006a2e:	60a3      	str	r3, [r4, #8]
 8006a30:	bb39      	cbnz	r1, 8006a82 <_puts_r+0x9e>
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	da38      	bge.n	8006aa8 <_puts_r+0xc4>
 8006a36:	4622      	mov	r2, r4
 8006a38:	210a      	movs	r1, #10
 8006a3a:	4628      	mov	r0, r5
 8006a3c:	f000 f848 	bl	8006ad0 <__swbuf_r>
 8006a40:	3001      	adds	r0, #1
 8006a42:	d011      	beq.n	8006a68 <_puts_r+0x84>
 8006a44:	250a      	movs	r5, #10
 8006a46:	e011      	b.n	8006a6c <_puts_r+0x88>
 8006a48:	4b1b      	ldr	r3, [pc, #108]	; (8006ab8 <_puts_r+0xd4>)
 8006a4a:	429c      	cmp	r4, r3
 8006a4c:	d101      	bne.n	8006a52 <_puts_r+0x6e>
 8006a4e:	68ac      	ldr	r4, [r5, #8]
 8006a50:	e7da      	b.n	8006a08 <_puts_r+0x24>
 8006a52:	4b1a      	ldr	r3, [pc, #104]	; (8006abc <_puts_r+0xd8>)
 8006a54:	429c      	cmp	r4, r3
 8006a56:	bf08      	it	eq
 8006a58:	68ec      	ldreq	r4, [r5, #12]
 8006a5a:	e7d5      	b.n	8006a08 <_puts_r+0x24>
 8006a5c:	4621      	mov	r1, r4
 8006a5e:	4628      	mov	r0, r5
 8006a60:	f000 f888 	bl	8006b74 <__swsetup_r>
 8006a64:	2800      	cmp	r0, #0
 8006a66:	d0dd      	beq.n	8006a24 <_puts_r+0x40>
 8006a68:	f04f 35ff 	mov.w	r5, #4294967295
 8006a6c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006a6e:	07da      	lsls	r2, r3, #31
 8006a70:	d405      	bmi.n	8006a7e <_puts_r+0x9a>
 8006a72:	89a3      	ldrh	r3, [r4, #12]
 8006a74:	059b      	lsls	r3, r3, #22
 8006a76:	d402      	bmi.n	8006a7e <_puts_r+0x9a>
 8006a78:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006a7a:	f001 f91d 	bl	8007cb8 <__retarget_lock_release_recursive>
 8006a7e:	4628      	mov	r0, r5
 8006a80:	bd70      	pop	{r4, r5, r6, pc}
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	da04      	bge.n	8006a90 <_puts_r+0xac>
 8006a86:	69a2      	ldr	r2, [r4, #24]
 8006a88:	429a      	cmp	r2, r3
 8006a8a:	dc06      	bgt.n	8006a9a <_puts_r+0xb6>
 8006a8c:	290a      	cmp	r1, #10
 8006a8e:	d004      	beq.n	8006a9a <_puts_r+0xb6>
 8006a90:	6823      	ldr	r3, [r4, #0]
 8006a92:	1c5a      	adds	r2, r3, #1
 8006a94:	6022      	str	r2, [r4, #0]
 8006a96:	7019      	strb	r1, [r3, #0]
 8006a98:	e7c5      	b.n	8006a26 <_puts_r+0x42>
 8006a9a:	4622      	mov	r2, r4
 8006a9c:	4628      	mov	r0, r5
 8006a9e:	f000 f817 	bl	8006ad0 <__swbuf_r>
 8006aa2:	3001      	adds	r0, #1
 8006aa4:	d1bf      	bne.n	8006a26 <_puts_r+0x42>
 8006aa6:	e7df      	b.n	8006a68 <_puts_r+0x84>
 8006aa8:	250a      	movs	r5, #10
 8006aaa:	6823      	ldr	r3, [r4, #0]
 8006aac:	1c5a      	adds	r2, r3, #1
 8006aae:	6022      	str	r2, [r4, #0]
 8006ab0:	701d      	strb	r5, [r3, #0]
 8006ab2:	e7db      	b.n	8006a6c <_puts_r+0x88>
 8006ab4:	08009bfc 	.word	0x08009bfc
 8006ab8:	08009c1c 	.word	0x08009c1c
 8006abc:	08009bdc 	.word	0x08009bdc

08006ac0 <puts>:
 8006ac0:	4b02      	ldr	r3, [pc, #8]	; (8006acc <puts+0xc>)
 8006ac2:	4601      	mov	r1, r0
 8006ac4:	6818      	ldr	r0, [r3, #0]
 8006ac6:	f7ff bf8d 	b.w	80069e4 <_puts_r>
 8006aca:	bf00      	nop
 8006acc:	2000000c 	.word	0x2000000c

08006ad0 <__swbuf_r>:
 8006ad0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ad2:	460e      	mov	r6, r1
 8006ad4:	4614      	mov	r4, r2
 8006ad6:	4605      	mov	r5, r0
 8006ad8:	b118      	cbz	r0, 8006ae2 <__swbuf_r+0x12>
 8006ada:	6983      	ldr	r3, [r0, #24]
 8006adc:	b90b      	cbnz	r3, 8006ae2 <__swbuf_r+0x12>
 8006ade:	f001 f847 	bl	8007b70 <__sinit>
 8006ae2:	4b21      	ldr	r3, [pc, #132]	; (8006b68 <__swbuf_r+0x98>)
 8006ae4:	429c      	cmp	r4, r3
 8006ae6:	d12b      	bne.n	8006b40 <__swbuf_r+0x70>
 8006ae8:	686c      	ldr	r4, [r5, #4]
 8006aea:	69a3      	ldr	r3, [r4, #24]
 8006aec:	60a3      	str	r3, [r4, #8]
 8006aee:	89a3      	ldrh	r3, [r4, #12]
 8006af0:	071a      	lsls	r2, r3, #28
 8006af2:	d52f      	bpl.n	8006b54 <__swbuf_r+0x84>
 8006af4:	6923      	ldr	r3, [r4, #16]
 8006af6:	b36b      	cbz	r3, 8006b54 <__swbuf_r+0x84>
 8006af8:	6923      	ldr	r3, [r4, #16]
 8006afa:	6820      	ldr	r0, [r4, #0]
 8006afc:	b2f6      	uxtb	r6, r6
 8006afe:	1ac0      	subs	r0, r0, r3
 8006b00:	6963      	ldr	r3, [r4, #20]
 8006b02:	4637      	mov	r7, r6
 8006b04:	4283      	cmp	r3, r0
 8006b06:	dc04      	bgt.n	8006b12 <__swbuf_r+0x42>
 8006b08:	4621      	mov	r1, r4
 8006b0a:	4628      	mov	r0, r5
 8006b0c:	f000 ff9c 	bl	8007a48 <_fflush_r>
 8006b10:	bb30      	cbnz	r0, 8006b60 <__swbuf_r+0x90>
 8006b12:	68a3      	ldr	r3, [r4, #8]
 8006b14:	3001      	adds	r0, #1
 8006b16:	3b01      	subs	r3, #1
 8006b18:	60a3      	str	r3, [r4, #8]
 8006b1a:	6823      	ldr	r3, [r4, #0]
 8006b1c:	1c5a      	adds	r2, r3, #1
 8006b1e:	6022      	str	r2, [r4, #0]
 8006b20:	701e      	strb	r6, [r3, #0]
 8006b22:	6963      	ldr	r3, [r4, #20]
 8006b24:	4283      	cmp	r3, r0
 8006b26:	d004      	beq.n	8006b32 <__swbuf_r+0x62>
 8006b28:	89a3      	ldrh	r3, [r4, #12]
 8006b2a:	07db      	lsls	r3, r3, #31
 8006b2c:	d506      	bpl.n	8006b3c <__swbuf_r+0x6c>
 8006b2e:	2e0a      	cmp	r6, #10
 8006b30:	d104      	bne.n	8006b3c <__swbuf_r+0x6c>
 8006b32:	4621      	mov	r1, r4
 8006b34:	4628      	mov	r0, r5
 8006b36:	f000 ff87 	bl	8007a48 <_fflush_r>
 8006b3a:	b988      	cbnz	r0, 8006b60 <__swbuf_r+0x90>
 8006b3c:	4638      	mov	r0, r7
 8006b3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006b40:	4b0a      	ldr	r3, [pc, #40]	; (8006b6c <__swbuf_r+0x9c>)
 8006b42:	429c      	cmp	r4, r3
 8006b44:	d101      	bne.n	8006b4a <__swbuf_r+0x7a>
 8006b46:	68ac      	ldr	r4, [r5, #8]
 8006b48:	e7cf      	b.n	8006aea <__swbuf_r+0x1a>
 8006b4a:	4b09      	ldr	r3, [pc, #36]	; (8006b70 <__swbuf_r+0xa0>)
 8006b4c:	429c      	cmp	r4, r3
 8006b4e:	bf08      	it	eq
 8006b50:	68ec      	ldreq	r4, [r5, #12]
 8006b52:	e7ca      	b.n	8006aea <__swbuf_r+0x1a>
 8006b54:	4621      	mov	r1, r4
 8006b56:	4628      	mov	r0, r5
 8006b58:	f000 f80c 	bl	8006b74 <__swsetup_r>
 8006b5c:	2800      	cmp	r0, #0
 8006b5e:	d0cb      	beq.n	8006af8 <__swbuf_r+0x28>
 8006b60:	f04f 37ff 	mov.w	r7, #4294967295
 8006b64:	e7ea      	b.n	8006b3c <__swbuf_r+0x6c>
 8006b66:	bf00      	nop
 8006b68:	08009bfc 	.word	0x08009bfc
 8006b6c:	08009c1c 	.word	0x08009c1c
 8006b70:	08009bdc 	.word	0x08009bdc

08006b74 <__swsetup_r>:
 8006b74:	4b32      	ldr	r3, [pc, #200]	; (8006c40 <__swsetup_r+0xcc>)
 8006b76:	b570      	push	{r4, r5, r6, lr}
 8006b78:	681d      	ldr	r5, [r3, #0]
 8006b7a:	4606      	mov	r6, r0
 8006b7c:	460c      	mov	r4, r1
 8006b7e:	b125      	cbz	r5, 8006b8a <__swsetup_r+0x16>
 8006b80:	69ab      	ldr	r3, [r5, #24]
 8006b82:	b913      	cbnz	r3, 8006b8a <__swsetup_r+0x16>
 8006b84:	4628      	mov	r0, r5
 8006b86:	f000 fff3 	bl	8007b70 <__sinit>
 8006b8a:	4b2e      	ldr	r3, [pc, #184]	; (8006c44 <__swsetup_r+0xd0>)
 8006b8c:	429c      	cmp	r4, r3
 8006b8e:	d10f      	bne.n	8006bb0 <__swsetup_r+0x3c>
 8006b90:	686c      	ldr	r4, [r5, #4]
 8006b92:	89a3      	ldrh	r3, [r4, #12]
 8006b94:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006b98:	0719      	lsls	r1, r3, #28
 8006b9a:	d42c      	bmi.n	8006bf6 <__swsetup_r+0x82>
 8006b9c:	06dd      	lsls	r5, r3, #27
 8006b9e:	d411      	bmi.n	8006bc4 <__swsetup_r+0x50>
 8006ba0:	2309      	movs	r3, #9
 8006ba2:	6033      	str	r3, [r6, #0]
 8006ba4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006ba8:	f04f 30ff 	mov.w	r0, #4294967295
 8006bac:	81a3      	strh	r3, [r4, #12]
 8006bae:	e03e      	b.n	8006c2e <__swsetup_r+0xba>
 8006bb0:	4b25      	ldr	r3, [pc, #148]	; (8006c48 <__swsetup_r+0xd4>)
 8006bb2:	429c      	cmp	r4, r3
 8006bb4:	d101      	bne.n	8006bba <__swsetup_r+0x46>
 8006bb6:	68ac      	ldr	r4, [r5, #8]
 8006bb8:	e7eb      	b.n	8006b92 <__swsetup_r+0x1e>
 8006bba:	4b24      	ldr	r3, [pc, #144]	; (8006c4c <__swsetup_r+0xd8>)
 8006bbc:	429c      	cmp	r4, r3
 8006bbe:	bf08      	it	eq
 8006bc0:	68ec      	ldreq	r4, [r5, #12]
 8006bc2:	e7e6      	b.n	8006b92 <__swsetup_r+0x1e>
 8006bc4:	0758      	lsls	r0, r3, #29
 8006bc6:	d512      	bpl.n	8006bee <__swsetup_r+0x7a>
 8006bc8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006bca:	b141      	cbz	r1, 8006bde <__swsetup_r+0x6a>
 8006bcc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006bd0:	4299      	cmp	r1, r3
 8006bd2:	d002      	beq.n	8006bda <__swsetup_r+0x66>
 8006bd4:	4630      	mov	r0, r6
 8006bd6:	f001 fc8f 	bl	80084f8 <_free_r>
 8006bda:	2300      	movs	r3, #0
 8006bdc:	6363      	str	r3, [r4, #52]	; 0x34
 8006bde:	89a3      	ldrh	r3, [r4, #12]
 8006be0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006be4:	81a3      	strh	r3, [r4, #12]
 8006be6:	2300      	movs	r3, #0
 8006be8:	6063      	str	r3, [r4, #4]
 8006bea:	6923      	ldr	r3, [r4, #16]
 8006bec:	6023      	str	r3, [r4, #0]
 8006bee:	89a3      	ldrh	r3, [r4, #12]
 8006bf0:	f043 0308 	orr.w	r3, r3, #8
 8006bf4:	81a3      	strh	r3, [r4, #12]
 8006bf6:	6923      	ldr	r3, [r4, #16]
 8006bf8:	b94b      	cbnz	r3, 8006c0e <__swsetup_r+0x9a>
 8006bfa:	89a3      	ldrh	r3, [r4, #12]
 8006bfc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006c00:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006c04:	d003      	beq.n	8006c0e <__swsetup_r+0x9a>
 8006c06:	4621      	mov	r1, r4
 8006c08:	4630      	mov	r0, r6
 8006c0a:	f001 f87b 	bl	8007d04 <__smakebuf_r>
 8006c0e:	89a0      	ldrh	r0, [r4, #12]
 8006c10:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006c14:	f010 0301 	ands.w	r3, r0, #1
 8006c18:	d00a      	beq.n	8006c30 <__swsetup_r+0xbc>
 8006c1a:	2300      	movs	r3, #0
 8006c1c:	60a3      	str	r3, [r4, #8]
 8006c1e:	6963      	ldr	r3, [r4, #20]
 8006c20:	425b      	negs	r3, r3
 8006c22:	61a3      	str	r3, [r4, #24]
 8006c24:	6923      	ldr	r3, [r4, #16]
 8006c26:	b943      	cbnz	r3, 8006c3a <__swsetup_r+0xc6>
 8006c28:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006c2c:	d1ba      	bne.n	8006ba4 <__swsetup_r+0x30>
 8006c2e:	bd70      	pop	{r4, r5, r6, pc}
 8006c30:	0781      	lsls	r1, r0, #30
 8006c32:	bf58      	it	pl
 8006c34:	6963      	ldrpl	r3, [r4, #20]
 8006c36:	60a3      	str	r3, [r4, #8]
 8006c38:	e7f4      	b.n	8006c24 <__swsetup_r+0xb0>
 8006c3a:	2000      	movs	r0, #0
 8006c3c:	e7f7      	b.n	8006c2e <__swsetup_r+0xba>
 8006c3e:	bf00      	nop
 8006c40:	2000000c 	.word	0x2000000c
 8006c44:	08009bfc 	.word	0x08009bfc
 8006c48:	08009c1c 	.word	0x08009c1c
 8006c4c:	08009bdc 	.word	0x08009bdc

08006c50 <quorem>:
 8006c50:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c54:	6903      	ldr	r3, [r0, #16]
 8006c56:	690c      	ldr	r4, [r1, #16]
 8006c58:	4607      	mov	r7, r0
 8006c5a:	42a3      	cmp	r3, r4
 8006c5c:	f2c0 8082 	blt.w	8006d64 <quorem+0x114>
 8006c60:	3c01      	subs	r4, #1
 8006c62:	f100 0514 	add.w	r5, r0, #20
 8006c66:	f101 0814 	add.w	r8, r1, #20
 8006c6a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006c6e:	9301      	str	r3, [sp, #4]
 8006c70:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006c74:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006c78:	3301      	adds	r3, #1
 8006c7a:	429a      	cmp	r2, r3
 8006c7c:	fbb2 f6f3 	udiv	r6, r2, r3
 8006c80:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8006c84:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006c88:	d331      	bcc.n	8006cee <quorem+0x9e>
 8006c8a:	f04f 0e00 	mov.w	lr, #0
 8006c8e:	4640      	mov	r0, r8
 8006c90:	46ac      	mov	ip, r5
 8006c92:	46f2      	mov	sl, lr
 8006c94:	f850 2b04 	ldr.w	r2, [r0], #4
 8006c98:	b293      	uxth	r3, r2
 8006c9a:	fb06 e303 	mla	r3, r6, r3, lr
 8006c9e:	0c12      	lsrs	r2, r2, #16
 8006ca0:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8006ca4:	b29b      	uxth	r3, r3
 8006ca6:	fb06 e202 	mla	r2, r6, r2, lr
 8006caa:	ebaa 0303 	sub.w	r3, sl, r3
 8006cae:	f8dc a000 	ldr.w	sl, [ip]
 8006cb2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006cb6:	fa1f fa8a 	uxth.w	sl, sl
 8006cba:	4453      	add	r3, sl
 8006cbc:	f8dc a000 	ldr.w	sl, [ip]
 8006cc0:	b292      	uxth	r2, r2
 8006cc2:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8006cc6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006cca:	b29b      	uxth	r3, r3
 8006ccc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006cd0:	4581      	cmp	r9, r0
 8006cd2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8006cd6:	f84c 3b04 	str.w	r3, [ip], #4
 8006cda:	d2db      	bcs.n	8006c94 <quorem+0x44>
 8006cdc:	f855 300b 	ldr.w	r3, [r5, fp]
 8006ce0:	b92b      	cbnz	r3, 8006cee <quorem+0x9e>
 8006ce2:	9b01      	ldr	r3, [sp, #4]
 8006ce4:	3b04      	subs	r3, #4
 8006ce6:	429d      	cmp	r5, r3
 8006ce8:	461a      	mov	r2, r3
 8006cea:	d32f      	bcc.n	8006d4c <quorem+0xfc>
 8006cec:	613c      	str	r4, [r7, #16]
 8006cee:	4638      	mov	r0, r7
 8006cf0:	f001 faea 	bl	80082c8 <__mcmp>
 8006cf4:	2800      	cmp	r0, #0
 8006cf6:	db25      	blt.n	8006d44 <quorem+0xf4>
 8006cf8:	4628      	mov	r0, r5
 8006cfa:	f04f 0c00 	mov.w	ip, #0
 8006cfe:	3601      	adds	r6, #1
 8006d00:	f858 1b04 	ldr.w	r1, [r8], #4
 8006d04:	f8d0 e000 	ldr.w	lr, [r0]
 8006d08:	b28b      	uxth	r3, r1
 8006d0a:	ebac 0303 	sub.w	r3, ip, r3
 8006d0e:	fa1f f28e 	uxth.w	r2, lr
 8006d12:	4413      	add	r3, r2
 8006d14:	0c0a      	lsrs	r2, r1, #16
 8006d16:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8006d1a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006d1e:	b29b      	uxth	r3, r3
 8006d20:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006d24:	45c1      	cmp	r9, r8
 8006d26:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8006d2a:	f840 3b04 	str.w	r3, [r0], #4
 8006d2e:	d2e7      	bcs.n	8006d00 <quorem+0xb0>
 8006d30:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006d34:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006d38:	b922      	cbnz	r2, 8006d44 <quorem+0xf4>
 8006d3a:	3b04      	subs	r3, #4
 8006d3c:	429d      	cmp	r5, r3
 8006d3e:	461a      	mov	r2, r3
 8006d40:	d30a      	bcc.n	8006d58 <quorem+0x108>
 8006d42:	613c      	str	r4, [r7, #16]
 8006d44:	4630      	mov	r0, r6
 8006d46:	b003      	add	sp, #12
 8006d48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d4c:	6812      	ldr	r2, [r2, #0]
 8006d4e:	3b04      	subs	r3, #4
 8006d50:	2a00      	cmp	r2, #0
 8006d52:	d1cb      	bne.n	8006cec <quorem+0x9c>
 8006d54:	3c01      	subs	r4, #1
 8006d56:	e7c6      	b.n	8006ce6 <quorem+0x96>
 8006d58:	6812      	ldr	r2, [r2, #0]
 8006d5a:	3b04      	subs	r3, #4
 8006d5c:	2a00      	cmp	r2, #0
 8006d5e:	d1f0      	bne.n	8006d42 <quorem+0xf2>
 8006d60:	3c01      	subs	r4, #1
 8006d62:	e7eb      	b.n	8006d3c <quorem+0xec>
 8006d64:	2000      	movs	r0, #0
 8006d66:	e7ee      	b.n	8006d46 <quorem+0xf6>

08006d68 <_dtoa_r>:
 8006d68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d6c:	4616      	mov	r6, r2
 8006d6e:	461f      	mov	r7, r3
 8006d70:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8006d72:	b099      	sub	sp, #100	; 0x64
 8006d74:	4605      	mov	r5, r0
 8006d76:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8006d7a:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8006d7e:	b974      	cbnz	r4, 8006d9e <_dtoa_r+0x36>
 8006d80:	2010      	movs	r0, #16
 8006d82:	f000 ffff 	bl	8007d84 <malloc>
 8006d86:	4602      	mov	r2, r0
 8006d88:	6268      	str	r0, [r5, #36]	; 0x24
 8006d8a:	b920      	cbnz	r0, 8006d96 <_dtoa_r+0x2e>
 8006d8c:	21ea      	movs	r1, #234	; 0xea
 8006d8e:	4ba8      	ldr	r3, [pc, #672]	; (8007030 <_dtoa_r+0x2c8>)
 8006d90:	48a8      	ldr	r0, [pc, #672]	; (8007034 <_dtoa_r+0x2cc>)
 8006d92:	f001 fe4b 	bl	8008a2c <__assert_func>
 8006d96:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006d9a:	6004      	str	r4, [r0, #0]
 8006d9c:	60c4      	str	r4, [r0, #12]
 8006d9e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006da0:	6819      	ldr	r1, [r3, #0]
 8006da2:	b151      	cbz	r1, 8006dba <_dtoa_r+0x52>
 8006da4:	685a      	ldr	r2, [r3, #4]
 8006da6:	2301      	movs	r3, #1
 8006da8:	4093      	lsls	r3, r2
 8006daa:	604a      	str	r2, [r1, #4]
 8006dac:	608b      	str	r3, [r1, #8]
 8006dae:	4628      	mov	r0, r5
 8006db0:	f001 f84c 	bl	8007e4c <_Bfree>
 8006db4:	2200      	movs	r2, #0
 8006db6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006db8:	601a      	str	r2, [r3, #0]
 8006dba:	1e3b      	subs	r3, r7, #0
 8006dbc:	bfaf      	iteee	ge
 8006dbe:	2300      	movge	r3, #0
 8006dc0:	2201      	movlt	r2, #1
 8006dc2:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8006dc6:	9305      	strlt	r3, [sp, #20]
 8006dc8:	bfa8      	it	ge
 8006dca:	f8c8 3000 	strge.w	r3, [r8]
 8006dce:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8006dd2:	4b99      	ldr	r3, [pc, #612]	; (8007038 <_dtoa_r+0x2d0>)
 8006dd4:	bfb8      	it	lt
 8006dd6:	f8c8 2000 	strlt.w	r2, [r8]
 8006dda:	ea33 0309 	bics.w	r3, r3, r9
 8006dde:	d119      	bne.n	8006e14 <_dtoa_r+0xac>
 8006de0:	f242 730f 	movw	r3, #9999	; 0x270f
 8006de4:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8006de6:	6013      	str	r3, [r2, #0]
 8006de8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006dec:	4333      	orrs	r3, r6
 8006dee:	f000 857f 	beq.w	80078f0 <_dtoa_r+0xb88>
 8006df2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006df4:	b953      	cbnz	r3, 8006e0c <_dtoa_r+0xa4>
 8006df6:	4b91      	ldr	r3, [pc, #580]	; (800703c <_dtoa_r+0x2d4>)
 8006df8:	e022      	b.n	8006e40 <_dtoa_r+0xd8>
 8006dfa:	4b91      	ldr	r3, [pc, #580]	; (8007040 <_dtoa_r+0x2d8>)
 8006dfc:	9303      	str	r3, [sp, #12]
 8006dfe:	3308      	adds	r3, #8
 8006e00:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8006e02:	6013      	str	r3, [r2, #0]
 8006e04:	9803      	ldr	r0, [sp, #12]
 8006e06:	b019      	add	sp, #100	; 0x64
 8006e08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e0c:	4b8b      	ldr	r3, [pc, #556]	; (800703c <_dtoa_r+0x2d4>)
 8006e0e:	9303      	str	r3, [sp, #12]
 8006e10:	3303      	adds	r3, #3
 8006e12:	e7f5      	b.n	8006e00 <_dtoa_r+0x98>
 8006e14:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8006e18:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8006e1c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006e20:	2200      	movs	r2, #0
 8006e22:	2300      	movs	r3, #0
 8006e24:	f7f9 fdc0 	bl	80009a8 <__aeabi_dcmpeq>
 8006e28:	4680      	mov	r8, r0
 8006e2a:	b158      	cbz	r0, 8006e44 <_dtoa_r+0xdc>
 8006e2c:	2301      	movs	r3, #1
 8006e2e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8006e30:	6013      	str	r3, [r2, #0]
 8006e32:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	f000 8558 	beq.w	80078ea <_dtoa_r+0xb82>
 8006e3a:	4882      	ldr	r0, [pc, #520]	; (8007044 <_dtoa_r+0x2dc>)
 8006e3c:	6018      	str	r0, [r3, #0]
 8006e3e:	1e43      	subs	r3, r0, #1
 8006e40:	9303      	str	r3, [sp, #12]
 8006e42:	e7df      	b.n	8006e04 <_dtoa_r+0x9c>
 8006e44:	ab16      	add	r3, sp, #88	; 0x58
 8006e46:	9301      	str	r3, [sp, #4]
 8006e48:	ab17      	add	r3, sp, #92	; 0x5c
 8006e4a:	9300      	str	r3, [sp, #0]
 8006e4c:	4628      	mov	r0, r5
 8006e4e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8006e52:	f001 fae1 	bl	8008418 <__d2b>
 8006e56:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8006e5a:	4683      	mov	fp, r0
 8006e5c:	2c00      	cmp	r4, #0
 8006e5e:	d07f      	beq.n	8006f60 <_dtoa_r+0x1f8>
 8006e60:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006e64:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006e66:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8006e6a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006e6e:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8006e72:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8006e76:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8006e7a:	2200      	movs	r2, #0
 8006e7c:	4b72      	ldr	r3, [pc, #456]	; (8007048 <_dtoa_r+0x2e0>)
 8006e7e:	f7f9 f973 	bl	8000168 <__aeabi_dsub>
 8006e82:	a365      	add	r3, pc, #404	; (adr r3, 8007018 <_dtoa_r+0x2b0>)
 8006e84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e88:	f7f9 fb26 	bl	80004d8 <__aeabi_dmul>
 8006e8c:	a364      	add	r3, pc, #400	; (adr r3, 8007020 <_dtoa_r+0x2b8>)
 8006e8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e92:	f7f9 f96b 	bl	800016c <__adddf3>
 8006e96:	4606      	mov	r6, r0
 8006e98:	4620      	mov	r0, r4
 8006e9a:	460f      	mov	r7, r1
 8006e9c:	f7f9 fab2 	bl	8000404 <__aeabi_i2d>
 8006ea0:	a361      	add	r3, pc, #388	; (adr r3, 8007028 <_dtoa_r+0x2c0>)
 8006ea2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ea6:	f7f9 fb17 	bl	80004d8 <__aeabi_dmul>
 8006eaa:	4602      	mov	r2, r0
 8006eac:	460b      	mov	r3, r1
 8006eae:	4630      	mov	r0, r6
 8006eb0:	4639      	mov	r1, r7
 8006eb2:	f7f9 f95b 	bl	800016c <__adddf3>
 8006eb6:	4606      	mov	r6, r0
 8006eb8:	460f      	mov	r7, r1
 8006eba:	f7f9 fdbd 	bl	8000a38 <__aeabi_d2iz>
 8006ebe:	2200      	movs	r2, #0
 8006ec0:	4682      	mov	sl, r0
 8006ec2:	2300      	movs	r3, #0
 8006ec4:	4630      	mov	r0, r6
 8006ec6:	4639      	mov	r1, r7
 8006ec8:	f7f9 fd78 	bl	80009bc <__aeabi_dcmplt>
 8006ecc:	b148      	cbz	r0, 8006ee2 <_dtoa_r+0x17a>
 8006ece:	4650      	mov	r0, sl
 8006ed0:	f7f9 fa98 	bl	8000404 <__aeabi_i2d>
 8006ed4:	4632      	mov	r2, r6
 8006ed6:	463b      	mov	r3, r7
 8006ed8:	f7f9 fd66 	bl	80009a8 <__aeabi_dcmpeq>
 8006edc:	b908      	cbnz	r0, 8006ee2 <_dtoa_r+0x17a>
 8006ede:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006ee2:	f1ba 0f16 	cmp.w	sl, #22
 8006ee6:	d858      	bhi.n	8006f9a <_dtoa_r+0x232>
 8006ee8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006eec:	4b57      	ldr	r3, [pc, #348]	; (800704c <_dtoa_r+0x2e4>)
 8006eee:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8006ef2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ef6:	f7f9 fd61 	bl	80009bc <__aeabi_dcmplt>
 8006efa:	2800      	cmp	r0, #0
 8006efc:	d04f      	beq.n	8006f9e <_dtoa_r+0x236>
 8006efe:	2300      	movs	r3, #0
 8006f00:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006f04:	930f      	str	r3, [sp, #60]	; 0x3c
 8006f06:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8006f08:	1b1c      	subs	r4, r3, r4
 8006f0a:	1e63      	subs	r3, r4, #1
 8006f0c:	9309      	str	r3, [sp, #36]	; 0x24
 8006f0e:	bf49      	itett	mi
 8006f10:	f1c4 0301 	rsbmi	r3, r4, #1
 8006f14:	2300      	movpl	r3, #0
 8006f16:	9306      	strmi	r3, [sp, #24]
 8006f18:	2300      	movmi	r3, #0
 8006f1a:	bf54      	ite	pl
 8006f1c:	9306      	strpl	r3, [sp, #24]
 8006f1e:	9309      	strmi	r3, [sp, #36]	; 0x24
 8006f20:	f1ba 0f00 	cmp.w	sl, #0
 8006f24:	db3d      	blt.n	8006fa2 <_dtoa_r+0x23a>
 8006f26:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006f28:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8006f2c:	4453      	add	r3, sl
 8006f2e:	9309      	str	r3, [sp, #36]	; 0x24
 8006f30:	2300      	movs	r3, #0
 8006f32:	930a      	str	r3, [sp, #40]	; 0x28
 8006f34:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006f36:	2b09      	cmp	r3, #9
 8006f38:	f200 808c 	bhi.w	8007054 <_dtoa_r+0x2ec>
 8006f3c:	2b05      	cmp	r3, #5
 8006f3e:	bfc4      	itt	gt
 8006f40:	3b04      	subgt	r3, #4
 8006f42:	9322      	strgt	r3, [sp, #136]	; 0x88
 8006f44:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006f46:	bfc8      	it	gt
 8006f48:	2400      	movgt	r4, #0
 8006f4a:	f1a3 0302 	sub.w	r3, r3, #2
 8006f4e:	bfd8      	it	le
 8006f50:	2401      	movle	r4, #1
 8006f52:	2b03      	cmp	r3, #3
 8006f54:	f200 808a 	bhi.w	800706c <_dtoa_r+0x304>
 8006f58:	e8df f003 	tbb	[pc, r3]
 8006f5c:	5b4d4f2d 	.word	0x5b4d4f2d
 8006f60:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8006f64:	441c      	add	r4, r3
 8006f66:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8006f6a:	2b20      	cmp	r3, #32
 8006f6c:	bfc3      	ittte	gt
 8006f6e:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8006f72:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 8006f76:	fa09 f303 	lslgt.w	r3, r9, r3
 8006f7a:	f1c3 0320 	rsble	r3, r3, #32
 8006f7e:	bfc6      	itte	gt
 8006f80:	fa26 f000 	lsrgt.w	r0, r6, r0
 8006f84:	4318      	orrgt	r0, r3
 8006f86:	fa06 f003 	lslle.w	r0, r6, r3
 8006f8a:	f7f9 fa2b 	bl	80003e4 <__aeabi_ui2d>
 8006f8e:	2301      	movs	r3, #1
 8006f90:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8006f94:	3c01      	subs	r4, #1
 8006f96:	9313      	str	r3, [sp, #76]	; 0x4c
 8006f98:	e76f      	b.n	8006e7a <_dtoa_r+0x112>
 8006f9a:	2301      	movs	r3, #1
 8006f9c:	e7b2      	b.n	8006f04 <_dtoa_r+0x19c>
 8006f9e:	900f      	str	r0, [sp, #60]	; 0x3c
 8006fa0:	e7b1      	b.n	8006f06 <_dtoa_r+0x19e>
 8006fa2:	9b06      	ldr	r3, [sp, #24]
 8006fa4:	eba3 030a 	sub.w	r3, r3, sl
 8006fa8:	9306      	str	r3, [sp, #24]
 8006faa:	f1ca 0300 	rsb	r3, sl, #0
 8006fae:	930a      	str	r3, [sp, #40]	; 0x28
 8006fb0:	2300      	movs	r3, #0
 8006fb2:	930e      	str	r3, [sp, #56]	; 0x38
 8006fb4:	e7be      	b.n	8006f34 <_dtoa_r+0x1cc>
 8006fb6:	2300      	movs	r3, #0
 8006fb8:	930b      	str	r3, [sp, #44]	; 0x2c
 8006fba:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	dc58      	bgt.n	8007072 <_dtoa_r+0x30a>
 8006fc0:	f04f 0901 	mov.w	r9, #1
 8006fc4:	464b      	mov	r3, r9
 8006fc6:	f8cd 9020 	str.w	r9, [sp, #32]
 8006fca:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 8006fce:	2200      	movs	r2, #0
 8006fd0:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8006fd2:	6042      	str	r2, [r0, #4]
 8006fd4:	2204      	movs	r2, #4
 8006fd6:	f102 0614 	add.w	r6, r2, #20
 8006fda:	429e      	cmp	r6, r3
 8006fdc:	6841      	ldr	r1, [r0, #4]
 8006fde:	d94e      	bls.n	800707e <_dtoa_r+0x316>
 8006fe0:	4628      	mov	r0, r5
 8006fe2:	f000 fef3 	bl	8007dcc <_Balloc>
 8006fe6:	9003      	str	r0, [sp, #12]
 8006fe8:	2800      	cmp	r0, #0
 8006fea:	d14c      	bne.n	8007086 <_dtoa_r+0x31e>
 8006fec:	4602      	mov	r2, r0
 8006fee:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8006ff2:	4b17      	ldr	r3, [pc, #92]	; (8007050 <_dtoa_r+0x2e8>)
 8006ff4:	e6cc      	b.n	8006d90 <_dtoa_r+0x28>
 8006ff6:	2301      	movs	r3, #1
 8006ff8:	e7de      	b.n	8006fb8 <_dtoa_r+0x250>
 8006ffa:	2300      	movs	r3, #0
 8006ffc:	930b      	str	r3, [sp, #44]	; 0x2c
 8006ffe:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007000:	eb0a 0903 	add.w	r9, sl, r3
 8007004:	f109 0301 	add.w	r3, r9, #1
 8007008:	2b01      	cmp	r3, #1
 800700a:	9308      	str	r3, [sp, #32]
 800700c:	bfb8      	it	lt
 800700e:	2301      	movlt	r3, #1
 8007010:	e7dd      	b.n	8006fce <_dtoa_r+0x266>
 8007012:	2301      	movs	r3, #1
 8007014:	e7f2      	b.n	8006ffc <_dtoa_r+0x294>
 8007016:	bf00      	nop
 8007018:	636f4361 	.word	0x636f4361
 800701c:	3fd287a7 	.word	0x3fd287a7
 8007020:	8b60c8b3 	.word	0x8b60c8b3
 8007024:	3fc68a28 	.word	0x3fc68a28
 8007028:	509f79fb 	.word	0x509f79fb
 800702c:	3fd34413 	.word	0x3fd34413
 8007030:	08009b59 	.word	0x08009b59
 8007034:	08009b70 	.word	0x08009b70
 8007038:	7ff00000 	.word	0x7ff00000
 800703c:	08009b55 	.word	0x08009b55
 8007040:	08009b4c 	.word	0x08009b4c
 8007044:	08009b29 	.word	0x08009b29
 8007048:	3ff80000 	.word	0x3ff80000
 800704c:	08009cc0 	.word	0x08009cc0
 8007050:	08009bcb 	.word	0x08009bcb
 8007054:	2401      	movs	r4, #1
 8007056:	2300      	movs	r3, #0
 8007058:	940b      	str	r4, [sp, #44]	; 0x2c
 800705a:	9322      	str	r3, [sp, #136]	; 0x88
 800705c:	f04f 39ff 	mov.w	r9, #4294967295
 8007060:	2200      	movs	r2, #0
 8007062:	2312      	movs	r3, #18
 8007064:	f8cd 9020 	str.w	r9, [sp, #32]
 8007068:	9223      	str	r2, [sp, #140]	; 0x8c
 800706a:	e7b0      	b.n	8006fce <_dtoa_r+0x266>
 800706c:	2301      	movs	r3, #1
 800706e:	930b      	str	r3, [sp, #44]	; 0x2c
 8007070:	e7f4      	b.n	800705c <_dtoa_r+0x2f4>
 8007072:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 8007076:	464b      	mov	r3, r9
 8007078:	f8cd 9020 	str.w	r9, [sp, #32]
 800707c:	e7a7      	b.n	8006fce <_dtoa_r+0x266>
 800707e:	3101      	adds	r1, #1
 8007080:	6041      	str	r1, [r0, #4]
 8007082:	0052      	lsls	r2, r2, #1
 8007084:	e7a7      	b.n	8006fd6 <_dtoa_r+0x26e>
 8007086:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007088:	9a03      	ldr	r2, [sp, #12]
 800708a:	601a      	str	r2, [r3, #0]
 800708c:	9b08      	ldr	r3, [sp, #32]
 800708e:	2b0e      	cmp	r3, #14
 8007090:	f200 80a8 	bhi.w	80071e4 <_dtoa_r+0x47c>
 8007094:	2c00      	cmp	r4, #0
 8007096:	f000 80a5 	beq.w	80071e4 <_dtoa_r+0x47c>
 800709a:	f1ba 0f00 	cmp.w	sl, #0
 800709e:	dd34      	ble.n	800710a <_dtoa_r+0x3a2>
 80070a0:	4a9a      	ldr	r2, [pc, #616]	; (800730c <_dtoa_r+0x5a4>)
 80070a2:	f00a 030f 	and.w	r3, sl, #15
 80070a6:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80070aa:	f41a 7f80 	tst.w	sl, #256	; 0x100
 80070ae:	e9d3 3400 	ldrd	r3, r4, [r3]
 80070b2:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 80070b6:	ea4f 142a 	mov.w	r4, sl, asr #4
 80070ba:	d016      	beq.n	80070ea <_dtoa_r+0x382>
 80070bc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80070c0:	4b93      	ldr	r3, [pc, #588]	; (8007310 <_dtoa_r+0x5a8>)
 80070c2:	2703      	movs	r7, #3
 80070c4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80070c8:	f7f9 fb30 	bl	800072c <__aeabi_ddiv>
 80070cc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80070d0:	f004 040f 	and.w	r4, r4, #15
 80070d4:	4e8e      	ldr	r6, [pc, #568]	; (8007310 <_dtoa_r+0x5a8>)
 80070d6:	b954      	cbnz	r4, 80070ee <_dtoa_r+0x386>
 80070d8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80070dc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80070e0:	f7f9 fb24 	bl	800072c <__aeabi_ddiv>
 80070e4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80070e8:	e029      	b.n	800713e <_dtoa_r+0x3d6>
 80070ea:	2702      	movs	r7, #2
 80070ec:	e7f2      	b.n	80070d4 <_dtoa_r+0x36c>
 80070ee:	07e1      	lsls	r1, r4, #31
 80070f0:	d508      	bpl.n	8007104 <_dtoa_r+0x39c>
 80070f2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80070f6:	e9d6 2300 	ldrd	r2, r3, [r6]
 80070fa:	f7f9 f9ed 	bl	80004d8 <__aeabi_dmul>
 80070fe:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007102:	3701      	adds	r7, #1
 8007104:	1064      	asrs	r4, r4, #1
 8007106:	3608      	adds	r6, #8
 8007108:	e7e5      	b.n	80070d6 <_dtoa_r+0x36e>
 800710a:	f000 80a5 	beq.w	8007258 <_dtoa_r+0x4f0>
 800710e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007112:	f1ca 0400 	rsb	r4, sl, #0
 8007116:	4b7d      	ldr	r3, [pc, #500]	; (800730c <_dtoa_r+0x5a4>)
 8007118:	f004 020f 	and.w	r2, r4, #15
 800711c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007120:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007124:	f7f9 f9d8 	bl	80004d8 <__aeabi_dmul>
 8007128:	2702      	movs	r7, #2
 800712a:	2300      	movs	r3, #0
 800712c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007130:	4e77      	ldr	r6, [pc, #476]	; (8007310 <_dtoa_r+0x5a8>)
 8007132:	1124      	asrs	r4, r4, #4
 8007134:	2c00      	cmp	r4, #0
 8007136:	f040 8084 	bne.w	8007242 <_dtoa_r+0x4da>
 800713a:	2b00      	cmp	r3, #0
 800713c:	d1d2      	bne.n	80070e4 <_dtoa_r+0x37c>
 800713e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007140:	2b00      	cmp	r3, #0
 8007142:	f000 808b 	beq.w	800725c <_dtoa_r+0x4f4>
 8007146:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800714a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800714e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007152:	2200      	movs	r2, #0
 8007154:	4b6f      	ldr	r3, [pc, #444]	; (8007314 <_dtoa_r+0x5ac>)
 8007156:	f7f9 fc31 	bl	80009bc <__aeabi_dcmplt>
 800715a:	2800      	cmp	r0, #0
 800715c:	d07e      	beq.n	800725c <_dtoa_r+0x4f4>
 800715e:	9b08      	ldr	r3, [sp, #32]
 8007160:	2b00      	cmp	r3, #0
 8007162:	d07b      	beq.n	800725c <_dtoa_r+0x4f4>
 8007164:	f1b9 0f00 	cmp.w	r9, #0
 8007168:	dd38      	ble.n	80071dc <_dtoa_r+0x474>
 800716a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800716e:	2200      	movs	r2, #0
 8007170:	4b69      	ldr	r3, [pc, #420]	; (8007318 <_dtoa_r+0x5b0>)
 8007172:	f7f9 f9b1 	bl	80004d8 <__aeabi_dmul>
 8007176:	464c      	mov	r4, r9
 8007178:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800717c:	f10a 38ff 	add.w	r8, sl, #4294967295
 8007180:	3701      	adds	r7, #1
 8007182:	4638      	mov	r0, r7
 8007184:	f7f9 f93e 	bl	8000404 <__aeabi_i2d>
 8007188:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800718c:	f7f9 f9a4 	bl	80004d8 <__aeabi_dmul>
 8007190:	2200      	movs	r2, #0
 8007192:	4b62      	ldr	r3, [pc, #392]	; (800731c <_dtoa_r+0x5b4>)
 8007194:	f7f8 ffea 	bl	800016c <__adddf3>
 8007198:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800719c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80071a0:	9611      	str	r6, [sp, #68]	; 0x44
 80071a2:	2c00      	cmp	r4, #0
 80071a4:	d15d      	bne.n	8007262 <_dtoa_r+0x4fa>
 80071a6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80071aa:	2200      	movs	r2, #0
 80071ac:	4b5c      	ldr	r3, [pc, #368]	; (8007320 <_dtoa_r+0x5b8>)
 80071ae:	f7f8 ffdb 	bl	8000168 <__aeabi_dsub>
 80071b2:	4602      	mov	r2, r0
 80071b4:	460b      	mov	r3, r1
 80071b6:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80071ba:	4633      	mov	r3, r6
 80071bc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80071be:	f7f9 fc1b 	bl	80009f8 <__aeabi_dcmpgt>
 80071c2:	2800      	cmp	r0, #0
 80071c4:	f040 829c 	bne.w	8007700 <_dtoa_r+0x998>
 80071c8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80071cc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80071ce:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80071d2:	f7f9 fbf3 	bl	80009bc <__aeabi_dcmplt>
 80071d6:	2800      	cmp	r0, #0
 80071d8:	f040 8290 	bne.w	80076fc <_dtoa_r+0x994>
 80071dc:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 80071e0:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80071e4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	f2c0 8152 	blt.w	8007490 <_dtoa_r+0x728>
 80071ec:	f1ba 0f0e 	cmp.w	sl, #14
 80071f0:	f300 814e 	bgt.w	8007490 <_dtoa_r+0x728>
 80071f4:	4b45      	ldr	r3, [pc, #276]	; (800730c <_dtoa_r+0x5a4>)
 80071f6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80071fa:	e9d3 3400 	ldrd	r3, r4, [r3]
 80071fe:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8007202:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007204:	2b00      	cmp	r3, #0
 8007206:	f280 80db 	bge.w	80073c0 <_dtoa_r+0x658>
 800720a:	9b08      	ldr	r3, [sp, #32]
 800720c:	2b00      	cmp	r3, #0
 800720e:	f300 80d7 	bgt.w	80073c0 <_dtoa_r+0x658>
 8007212:	f040 8272 	bne.w	80076fa <_dtoa_r+0x992>
 8007216:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800721a:	2200      	movs	r2, #0
 800721c:	4b40      	ldr	r3, [pc, #256]	; (8007320 <_dtoa_r+0x5b8>)
 800721e:	f7f9 f95b 	bl	80004d8 <__aeabi_dmul>
 8007222:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007226:	f7f9 fbdd 	bl	80009e4 <__aeabi_dcmpge>
 800722a:	9c08      	ldr	r4, [sp, #32]
 800722c:	4626      	mov	r6, r4
 800722e:	2800      	cmp	r0, #0
 8007230:	f040 8248 	bne.w	80076c4 <_dtoa_r+0x95c>
 8007234:	2331      	movs	r3, #49	; 0x31
 8007236:	9f03      	ldr	r7, [sp, #12]
 8007238:	f10a 0a01 	add.w	sl, sl, #1
 800723c:	f807 3b01 	strb.w	r3, [r7], #1
 8007240:	e244      	b.n	80076cc <_dtoa_r+0x964>
 8007242:	07e2      	lsls	r2, r4, #31
 8007244:	d505      	bpl.n	8007252 <_dtoa_r+0x4ea>
 8007246:	e9d6 2300 	ldrd	r2, r3, [r6]
 800724a:	f7f9 f945 	bl	80004d8 <__aeabi_dmul>
 800724e:	2301      	movs	r3, #1
 8007250:	3701      	adds	r7, #1
 8007252:	1064      	asrs	r4, r4, #1
 8007254:	3608      	adds	r6, #8
 8007256:	e76d      	b.n	8007134 <_dtoa_r+0x3cc>
 8007258:	2702      	movs	r7, #2
 800725a:	e770      	b.n	800713e <_dtoa_r+0x3d6>
 800725c:	46d0      	mov	r8, sl
 800725e:	9c08      	ldr	r4, [sp, #32]
 8007260:	e78f      	b.n	8007182 <_dtoa_r+0x41a>
 8007262:	9903      	ldr	r1, [sp, #12]
 8007264:	4b29      	ldr	r3, [pc, #164]	; (800730c <_dtoa_r+0x5a4>)
 8007266:	4421      	add	r1, r4
 8007268:	9112      	str	r1, [sp, #72]	; 0x48
 800726a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800726c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007270:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8007274:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007278:	2900      	cmp	r1, #0
 800727a:	d055      	beq.n	8007328 <_dtoa_r+0x5c0>
 800727c:	2000      	movs	r0, #0
 800727e:	4929      	ldr	r1, [pc, #164]	; (8007324 <_dtoa_r+0x5bc>)
 8007280:	f7f9 fa54 	bl	800072c <__aeabi_ddiv>
 8007284:	463b      	mov	r3, r7
 8007286:	4632      	mov	r2, r6
 8007288:	f7f8 ff6e 	bl	8000168 <__aeabi_dsub>
 800728c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007290:	9f03      	ldr	r7, [sp, #12]
 8007292:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007296:	f7f9 fbcf 	bl	8000a38 <__aeabi_d2iz>
 800729a:	4604      	mov	r4, r0
 800729c:	f7f9 f8b2 	bl	8000404 <__aeabi_i2d>
 80072a0:	4602      	mov	r2, r0
 80072a2:	460b      	mov	r3, r1
 80072a4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80072a8:	f7f8 ff5e 	bl	8000168 <__aeabi_dsub>
 80072ac:	4602      	mov	r2, r0
 80072ae:	460b      	mov	r3, r1
 80072b0:	3430      	adds	r4, #48	; 0x30
 80072b2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80072b6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80072ba:	f807 4b01 	strb.w	r4, [r7], #1
 80072be:	f7f9 fb7d 	bl	80009bc <__aeabi_dcmplt>
 80072c2:	2800      	cmp	r0, #0
 80072c4:	d174      	bne.n	80073b0 <_dtoa_r+0x648>
 80072c6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80072ca:	2000      	movs	r0, #0
 80072cc:	4911      	ldr	r1, [pc, #68]	; (8007314 <_dtoa_r+0x5ac>)
 80072ce:	f7f8 ff4b 	bl	8000168 <__aeabi_dsub>
 80072d2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80072d6:	f7f9 fb71 	bl	80009bc <__aeabi_dcmplt>
 80072da:	2800      	cmp	r0, #0
 80072dc:	f040 80b7 	bne.w	800744e <_dtoa_r+0x6e6>
 80072e0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80072e2:	429f      	cmp	r7, r3
 80072e4:	f43f af7a 	beq.w	80071dc <_dtoa_r+0x474>
 80072e8:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80072ec:	2200      	movs	r2, #0
 80072ee:	4b0a      	ldr	r3, [pc, #40]	; (8007318 <_dtoa_r+0x5b0>)
 80072f0:	f7f9 f8f2 	bl	80004d8 <__aeabi_dmul>
 80072f4:	2200      	movs	r2, #0
 80072f6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80072fa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80072fe:	4b06      	ldr	r3, [pc, #24]	; (8007318 <_dtoa_r+0x5b0>)
 8007300:	f7f9 f8ea 	bl	80004d8 <__aeabi_dmul>
 8007304:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007308:	e7c3      	b.n	8007292 <_dtoa_r+0x52a>
 800730a:	bf00      	nop
 800730c:	08009cc0 	.word	0x08009cc0
 8007310:	08009c98 	.word	0x08009c98
 8007314:	3ff00000 	.word	0x3ff00000
 8007318:	40240000 	.word	0x40240000
 800731c:	401c0000 	.word	0x401c0000
 8007320:	40140000 	.word	0x40140000
 8007324:	3fe00000 	.word	0x3fe00000
 8007328:	4630      	mov	r0, r6
 800732a:	4639      	mov	r1, r7
 800732c:	f7f9 f8d4 	bl	80004d8 <__aeabi_dmul>
 8007330:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007332:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007336:	9c03      	ldr	r4, [sp, #12]
 8007338:	9314      	str	r3, [sp, #80]	; 0x50
 800733a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800733e:	f7f9 fb7b 	bl	8000a38 <__aeabi_d2iz>
 8007342:	9015      	str	r0, [sp, #84]	; 0x54
 8007344:	f7f9 f85e 	bl	8000404 <__aeabi_i2d>
 8007348:	4602      	mov	r2, r0
 800734a:	460b      	mov	r3, r1
 800734c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007350:	f7f8 ff0a 	bl	8000168 <__aeabi_dsub>
 8007354:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007356:	4606      	mov	r6, r0
 8007358:	3330      	adds	r3, #48	; 0x30
 800735a:	f804 3b01 	strb.w	r3, [r4], #1
 800735e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007360:	460f      	mov	r7, r1
 8007362:	429c      	cmp	r4, r3
 8007364:	f04f 0200 	mov.w	r2, #0
 8007368:	d124      	bne.n	80073b4 <_dtoa_r+0x64c>
 800736a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800736e:	4bb0      	ldr	r3, [pc, #704]	; (8007630 <_dtoa_r+0x8c8>)
 8007370:	f7f8 fefc 	bl	800016c <__adddf3>
 8007374:	4602      	mov	r2, r0
 8007376:	460b      	mov	r3, r1
 8007378:	4630      	mov	r0, r6
 800737a:	4639      	mov	r1, r7
 800737c:	f7f9 fb3c 	bl	80009f8 <__aeabi_dcmpgt>
 8007380:	2800      	cmp	r0, #0
 8007382:	d163      	bne.n	800744c <_dtoa_r+0x6e4>
 8007384:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007388:	2000      	movs	r0, #0
 800738a:	49a9      	ldr	r1, [pc, #676]	; (8007630 <_dtoa_r+0x8c8>)
 800738c:	f7f8 feec 	bl	8000168 <__aeabi_dsub>
 8007390:	4602      	mov	r2, r0
 8007392:	460b      	mov	r3, r1
 8007394:	4630      	mov	r0, r6
 8007396:	4639      	mov	r1, r7
 8007398:	f7f9 fb10 	bl	80009bc <__aeabi_dcmplt>
 800739c:	2800      	cmp	r0, #0
 800739e:	f43f af1d 	beq.w	80071dc <_dtoa_r+0x474>
 80073a2:	9f14      	ldr	r7, [sp, #80]	; 0x50
 80073a4:	1e7b      	subs	r3, r7, #1
 80073a6:	9314      	str	r3, [sp, #80]	; 0x50
 80073a8:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 80073ac:	2b30      	cmp	r3, #48	; 0x30
 80073ae:	d0f8      	beq.n	80073a2 <_dtoa_r+0x63a>
 80073b0:	46c2      	mov	sl, r8
 80073b2:	e03b      	b.n	800742c <_dtoa_r+0x6c4>
 80073b4:	4b9f      	ldr	r3, [pc, #636]	; (8007634 <_dtoa_r+0x8cc>)
 80073b6:	f7f9 f88f 	bl	80004d8 <__aeabi_dmul>
 80073ba:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80073be:	e7bc      	b.n	800733a <_dtoa_r+0x5d2>
 80073c0:	9f03      	ldr	r7, [sp, #12]
 80073c2:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 80073c6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80073ca:	4640      	mov	r0, r8
 80073cc:	4649      	mov	r1, r9
 80073ce:	f7f9 f9ad 	bl	800072c <__aeabi_ddiv>
 80073d2:	f7f9 fb31 	bl	8000a38 <__aeabi_d2iz>
 80073d6:	4604      	mov	r4, r0
 80073d8:	f7f9 f814 	bl	8000404 <__aeabi_i2d>
 80073dc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80073e0:	f7f9 f87a 	bl	80004d8 <__aeabi_dmul>
 80073e4:	4602      	mov	r2, r0
 80073e6:	460b      	mov	r3, r1
 80073e8:	4640      	mov	r0, r8
 80073ea:	4649      	mov	r1, r9
 80073ec:	f7f8 febc 	bl	8000168 <__aeabi_dsub>
 80073f0:	f104 0630 	add.w	r6, r4, #48	; 0x30
 80073f4:	f807 6b01 	strb.w	r6, [r7], #1
 80073f8:	9e03      	ldr	r6, [sp, #12]
 80073fa:	f8dd c020 	ldr.w	ip, [sp, #32]
 80073fe:	1bbe      	subs	r6, r7, r6
 8007400:	45b4      	cmp	ip, r6
 8007402:	4602      	mov	r2, r0
 8007404:	460b      	mov	r3, r1
 8007406:	d136      	bne.n	8007476 <_dtoa_r+0x70e>
 8007408:	f7f8 feb0 	bl	800016c <__adddf3>
 800740c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007410:	4680      	mov	r8, r0
 8007412:	4689      	mov	r9, r1
 8007414:	f7f9 faf0 	bl	80009f8 <__aeabi_dcmpgt>
 8007418:	bb58      	cbnz	r0, 8007472 <_dtoa_r+0x70a>
 800741a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800741e:	4640      	mov	r0, r8
 8007420:	4649      	mov	r1, r9
 8007422:	f7f9 fac1 	bl	80009a8 <__aeabi_dcmpeq>
 8007426:	b108      	cbz	r0, 800742c <_dtoa_r+0x6c4>
 8007428:	07e1      	lsls	r1, r4, #31
 800742a:	d422      	bmi.n	8007472 <_dtoa_r+0x70a>
 800742c:	4628      	mov	r0, r5
 800742e:	4659      	mov	r1, fp
 8007430:	f000 fd0c 	bl	8007e4c <_Bfree>
 8007434:	2300      	movs	r3, #0
 8007436:	703b      	strb	r3, [r7, #0]
 8007438:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800743a:	f10a 0001 	add.w	r0, sl, #1
 800743e:	6018      	str	r0, [r3, #0]
 8007440:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007442:	2b00      	cmp	r3, #0
 8007444:	f43f acde 	beq.w	8006e04 <_dtoa_r+0x9c>
 8007448:	601f      	str	r7, [r3, #0]
 800744a:	e4db      	b.n	8006e04 <_dtoa_r+0x9c>
 800744c:	4627      	mov	r7, r4
 800744e:	463b      	mov	r3, r7
 8007450:	461f      	mov	r7, r3
 8007452:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007456:	2a39      	cmp	r2, #57	; 0x39
 8007458:	d107      	bne.n	800746a <_dtoa_r+0x702>
 800745a:	9a03      	ldr	r2, [sp, #12]
 800745c:	429a      	cmp	r2, r3
 800745e:	d1f7      	bne.n	8007450 <_dtoa_r+0x6e8>
 8007460:	2230      	movs	r2, #48	; 0x30
 8007462:	9903      	ldr	r1, [sp, #12]
 8007464:	f108 0801 	add.w	r8, r8, #1
 8007468:	700a      	strb	r2, [r1, #0]
 800746a:	781a      	ldrb	r2, [r3, #0]
 800746c:	3201      	adds	r2, #1
 800746e:	701a      	strb	r2, [r3, #0]
 8007470:	e79e      	b.n	80073b0 <_dtoa_r+0x648>
 8007472:	46d0      	mov	r8, sl
 8007474:	e7eb      	b.n	800744e <_dtoa_r+0x6e6>
 8007476:	2200      	movs	r2, #0
 8007478:	4b6e      	ldr	r3, [pc, #440]	; (8007634 <_dtoa_r+0x8cc>)
 800747a:	f7f9 f82d 	bl	80004d8 <__aeabi_dmul>
 800747e:	2200      	movs	r2, #0
 8007480:	2300      	movs	r3, #0
 8007482:	4680      	mov	r8, r0
 8007484:	4689      	mov	r9, r1
 8007486:	f7f9 fa8f 	bl	80009a8 <__aeabi_dcmpeq>
 800748a:	2800      	cmp	r0, #0
 800748c:	d09b      	beq.n	80073c6 <_dtoa_r+0x65e>
 800748e:	e7cd      	b.n	800742c <_dtoa_r+0x6c4>
 8007490:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007492:	2a00      	cmp	r2, #0
 8007494:	f000 80d0 	beq.w	8007638 <_dtoa_r+0x8d0>
 8007498:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800749a:	2a01      	cmp	r2, #1
 800749c:	f300 80ae 	bgt.w	80075fc <_dtoa_r+0x894>
 80074a0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80074a2:	2a00      	cmp	r2, #0
 80074a4:	f000 80a6 	beq.w	80075f4 <_dtoa_r+0x88c>
 80074a8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80074ac:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80074ae:	9f06      	ldr	r7, [sp, #24]
 80074b0:	9a06      	ldr	r2, [sp, #24]
 80074b2:	2101      	movs	r1, #1
 80074b4:	441a      	add	r2, r3
 80074b6:	9206      	str	r2, [sp, #24]
 80074b8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80074ba:	4628      	mov	r0, r5
 80074bc:	441a      	add	r2, r3
 80074be:	9209      	str	r2, [sp, #36]	; 0x24
 80074c0:	f000 fd7a 	bl	8007fb8 <__i2b>
 80074c4:	4606      	mov	r6, r0
 80074c6:	2f00      	cmp	r7, #0
 80074c8:	dd0c      	ble.n	80074e4 <_dtoa_r+0x77c>
 80074ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	dd09      	ble.n	80074e4 <_dtoa_r+0x77c>
 80074d0:	42bb      	cmp	r3, r7
 80074d2:	bfa8      	it	ge
 80074d4:	463b      	movge	r3, r7
 80074d6:	9a06      	ldr	r2, [sp, #24]
 80074d8:	1aff      	subs	r7, r7, r3
 80074da:	1ad2      	subs	r2, r2, r3
 80074dc:	9206      	str	r2, [sp, #24]
 80074de:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80074e0:	1ad3      	subs	r3, r2, r3
 80074e2:	9309      	str	r3, [sp, #36]	; 0x24
 80074e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80074e6:	b1f3      	cbz	r3, 8007526 <_dtoa_r+0x7be>
 80074e8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	f000 80a8 	beq.w	8007640 <_dtoa_r+0x8d8>
 80074f0:	2c00      	cmp	r4, #0
 80074f2:	dd10      	ble.n	8007516 <_dtoa_r+0x7ae>
 80074f4:	4631      	mov	r1, r6
 80074f6:	4622      	mov	r2, r4
 80074f8:	4628      	mov	r0, r5
 80074fa:	f000 fe1b 	bl	8008134 <__pow5mult>
 80074fe:	465a      	mov	r2, fp
 8007500:	4601      	mov	r1, r0
 8007502:	4606      	mov	r6, r0
 8007504:	4628      	mov	r0, r5
 8007506:	f000 fd6d 	bl	8007fe4 <__multiply>
 800750a:	4680      	mov	r8, r0
 800750c:	4659      	mov	r1, fp
 800750e:	4628      	mov	r0, r5
 8007510:	f000 fc9c 	bl	8007e4c <_Bfree>
 8007514:	46c3      	mov	fp, r8
 8007516:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007518:	1b1a      	subs	r2, r3, r4
 800751a:	d004      	beq.n	8007526 <_dtoa_r+0x7be>
 800751c:	4659      	mov	r1, fp
 800751e:	4628      	mov	r0, r5
 8007520:	f000 fe08 	bl	8008134 <__pow5mult>
 8007524:	4683      	mov	fp, r0
 8007526:	2101      	movs	r1, #1
 8007528:	4628      	mov	r0, r5
 800752a:	f000 fd45 	bl	8007fb8 <__i2b>
 800752e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007530:	4604      	mov	r4, r0
 8007532:	2b00      	cmp	r3, #0
 8007534:	f340 8086 	ble.w	8007644 <_dtoa_r+0x8dc>
 8007538:	461a      	mov	r2, r3
 800753a:	4601      	mov	r1, r0
 800753c:	4628      	mov	r0, r5
 800753e:	f000 fdf9 	bl	8008134 <__pow5mult>
 8007542:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007544:	4604      	mov	r4, r0
 8007546:	2b01      	cmp	r3, #1
 8007548:	dd7f      	ble.n	800764a <_dtoa_r+0x8e2>
 800754a:	f04f 0800 	mov.w	r8, #0
 800754e:	6923      	ldr	r3, [r4, #16]
 8007550:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007554:	6918      	ldr	r0, [r3, #16]
 8007556:	f000 fce1 	bl	8007f1c <__hi0bits>
 800755a:	f1c0 0020 	rsb	r0, r0, #32
 800755e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007560:	4418      	add	r0, r3
 8007562:	f010 001f 	ands.w	r0, r0, #31
 8007566:	f000 8092 	beq.w	800768e <_dtoa_r+0x926>
 800756a:	f1c0 0320 	rsb	r3, r0, #32
 800756e:	2b04      	cmp	r3, #4
 8007570:	f340 808a 	ble.w	8007688 <_dtoa_r+0x920>
 8007574:	f1c0 001c 	rsb	r0, r0, #28
 8007578:	9b06      	ldr	r3, [sp, #24]
 800757a:	4407      	add	r7, r0
 800757c:	4403      	add	r3, r0
 800757e:	9306      	str	r3, [sp, #24]
 8007580:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007582:	4403      	add	r3, r0
 8007584:	9309      	str	r3, [sp, #36]	; 0x24
 8007586:	9b06      	ldr	r3, [sp, #24]
 8007588:	2b00      	cmp	r3, #0
 800758a:	dd05      	ble.n	8007598 <_dtoa_r+0x830>
 800758c:	4659      	mov	r1, fp
 800758e:	461a      	mov	r2, r3
 8007590:	4628      	mov	r0, r5
 8007592:	f000 fe29 	bl	80081e8 <__lshift>
 8007596:	4683      	mov	fp, r0
 8007598:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800759a:	2b00      	cmp	r3, #0
 800759c:	dd05      	ble.n	80075aa <_dtoa_r+0x842>
 800759e:	4621      	mov	r1, r4
 80075a0:	461a      	mov	r2, r3
 80075a2:	4628      	mov	r0, r5
 80075a4:	f000 fe20 	bl	80081e8 <__lshift>
 80075a8:	4604      	mov	r4, r0
 80075aa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d070      	beq.n	8007692 <_dtoa_r+0x92a>
 80075b0:	4621      	mov	r1, r4
 80075b2:	4658      	mov	r0, fp
 80075b4:	f000 fe88 	bl	80082c8 <__mcmp>
 80075b8:	2800      	cmp	r0, #0
 80075ba:	da6a      	bge.n	8007692 <_dtoa_r+0x92a>
 80075bc:	2300      	movs	r3, #0
 80075be:	4659      	mov	r1, fp
 80075c0:	220a      	movs	r2, #10
 80075c2:	4628      	mov	r0, r5
 80075c4:	f000 fc64 	bl	8007e90 <__multadd>
 80075c8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80075ca:	4683      	mov	fp, r0
 80075cc:	f10a 3aff 	add.w	sl, sl, #4294967295
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	f000 8194 	beq.w	80078fe <_dtoa_r+0xb96>
 80075d6:	4631      	mov	r1, r6
 80075d8:	2300      	movs	r3, #0
 80075da:	220a      	movs	r2, #10
 80075dc:	4628      	mov	r0, r5
 80075de:	f000 fc57 	bl	8007e90 <__multadd>
 80075e2:	f1b9 0f00 	cmp.w	r9, #0
 80075e6:	4606      	mov	r6, r0
 80075e8:	f300 8093 	bgt.w	8007712 <_dtoa_r+0x9aa>
 80075ec:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80075ee:	2b02      	cmp	r3, #2
 80075f0:	dc57      	bgt.n	80076a2 <_dtoa_r+0x93a>
 80075f2:	e08e      	b.n	8007712 <_dtoa_r+0x9aa>
 80075f4:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80075f6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80075fa:	e757      	b.n	80074ac <_dtoa_r+0x744>
 80075fc:	9b08      	ldr	r3, [sp, #32]
 80075fe:	1e5c      	subs	r4, r3, #1
 8007600:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007602:	42a3      	cmp	r3, r4
 8007604:	bfb7      	itett	lt
 8007606:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8007608:	1b1c      	subge	r4, r3, r4
 800760a:	1ae2      	sublt	r2, r4, r3
 800760c:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800760e:	bfbe      	ittt	lt
 8007610:	940a      	strlt	r4, [sp, #40]	; 0x28
 8007612:	189b      	addlt	r3, r3, r2
 8007614:	930e      	strlt	r3, [sp, #56]	; 0x38
 8007616:	9b08      	ldr	r3, [sp, #32]
 8007618:	bfb8      	it	lt
 800761a:	2400      	movlt	r4, #0
 800761c:	2b00      	cmp	r3, #0
 800761e:	bfbb      	ittet	lt
 8007620:	9b06      	ldrlt	r3, [sp, #24]
 8007622:	9a08      	ldrlt	r2, [sp, #32]
 8007624:	9f06      	ldrge	r7, [sp, #24]
 8007626:	1a9f      	sublt	r7, r3, r2
 8007628:	bfac      	ite	ge
 800762a:	9b08      	ldrge	r3, [sp, #32]
 800762c:	2300      	movlt	r3, #0
 800762e:	e73f      	b.n	80074b0 <_dtoa_r+0x748>
 8007630:	3fe00000 	.word	0x3fe00000
 8007634:	40240000 	.word	0x40240000
 8007638:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800763a:	9f06      	ldr	r7, [sp, #24]
 800763c:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800763e:	e742      	b.n	80074c6 <_dtoa_r+0x75e>
 8007640:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007642:	e76b      	b.n	800751c <_dtoa_r+0x7b4>
 8007644:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007646:	2b01      	cmp	r3, #1
 8007648:	dc19      	bgt.n	800767e <_dtoa_r+0x916>
 800764a:	9b04      	ldr	r3, [sp, #16]
 800764c:	b9bb      	cbnz	r3, 800767e <_dtoa_r+0x916>
 800764e:	9b05      	ldr	r3, [sp, #20]
 8007650:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007654:	b99b      	cbnz	r3, 800767e <_dtoa_r+0x916>
 8007656:	9b05      	ldr	r3, [sp, #20]
 8007658:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800765c:	0d1b      	lsrs	r3, r3, #20
 800765e:	051b      	lsls	r3, r3, #20
 8007660:	b183      	cbz	r3, 8007684 <_dtoa_r+0x91c>
 8007662:	f04f 0801 	mov.w	r8, #1
 8007666:	9b06      	ldr	r3, [sp, #24]
 8007668:	3301      	adds	r3, #1
 800766a:	9306      	str	r3, [sp, #24]
 800766c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800766e:	3301      	adds	r3, #1
 8007670:	9309      	str	r3, [sp, #36]	; 0x24
 8007672:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007674:	2b00      	cmp	r3, #0
 8007676:	f47f af6a 	bne.w	800754e <_dtoa_r+0x7e6>
 800767a:	2001      	movs	r0, #1
 800767c:	e76f      	b.n	800755e <_dtoa_r+0x7f6>
 800767e:	f04f 0800 	mov.w	r8, #0
 8007682:	e7f6      	b.n	8007672 <_dtoa_r+0x90a>
 8007684:	4698      	mov	r8, r3
 8007686:	e7f4      	b.n	8007672 <_dtoa_r+0x90a>
 8007688:	f43f af7d 	beq.w	8007586 <_dtoa_r+0x81e>
 800768c:	4618      	mov	r0, r3
 800768e:	301c      	adds	r0, #28
 8007690:	e772      	b.n	8007578 <_dtoa_r+0x810>
 8007692:	9b08      	ldr	r3, [sp, #32]
 8007694:	2b00      	cmp	r3, #0
 8007696:	dc36      	bgt.n	8007706 <_dtoa_r+0x99e>
 8007698:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800769a:	2b02      	cmp	r3, #2
 800769c:	dd33      	ble.n	8007706 <_dtoa_r+0x99e>
 800769e:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80076a2:	f1b9 0f00 	cmp.w	r9, #0
 80076a6:	d10d      	bne.n	80076c4 <_dtoa_r+0x95c>
 80076a8:	4621      	mov	r1, r4
 80076aa:	464b      	mov	r3, r9
 80076ac:	2205      	movs	r2, #5
 80076ae:	4628      	mov	r0, r5
 80076b0:	f000 fbee 	bl	8007e90 <__multadd>
 80076b4:	4601      	mov	r1, r0
 80076b6:	4604      	mov	r4, r0
 80076b8:	4658      	mov	r0, fp
 80076ba:	f000 fe05 	bl	80082c8 <__mcmp>
 80076be:	2800      	cmp	r0, #0
 80076c0:	f73f adb8 	bgt.w	8007234 <_dtoa_r+0x4cc>
 80076c4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80076c6:	9f03      	ldr	r7, [sp, #12]
 80076c8:	ea6f 0a03 	mvn.w	sl, r3
 80076cc:	f04f 0800 	mov.w	r8, #0
 80076d0:	4621      	mov	r1, r4
 80076d2:	4628      	mov	r0, r5
 80076d4:	f000 fbba 	bl	8007e4c <_Bfree>
 80076d8:	2e00      	cmp	r6, #0
 80076da:	f43f aea7 	beq.w	800742c <_dtoa_r+0x6c4>
 80076de:	f1b8 0f00 	cmp.w	r8, #0
 80076e2:	d005      	beq.n	80076f0 <_dtoa_r+0x988>
 80076e4:	45b0      	cmp	r8, r6
 80076e6:	d003      	beq.n	80076f0 <_dtoa_r+0x988>
 80076e8:	4641      	mov	r1, r8
 80076ea:	4628      	mov	r0, r5
 80076ec:	f000 fbae 	bl	8007e4c <_Bfree>
 80076f0:	4631      	mov	r1, r6
 80076f2:	4628      	mov	r0, r5
 80076f4:	f000 fbaa 	bl	8007e4c <_Bfree>
 80076f8:	e698      	b.n	800742c <_dtoa_r+0x6c4>
 80076fa:	2400      	movs	r4, #0
 80076fc:	4626      	mov	r6, r4
 80076fe:	e7e1      	b.n	80076c4 <_dtoa_r+0x95c>
 8007700:	46c2      	mov	sl, r8
 8007702:	4626      	mov	r6, r4
 8007704:	e596      	b.n	8007234 <_dtoa_r+0x4cc>
 8007706:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007708:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800770c:	2b00      	cmp	r3, #0
 800770e:	f000 80fd 	beq.w	800790c <_dtoa_r+0xba4>
 8007712:	2f00      	cmp	r7, #0
 8007714:	dd05      	ble.n	8007722 <_dtoa_r+0x9ba>
 8007716:	4631      	mov	r1, r6
 8007718:	463a      	mov	r2, r7
 800771a:	4628      	mov	r0, r5
 800771c:	f000 fd64 	bl	80081e8 <__lshift>
 8007720:	4606      	mov	r6, r0
 8007722:	f1b8 0f00 	cmp.w	r8, #0
 8007726:	d05c      	beq.n	80077e2 <_dtoa_r+0xa7a>
 8007728:	4628      	mov	r0, r5
 800772a:	6871      	ldr	r1, [r6, #4]
 800772c:	f000 fb4e 	bl	8007dcc <_Balloc>
 8007730:	4607      	mov	r7, r0
 8007732:	b928      	cbnz	r0, 8007740 <_dtoa_r+0x9d8>
 8007734:	4602      	mov	r2, r0
 8007736:	f240 21ea 	movw	r1, #746	; 0x2ea
 800773a:	4b7f      	ldr	r3, [pc, #508]	; (8007938 <_dtoa_r+0xbd0>)
 800773c:	f7ff bb28 	b.w	8006d90 <_dtoa_r+0x28>
 8007740:	6932      	ldr	r2, [r6, #16]
 8007742:	f106 010c 	add.w	r1, r6, #12
 8007746:	3202      	adds	r2, #2
 8007748:	0092      	lsls	r2, r2, #2
 800774a:	300c      	adds	r0, #12
 800774c:	f000 fb30 	bl	8007db0 <memcpy>
 8007750:	2201      	movs	r2, #1
 8007752:	4639      	mov	r1, r7
 8007754:	4628      	mov	r0, r5
 8007756:	f000 fd47 	bl	80081e8 <__lshift>
 800775a:	46b0      	mov	r8, r6
 800775c:	4606      	mov	r6, r0
 800775e:	9b03      	ldr	r3, [sp, #12]
 8007760:	3301      	adds	r3, #1
 8007762:	9308      	str	r3, [sp, #32]
 8007764:	9b03      	ldr	r3, [sp, #12]
 8007766:	444b      	add	r3, r9
 8007768:	930a      	str	r3, [sp, #40]	; 0x28
 800776a:	9b04      	ldr	r3, [sp, #16]
 800776c:	f003 0301 	and.w	r3, r3, #1
 8007770:	9309      	str	r3, [sp, #36]	; 0x24
 8007772:	9b08      	ldr	r3, [sp, #32]
 8007774:	4621      	mov	r1, r4
 8007776:	3b01      	subs	r3, #1
 8007778:	4658      	mov	r0, fp
 800777a:	9304      	str	r3, [sp, #16]
 800777c:	f7ff fa68 	bl	8006c50 <quorem>
 8007780:	4603      	mov	r3, r0
 8007782:	4641      	mov	r1, r8
 8007784:	3330      	adds	r3, #48	; 0x30
 8007786:	9006      	str	r0, [sp, #24]
 8007788:	4658      	mov	r0, fp
 800778a:	930b      	str	r3, [sp, #44]	; 0x2c
 800778c:	f000 fd9c 	bl	80082c8 <__mcmp>
 8007790:	4632      	mov	r2, r6
 8007792:	4681      	mov	r9, r0
 8007794:	4621      	mov	r1, r4
 8007796:	4628      	mov	r0, r5
 8007798:	f000 fdb2 	bl	8008300 <__mdiff>
 800779c:	68c2      	ldr	r2, [r0, #12]
 800779e:	4607      	mov	r7, r0
 80077a0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80077a2:	bb02      	cbnz	r2, 80077e6 <_dtoa_r+0xa7e>
 80077a4:	4601      	mov	r1, r0
 80077a6:	4658      	mov	r0, fp
 80077a8:	f000 fd8e 	bl	80082c8 <__mcmp>
 80077ac:	4602      	mov	r2, r0
 80077ae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80077b0:	4639      	mov	r1, r7
 80077b2:	4628      	mov	r0, r5
 80077b4:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 80077b8:	f000 fb48 	bl	8007e4c <_Bfree>
 80077bc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80077be:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80077c0:	9f08      	ldr	r7, [sp, #32]
 80077c2:	ea43 0102 	orr.w	r1, r3, r2
 80077c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80077c8:	430b      	orrs	r3, r1
 80077ca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80077cc:	d10d      	bne.n	80077ea <_dtoa_r+0xa82>
 80077ce:	2b39      	cmp	r3, #57	; 0x39
 80077d0:	d029      	beq.n	8007826 <_dtoa_r+0xabe>
 80077d2:	f1b9 0f00 	cmp.w	r9, #0
 80077d6:	dd01      	ble.n	80077dc <_dtoa_r+0xa74>
 80077d8:	9b06      	ldr	r3, [sp, #24]
 80077da:	3331      	adds	r3, #49	; 0x31
 80077dc:	9a04      	ldr	r2, [sp, #16]
 80077de:	7013      	strb	r3, [r2, #0]
 80077e0:	e776      	b.n	80076d0 <_dtoa_r+0x968>
 80077e2:	4630      	mov	r0, r6
 80077e4:	e7b9      	b.n	800775a <_dtoa_r+0x9f2>
 80077e6:	2201      	movs	r2, #1
 80077e8:	e7e2      	b.n	80077b0 <_dtoa_r+0xa48>
 80077ea:	f1b9 0f00 	cmp.w	r9, #0
 80077ee:	db06      	blt.n	80077fe <_dtoa_r+0xa96>
 80077f0:	9922      	ldr	r1, [sp, #136]	; 0x88
 80077f2:	ea41 0909 	orr.w	r9, r1, r9
 80077f6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80077f8:	ea59 0101 	orrs.w	r1, r9, r1
 80077fc:	d120      	bne.n	8007840 <_dtoa_r+0xad8>
 80077fe:	2a00      	cmp	r2, #0
 8007800:	ddec      	ble.n	80077dc <_dtoa_r+0xa74>
 8007802:	4659      	mov	r1, fp
 8007804:	2201      	movs	r2, #1
 8007806:	4628      	mov	r0, r5
 8007808:	9308      	str	r3, [sp, #32]
 800780a:	f000 fced 	bl	80081e8 <__lshift>
 800780e:	4621      	mov	r1, r4
 8007810:	4683      	mov	fp, r0
 8007812:	f000 fd59 	bl	80082c8 <__mcmp>
 8007816:	2800      	cmp	r0, #0
 8007818:	9b08      	ldr	r3, [sp, #32]
 800781a:	dc02      	bgt.n	8007822 <_dtoa_r+0xaba>
 800781c:	d1de      	bne.n	80077dc <_dtoa_r+0xa74>
 800781e:	07da      	lsls	r2, r3, #31
 8007820:	d5dc      	bpl.n	80077dc <_dtoa_r+0xa74>
 8007822:	2b39      	cmp	r3, #57	; 0x39
 8007824:	d1d8      	bne.n	80077d8 <_dtoa_r+0xa70>
 8007826:	2339      	movs	r3, #57	; 0x39
 8007828:	9a04      	ldr	r2, [sp, #16]
 800782a:	7013      	strb	r3, [r2, #0]
 800782c:	463b      	mov	r3, r7
 800782e:	461f      	mov	r7, r3
 8007830:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8007834:	3b01      	subs	r3, #1
 8007836:	2a39      	cmp	r2, #57	; 0x39
 8007838:	d050      	beq.n	80078dc <_dtoa_r+0xb74>
 800783a:	3201      	adds	r2, #1
 800783c:	701a      	strb	r2, [r3, #0]
 800783e:	e747      	b.n	80076d0 <_dtoa_r+0x968>
 8007840:	2a00      	cmp	r2, #0
 8007842:	dd03      	ble.n	800784c <_dtoa_r+0xae4>
 8007844:	2b39      	cmp	r3, #57	; 0x39
 8007846:	d0ee      	beq.n	8007826 <_dtoa_r+0xabe>
 8007848:	3301      	adds	r3, #1
 800784a:	e7c7      	b.n	80077dc <_dtoa_r+0xa74>
 800784c:	9a08      	ldr	r2, [sp, #32]
 800784e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8007850:	f802 3c01 	strb.w	r3, [r2, #-1]
 8007854:	428a      	cmp	r2, r1
 8007856:	d02a      	beq.n	80078ae <_dtoa_r+0xb46>
 8007858:	4659      	mov	r1, fp
 800785a:	2300      	movs	r3, #0
 800785c:	220a      	movs	r2, #10
 800785e:	4628      	mov	r0, r5
 8007860:	f000 fb16 	bl	8007e90 <__multadd>
 8007864:	45b0      	cmp	r8, r6
 8007866:	4683      	mov	fp, r0
 8007868:	f04f 0300 	mov.w	r3, #0
 800786c:	f04f 020a 	mov.w	r2, #10
 8007870:	4641      	mov	r1, r8
 8007872:	4628      	mov	r0, r5
 8007874:	d107      	bne.n	8007886 <_dtoa_r+0xb1e>
 8007876:	f000 fb0b 	bl	8007e90 <__multadd>
 800787a:	4680      	mov	r8, r0
 800787c:	4606      	mov	r6, r0
 800787e:	9b08      	ldr	r3, [sp, #32]
 8007880:	3301      	adds	r3, #1
 8007882:	9308      	str	r3, [sp, #32]
 8007884:	e775      	b.n	8007772 <_dtoa_r+0xa0a>
 8007886:	f000 fb03 	bl	8007e90 <__multadd>
 800788a:	4631      	mov	r1, r6
 800788c:	4680      	mov	r8, r0
 800788e:	2300      	movs	r3, #0
 8007890:	220a      	movs	r2, #10
 8007892:	4628      	mov	r0, r5
 8007894:	f000 fafc 	bl	8007e90 <__multadd>
 8007898:	4606      	mov	r6, r0
 800789a:	e7f0      	b.n	800787e <_dtoa_r+0xb16>
 800789c:	f1b9 0f00 	cmp.w	r9, #0
 80078a0:	bfcc      	ite	gt
 80078a2:	464f      	movgt	r7, r9
 80078a4:	2701      	movle	r7, #1
 80078a6:	f04f 0800 	mov.w	r8, #0
 80078aa:	9a03      	ldr	r2, [sp, #12]
 80078ac:	4417      	add	r7, r2
 80078ae:	4659      	mov	r1, fp
 80078b0:	2201      	movs	r2, #1
 80078b2:	4628      	mov	r0, r5
 80078b4:	9308      	str	r3, [sp, #32]
 80078b6:	f000 fc97 	bl	80081e8 <__lshift>
 80078ba:	4621      	mov	r1, r4
 80078bc:	4683      	mov	fp, r0
 80078be:	f000 fd03 	bl	80082c8 <__mcmp>
 80078c2:	2800      	cmp	r0, #0
 80078c4:	dcb2      	bgt.n	800782c <_dtoa_r+0xac4>
 80078c6:	d102      	bne.n	80078ce <_dtoa_r+0xb66>
 80078c8:	9b08      	ldr	r3, [sp, #32]
 80078ca:	07db      	lsls	r3, r3, #31
 80078cc:	d4ae      	bmi.n	800782c <_dtoa_r+0xac4>
 80078ce:	463b      	mov	r3, r7
 80078d0:	461f      	mov	r7, r3
 80078d2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80078d6:	2a30      	cmp	r2, #48	; 0x30
 80078d8:	d0fa      	beq.n	80078d0 <_dtoa_r+0xb68>
 80078da:	e6f9      	b.n	80076d0 <_dtoa_r+0x968>
 80078dc:	9a03      	ldr	r2, [sp, #12]
 80078de:	429a      	cmp	r2, r3
 80078e0:	d1a5      	bne.n	800782e <_dtoa_r+0xac6>
 80078e2:	2331      	movs	r3, #49	; 0x31
 80078e4:	f10a 0a01 	add.w	sl, sl, #1
 80078e8:	e779      	b.n	80077de <_dtoa_r+0xa76>
 80078ea:	4b14      	ldr	r3, [pc, #80]	; (800793c <_dtoa_r+0xbd4>)
 80078ec:	f7ff baa8 	b.w	8006e40 <_dtoa_r+0xd8>
 80078f0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	f47f aa81 	bne.w	8006dfa <_dtoa_r+0x92>
 80078f8:	4b11      	ldr	r3, [pc, #68]	; (8007940 <_dtoa_r+0xbd8>)
 80078fa:	f7ff baa1 	b.w	8006e40 <_dtoa_r+0xd8>
 80078fe:	f1b9 0f00 	cmp.w	r9, #0
 8007902:	dc03      	bgt.n	800790c <_dtoa_r+0xba4>
 8007904:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007906:	2b02      	cmp	r3, #2
 8007908:	f73f aecb 	bgt.w	80076a2 <_dtoa_r+0x93a>
 800790c:	9f03      	ldr	r7, [sp, #12]
 800790e:	4621      	mov	r1, r4
 8007910:	4658      	mov	r0, fp
 8007912:	f7ff f99d 	bl	8006c50 <quorem>
 8007916:	9a03      	ldr	r2, [sp, #12]
 8007918:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800791c:	f807 3b01 	strb.w	r3, [r7], #1
 8007920:	1aba      	subs	r2, r7, r2
 8007922:	4591      	cmp	r9, r2
 8007924:	ddba      	ble.n	800789c <_dtoa_r+0xb34>
 8007926:	4659      	mov	r1, fp
 8007928:	2300      	movs	r3, #0
 800792a:	220a      	movs	r2, #10
 800792c:	4628      	mov	r0, r5
 800792e:	f000 faaf 	bl	8007e90 <__multadd>
 8007932:	4683      	mov	fp, r0
 8007934:	e7eb      	b.n	800790e <_dtoa_r+0xba6>
 8007936:	bf00      	nop
 8007938:	08009bcb 	.word	0x08009bcb
 800793c:	08009b28 	.word	0x08009b28
 8007940:	08009b4c 	.word	0x08009b4c

08007944 <__sflush_r>:
 8007944:	898a      	ldrh	r2, [r1, #12]
 8007946:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007948:	4605      	mov	r5, r0
 800794a:	0710      	lsls	r0, r2, #28
 800794c:	460c      	mov	r4, r1
 800794e:	d457      	bmi.n	8007a00 <__sflush_r+0xbc>
 8007950:	684b      	ldr	r3, [r1, #4]
 8007952:	2b00      	cmp	r3, #0
 8007954:	dc04      	bgt.n	8007960 <__sflush_r+0x1c>
 8007956:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007958:	2b00      	cmp	r3, #0
 800795a:	dc01      	bgt.n	8007960 <__sflush_r+0x1c>
 800795c:	2000      	movs	r0, #0
 800795e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007960:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007962:	2e00      	cmp	r6, #0
 8007964:	d0fa      	beq.n	800795c <__sflush_r+0x18>
 8007966:	2300      	movs	r3, #0
 8007968:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800796c:	682f      	ldr	r7, [r5, #0]
 800796e:	602b      	str	r3, [r5, #0]
 8007970:	d032      	beq.n	80079d8 <__sflush_r+0x94>
 8007972:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007974:	89a3      	ldrh	r3, [r4, #12]
 8007976:	075a      	lsls	r2, r3, #29
 8007978:	d505      	bpl.n	8007986 <__sflush_r+0x42>
 800797a:	6863      	ldr	r3, [r4, #4]
 800797c:	1ac0      	subs	r0, r0, r3
 800797e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007980:	b10b      	cbz	r3, 8007986 <__sflush_r+0x42>
 8007982:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007984:	1ac0      	subs	r0, r0, r3
 8007986:	2300      	movs	r3, #0
 8007988:	4602      	mov	r2, r0
 800798a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800798c:	4628      	mov	r0, r5
 800798e:	6a21      	ldr	r1, [r4, #32]
 8007990:	47b0      	blx	r6
 8007992:	1c43      	adds	r3, r0, #1
 8007994:	89a3      	ldrh	r3, [r4, #12]
 8007996:	d106      	bne.n	80079a6 <__sflush_r+0x62>
 8007998:	6829      	ldr	r1, [r5, #0]
 800799a:	291d      	cmp	r1, #29
 800799c:	d82c      	bhi.n	80079f8 <__sflush_r+0xb4>
 800799e:	4a29      	ldr	r2, [pc, #164]	; (8007a44 <__sflush_r+0x100>)
 80079a0:	40ca      	lsrs	r2, r1
 80079a2:	07d6      	lsls	r6, r2, #31
 80079a4:	d528      	bpl.n	80079f8 <__sflush_r+0xb4>
 80079a6:	2200      	movs	r2, #0
 80079a8:	6062      	str	r2, [r4, #4]
 80079aa:	6922      	ldr	r2, [r4, #16]
 80079ac:	04d9      	lsls	r1, r3, #19
 80079ae:	6022      	str	r2, [r4, #0]
 80079b0:	d504      	bpl.n	80079bc <__sflush_r+0x78>
 80079b2:	1c42      	adds	r2, r0, #1
 80079b4:	d101      	bne.n	80079ba <__sflush_r+0x76>
 80079b6:	682b      	ldr	r3, [r5, #0]
 80079b8:	b903      	cbnz	r3, 80079bc <__sflush_r+0x78>
 80079ba:	6560      	str	r0, [r4, #84]	; 0x54
 80079bc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80079be:	602f      	str	r7, [r5, #0]
 80079c0:	2900      	cmp	r1, #0
 80079c2:	d0cb      	beq.n	800795c <__sflush_r+0x18>
 80079c4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80079c8:	4299      	cmp	r1, r3
 80079ca:	d002      	beq.n	80079d2 <__sflush_r+0x8e>
 80079cc:	4628      	mov	r0, r5
 80079ce:	f000 fd93 	bl	80084f8 <_free_r>
 80079d2:	2000      	movs	r0, #0
 80079d4:	6360      	str	r0, [r4, #52]	; 0x34
 80079d6:	e7c2      	b.n	800795e <__sflush_r+0x1a>
 80079d8:	6a21      	ldr	r1, [r4, #32]
 80079da:	2301      	movs	r3, #1
 80079dc:	4628      	mov	r0, r5
 80079de:	47b0      	blx	r6
 80079e0:	1c41      	adds	r1, r0, #1
 80079e2:	d1c7      	bne.n	8007974 <__sflush_r+0x30>
 80079e4:	682b      	ldr	r3, [r5, #0]
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d0c4      	beq.n	8007974 <__sflush_r+0x30>
 80079ea:	2b1d      	cmp	r3, #29
 80079ec:	d001      	beq.n	80079f2 <__sflush_r+0xae>
 80079ee:	2b16      	cmp	r3, #22
 80079f0:	d101      	bne.n	80079f6 <__sflush_r+0xb2>
 80079f2:	602f      	str	r7, [r5, #0]
 80079f4:	e7b2      	b.n	800795c <__sflush_r+0x18>
 80079f6:	89a3      	ldrh	r3, [r4, #12]
 80079f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80079fc:	81a3      	strh	r3, [r4, #12]
 80079fe:	e7ae      	b.n	800795e <__sflush_r+0x1a>
 8007a00:	690f      	ldr	r7, [r1, #16]
 8007a02:	2f00      	cmp	r7, #0
 8007a04:	d0aa      	beq.n	800795c <__sflush_r+0x18>
 8007a06:	0793      	lsls	r3, r2, #30
 8007a08:	bf18      	it	ne
 8007a0a:	2300      	movne	r3, #0
 8007a0c:	680e      	ldr	r6, [r1, #0]
 8007a0e:	bf08      	it	eq
 8007a10:	694b      	ldreq	r3, [r1, #20]
 8007a12:	1bf6      	subs	r6, r6, r7
 8007a14:	600f      	str	r7, [r1, #0]
 8007a16:	608b      	str	r3, [r1, #8]
 8007a18:	2e00      	cmp	r6, #0
 8007a1a:	dd9f      	ble.n	800795c <__sflush_r+0x18>
 8007a1c:	4633      	mov	r3, r6
 8007a1e:	463a      	mov	r2, r7
 8007a20:	4628      	mov	r0, r5
 8007a22:	6a21      	ldr	r1, [r4, #32]
 8007a24:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8007a28:	47e0      	blx	ip
 8007a2a:	2800      	cmp	r0, #0
 8007a2c:	dc06      	bgt.n	8007a3c <__sflush_r+0xf8>
 8007a2e:	89a3      	ldrh	r3, [r4, #12]
 8007a30:	f04f 30ff 	mov.w	r0, #4294967295
 8007a34:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007a38:	81a3      	strh	r3, [r4, #12]
 8007a3a:	e790      	b.n	800795e <__sflush_r+0x1a>
 8007a3c:	4407      	add	r7, r0
 8007a3e:	1a36      	subs	r6, r6, r0
 8007a40:	e7ea      	b.n	8007a18 <__sflush_r+0xd4>
 8007a42:	bf00      	nop
 8007a44:	20400001 	.word	0x20400001

08007a48 <_fflush_r>:
 8007a48:	b538      	push	{r3, r4, r5, lr}
 8007a4a:	690b      	ldr	r3, [r1, #16]
 8007a4c:	4605      	mov	r5, r0
 8007a4e:	460c      	mov	r4, r1
 8007a50:	b913      	cbnz	r3, 8007a58 <_fflush_r+0x10>
 8007a52:	2500      	movs	r5, #0
 8007a54:	4628      	mov	r0, r5
 8007a56:	bd38      	pop	{r3, r4, r5, pc}
 8007a58:	b118      	cbz	r0, 8007a62 <_fflush_r+0x1a>
 8007a5a:	6983      	ldr	r3, [r0, #24]
 8007a5c:	b90b      	cbnz	r3, 8007a62 <_fflush_r+0x1a>
 8007a5e:	f000 f887 	bl	8007b70 <__sinit>
 8007a62:	4b14      	ldr	r3, [pc, #80]	; (8007ab4 <_fflush_r+0x6c>)
 8007a64:	429c      	cmp	r4, r3
 8007a66:	d11b      	bne.n	8007aa0 <_fflush_r+0x58>
 8007a68:	686c      	ldr	r4, [r5, #4]
 8007a6a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d0ef      	beq.n	8007a52 <_fflush_r+0xa>
 8007a72:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007a74:	07d0      	lsls	r0, r2, #31
 8007a76:	d404      	bmi.n	8007a82 <_fflush_r+0x3a>
 8007a78:	0599      	lsls	r1, r3, #22
 8007a7a:	d402      	bmi.n	8007a82 <_fflush_r+0x3a>
 8007a7c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007a7e:	f000 f91a 	bl	8007cb6 <__retarget_lock_acquire_recursive>
 8007a82:	4628      	mov	r0, r5
 8007a84:	4621      	mov	r1, r4
 8007a86:	f7ff ff5d 	bl	8007944 <__sflush_r>
 8007a8a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007a8c:	4605      	mov	r5, r0
 8007a8e:	07da      	lsls	r2, r3, #31
 8007a90:	d4e0      	bmi.n	8007a54 <_fflush_r+0xc>
 8007a92:	89a3      	ldrh	r3, [r4, #12]
 8007a94:	059b      	lsls	r3, r3, #22
 8007a96:	d4dd      	bmi.n	8007a54 <_fflush_r+0xc>
 8007a98:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007a9a:	f000 f90d 	bl	8007cb8 <__retarget_lock_release_recursive>
 8007a9e:	e7d9      	b.n	8007a54 <_fflush_r+0xc>
 8007aa0:	4b05      	ldr	r3, [pc, #20]	; (8007ab8 <_fflush_r+0x70>)
 8007aa2:	429c      	cmp	r4, r3
 8007aa4:	d101      	bne.n	8007aaa <_fflush_r+0x62>
 8007aa6:	68ac      	ldr	r4, [r5, #8]
 8007aa8:	e7df      	b.n	8007a6a <_fflush_r+0x22>
 8007aaa:	4b04      	ldr	r3, [pc, #16]	; (8007abc <_fflush_r+0x74>)
 8007aac:	429c      	cmp	r4, r3
 8007aae:	bf08      	it	eq
 8007ab0:	68ec      	ldreq	r4, [r5, #12]
 8007ab2:	e7da      	b.n	8007a6a <_fflush_r+0x22>
 8007ab4:	08009bfc 	.word	0x08009bfc
 8007ab8:	08009c1c 	.word	0x08009c1c
 8007abc:	08009bdc 	.word	0x08009bdc

08007ac0 <std>:
 8007ac0:	2300      	movs	r3, #0
 8007ac2:	b510      	push	{r4, lr}
 8007ac4:	4604      	mov	r4, r0
 8007ac6:	e9c0 3300 	strd	r3, r3, [r0]
 8007aca:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007ace:	6083      	str	r3, [r0, #8]
 8007ad0:	8181      	strh	r1, [r0, #12]
 8007ad2:	6643      	str	r3, [r0, #100]	; 0x64
 8007ad4:	81c2      	strh	r2, [r0, #14]
 8007ad6:	6183      	str	r3, [r0, #24]
 8007ad8:	4619      	mov	r1, r3
 8007ada:	2208      	movs	r2, #8
 8007adc:	305c      	adds	r0, #92	; 0x5c
 8007ade:	f7fe fb01 	bl	80060e4 <memset>
 8007ae2:	4b05      	ldr	r3, [pc, #20]	; (8007af8 <std+0x38>)
 8007ae4:	6224      	str	r4, [r4, #32]
 8007ae6:	6263      	str	r3, [r4, #36]	; 0x24
 8007ae8:	4b04      	ldr	r3, [pc, #16]	; (8007afc <std+0x3c>)
 8007aea:	62a3      	str	r3, [r4, #40]	; 0x28
 8007aec:	4b04      	ldr	r3, [pc, #16]	; (8007b00 <std+0x40>)
 8007aee:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007af0:	4b04      	ldr	r3, [pc, #16]	; (8007b04 <std+0x44>)
 8007af2:	6323      	str	r3, [r4, #48]	; 0x30
 8007af4:	bd10      	pop	{r4, pc}
 8007af6:	bf00      	nop
 8007af8:	08008981 	.word	0x08008981
 8007afc:	080089a3 	.word	0x080089a3
 8007b00:	080089db 	.word	0x080089db
 8007b04:	080089ff 	.word	0x080089ff

08007b08 <_cleanup_r>:
 8007b08:	4901      	ldr	r1, [pc, #4]	; (8007b10 <_cleanup_r+0x8>)
 8007b0a:	f000 b8af 	b.w	8007c6c <_fwalk_reent>
 8007b0e:	bf00      	nop
 8007b10:	08007a49 	.word	0x08007a49

08007b14 <__sfmoreglue>:
 8007b14:	2268      	movs	r2, #104	; 0x68
 8007b16:	b570      	push	{r4, r5, r6, lr}
 8007b18:	1e4d      	subs	r5, r1, #1
 8007b1a:	4355      	muls	r5, r2
 8007b1c:	460e      	mov	r6, r1
 8007b1e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007b22:	f000 fd51 	bl	80085c8 <_malloc_r>
 8007b26:	4604      	mov	r4, r0
 8007b28:	b140      	cbz	r0, 8007b3c <__sfmoreglue+0x28>
 8007b2a:	2100      	movs	r1, #0
 8007b2c:	e9c0 1600 	strd	r1, r6, [r0]
 8007b30:	300c      	adds	r0, #12
 8007b32:	60a0      	str	r0, [r4, #8]
 8007b34:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007b38:	f7fe fad4 	bl	80060e4 <memset>
 8007b3c:	4620      	mov	r0, r4
 8007b3e:	bd70      	pop	{r4, r5, r6, pc}

08007b40 <__sfp_lock_acquire>:
 8007b40:	4801      	ldr	r0, [pc, #4]	; (8007b48 <__sfp_lock_acquire+0x8>)
 8007b42:	f000 b8b8 	b.w	8007cb6 <__retarget_lock_acquire_recursive>
 8007b46:	bf00      	nop
 8007b48:	20000381 	.word	0x20000381

08007b4c <__sfp_lock_release>:
 8007b4c:	4801      	ldr	r0, [pc, #4]	; (8007b54 <__sfp_lock_release+0x8>)
 8007b4e:	f000 b8b3 	b.w	8007cb8 <__retarget_lock_release_recursive>
 8007b52:	bf00      	nop
 8007b54:	20000381 	.word	0x20000381

08007b58 <__sinit_lock_acquire>:
 8007b58:	4801      	ldr	r0, [pc, #4]	; (8007b60 <__sinit_lock_acquire+0x8>)
 8007b5a:	f000 b8ac 	b.w	8007cb6 <__retarget_lock_acquire_recursive>
 8007b5e:	bf00      	nop
 8007b60:	20000382 	.word	0x20000382

08007b64 <__sinit_lock_release>:
 8007b64:	4801      	ldr	r0, [pc, #4]	; (8007b6c <__sinit_lock_release+0x8>)
 8007b66:	f000 b8a7 	b.w	8007cb8 <__retarget_lock_release_recursive>
 8007b6a:	bf00      	nop
 8007b6c:	20000382 	.word	0x20000382

08007b70 <__sinit>:
 8007b70:	b510      	push	{r4, lr}
 8007b72:	4604      	mov	r4, r0
 8007b74:	f7ff fff0 	bl	8007b58 <__sinit_lock_acquire>
 8007b78:	69a3      	ldr	r3, [r4, #24]
 8007b7a:	b11b      	cbz	r3, 8007b84 <__sinit+0x14>
 8007b7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007b80:	f7ff bff0 	b.w	8007b64 <__sinit_lock_release>
 8007b84:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007b88:	6523      	str	r3, [r4, #80]	; 0x50
 8007b8a:	4b13      	ldr	r3, [pc, #76]	; (8007bd8 <__sinit+0x68>)
 8007b8c:	4a13      	ldr	r2, [pc, #76]	; (8007bdc <__sinit+0x6c>)
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	62a2      	str	r2, [r4, #40]	; 0x28
 8007b92:	42a3      	cmp	r3, r4
 8007b94:	bf08      	it	eq
 8007b96:	2301      	moveq	r3, #1
 8007b98:	4620      	mov	r0, r4
 8007b9a:	bf08      	it	eq
 8007b9c:	61a3      	streq	r3, [r4, #24]
 8007b9e:	f000 f81f 	bl	8007be0 <__sfp>
 8007ba2:	6060      	str	r0, [r4, #4]
 8007ba4:	4620      	mov	r0, r4
 8007ba6:	f000 f81b 	bl	8007be0 <__sfp>
 8007baa:	60a0      	str	r0, [r4, #8]
 8007bac:	4620      	mov	r0, r4
 8007bae:	f000 f817 	bl	8007be0 <__sfp>
 8007bb2:	2200      	movs	r2, #0
 8007bb4:	2104      	movs	r1, #4
 8007bb6:	60e0      	str	r0, [r4, #12]
 8007bb8:	6860      	ldr	r0, [r4, #4]
 8007bba:	f7ff ff81 	bl	8007ac0 <std>
 8007bbe:	2201      	movs	r2, #1
 8007bc0:	2109      	movs	r1, #9
 8007bc2:	68a0      	ldr	r0, [r4, #8]
 8007bc4:	f7ff ff7c 	bl	8007ac0 <std>
 8007bc8:	2202      	movs	r2, #2
 8007bca:	2112      	movs	r1, #18
 8007bcc:	68e0      	ldr	r0, [r4, #12]
 8007bce:	f7ff ff77 	bl	8007ac0 <std>
 8007bd2:	2301      	movs	r3, #1
 8007bd4:	61a3      	str	r3, [r4, #24]
 8007bd6:	e7d1      	b.n	8007b7c <__sinit+0xc>
 8007bd8:	08009b14 	.word	0x08009b14
 8007bdc:	08007b09 	.word	0x08007b09

08007be0 <__sfp>:
 8007be0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007be2:	4607      	mov	r7, r0
 8007be4:	f7ff ffac 	bl	8007b40 <__sfp_lock_acquire>
 8007be8:	4b1e      	ldr	r3, [pc, #120]	; (8007c64 <__sfp+0x84>)
 8007bea:	681e      	ldr	r6, [r3, #0]
 8007bec:	69b3      	ldr	r3, [r6, #24]
 8007bee:	b913      	cbnz	r3, 8007bf6 <__sfp+0x16>
 8007bf0:	4630      	mov	r0, r6
 8007bf2:	f7ff ffbd 	bl	8007b70 <__sinit>
 8007bf6:	3648      	adds	r6, #72	; 0x48
 8007bf8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007bfc:	3b01      	subs	r3, #1
 8007bfe:	d503      	bpl.n	8007c08 <__sfp+0x28>
 8007c00:	6833      	ldr	r3, [r6, #0]
 8007c02:	b30b      	cbz	r3, 8007c48 <__sfp+0x68>
 8007c04:	6836      	ldr	r6, [r6, #0]
 8007c06:	e7f7      	b.n	8007bf8 <__sfp+0x18>
 8007c08:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007c0c:	b9d5      	cbnz	r5, 8007c44 <__sfp+0x64>
 8007c0e:	4b16      	ldr	r3, [pc, #88]	; (8007c68 <__sfp+0x88>)
 8007c10:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007c14:	60e3      	str	r3, [r4, #12]
 8007c16:	6665      	str	r5, [r4, #100]	; 0x64
 8007c18:	f000 f84c 	bl	8007cb4 <__retarget_lock_init_recursive>
 8007c1c:	f7ff ff96 	bl	8007b4c <__sfp_lock_release>
 8007c20:	2208      	movs	r2, #8
 8007c22:	4629      	mov	r1, r5
 8007c24:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007c28:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007c2c:	6025      	str	r5, [r4, #0]
 8007c2e:	61a5      	str	r5, [r4, #24]
 8007c30:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007c34:	f7fe fa56 	bl	80060e4 <memset>
 8007c38:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007c3c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007c40:	4620      	mov	r0, r4
 8007c42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007c44:	3468      	adds	r4, #104	; 0x68
 8007c46:	e7d9      	b.n	8007bfc <__sfp+0x1c>
 8007c48:	2104      	movs	r1, #4
 8007c4a:	4638      	mov	r0, r7
 8007c4c:	f7ff ff62 	bl	8007b14 <__sfmoreglue>
 8007c50:	4604      	mov	r4, r0
 8007c52:	6030      	str	r0, [r6, #0]
 8007c54:	2800      	cmp	r0, #0
 8007c56:	d1d5      	bne.n	8007c04 <__sfp+0x24>
 8007c58:	f7ff ff78 	bl	8007b4c <__sfp_lock_release>
 8007c5c:	230c      	movs	r3, #12
 8007c5e:	603b      	str	r3, [r7, #0]
 8007c60:	e7ee      	b.n	8007c40 <__sfp+0x60>
 8007c62:	bf00      	nop
 8007c64:	08009b14 	.word	0x08009b14
 8007c68:	ffff0001 	.word	0xffff0001

08007c6c <_fwalk_reent>:
 8007c6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007c70:	4606      	mov	r6, r0
 8007c72:	4688      	mov	r8, r1
 8007c74:	2700      	movs	r7, #0
 8007c76:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007c7a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007c7e:	f1b9 0901 	subs.w	r9, r9, #1
 8007c82:	d505      	bpl.n	8007c90 <_fwalk_reent+0x24>
 8007c84:	6824      	ldr	r4, [r4, #0]
 8007c86:	2c00      	cmp	r4, #0
 8007c88:	d1f7      	bne.n	8007c7a <_fwalk_reent+0xe>
 8007c8a:	4638      	mov	r0, r7
 8007c8c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007c90:	89ab      	ldrh	r3, [r5, #12]
 8007c92:	2b01      	cmp	r3, #1
 8007c94:	d907      	bls.n	8007ca6 <_fwalk_reent+0x3a>
 8007c96:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007c9a:	3301      	adds	r3, #1
 8007c9c:	d003      	beq.n	8007ca6 <_fwalk_reent+0x3a>
 8007c9e:	4629      	mov	r1, r5
 8007ca0:	4630      	mov	r0, r6
 8007ca2:	47c0      	blx	r8
 8007ca4:	4307      	orrs	r7, r0
 8007ca6:	3568      	adds	r5, #104	; 0x68
 8007ca8:	e7e9      	b.n	8007c7e <_fwalk_reent+0x12>
	...

08007cac <_localeconv_r>:
 8007cac:	4800      	ldr	r0, [pc, #0]	; (8007cb0 <_localeconv_r+0x4>)
 8007cae:	4770      	bx	lr
 8007cb0:	20000160 	.word	0x20000160

08007cb4 <__retarget_lock_init_recursive>:
 8007cb4:	4770      	bx	lr

08007cb6 <__retarget_lock_acquire_recursive>:
 8007cb6:	4770      	bx	lr

08007cb8 <__retarget_lock_release_recursive>:
 8007cb8:	4770      	bx	lr

08007cba <__swhatbuf_r>:
 8007cba:	b570      	push	{r4, r5, r6, lr}
 8007cbc:	460e      	mov	r6, r1
 8007cbe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007cc2:	4614      	mov	r4, r2
 8007cc4:	2900      	cmp	r1, #0
 8007cc6:	461d      	mov	r5, r3
 8007cc8:	b096      	sub	sp, #88	; 0x58
 8007cca:	da08      	bge.n	8007cde <__swhatbuf_r+0x24>
 8007ccc:	2200      	movs	r2, #0
 8007cce:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8007cd2:	602a      	str	r2, [r5, #0]
 8007cd4:	061a      	lsls	r2, r3, #24
 8007cd6:	d410      	bmi.n	8007cfa <__swhatbuf_r+0x40>
 8007cd8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007cdc:	e00e      	b.n	8007cfc <__swhatbuf_r+0x42>
 8007cde:	466a      	mov	r2, sp
 8007ce0:	f000 fee4 	bl	8008aac <_fstat_r>
 8007ce4:	2800      	cmp	r0, #0
 8007ce6:	dbf1      	blt.n	8007ccc <__swhatbuf_r+0x12>
 8007ce8:	9a01      	ldr	r2, [sp, #4]
 8007cea:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007cee:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007cf2:	425a      	negs	r2, r3
 8007cf4:	415a      	adcs	r2, r3
 8007cf6:	602a      	str	r2, [r5, #0]
 8007cf8:	e7ee      	b.n	8007cd8 <__swhatbuf_r+0x1e>
 8007cfa:	2340      	movs	r3, #64	; 0x40
 8007cfc:	2000      	movs	r0, #0
 8007cfe:	6023      	str	r3, [r4, #0]
 8007d00:	b016      	add	sp, #88	; 0x58
 8007d02:	bd70      	pop	{r4, r5, r6, pc}

08007d04 <__smakebuf_r>:
 8007d04:	898b      	ldrh	r3, [r1, #12]
 8007d06:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007d08:	079d      	lsls	r5, r3, #30
 8007d0a:	4606      	mov	r6, r0
 8007d0c:	460c      	mov	r4, r1
 8007d0e:	d507      	bpl.n	8007d20 <__smakebuf_r+0x1c>
 8007d10:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007d14:	6023      	str	r3, [r4, #0]
 8007d16:	6123      	str	r3, [r4, #16]
 8007d18:	2301      	movs	r3, #1
 8007d1a:	6163      	str	r3, [r4, #20]
 8007d1c:	b002      	add	sp, #8
 8007d1e:	bd70      	pop	{r4, r5, r6, pc}
 8007d20:	466a      	mov	r2, sp
 8007d22:	ab01      	add	r3, sp, #4
 8007d24:	f7ff ffc9 	bl	8007cba <__swhatbuf_r>
 8007d28:	9900      	ldr	r1, [sp, #0]
 8007d2a:	4605      	mov	r5, r0
 8007d2c:	4630      	mov	r0, r6
 8007d2e:	f000 fc4b 	bl	80085c8 <_malloc_r>
 8007d32:	b948      	cbnz	r0, 8007d48 <__smakebuf_r+0x44>
 8007d34:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007d38:	059a      	lsls	r2, r3, #22
 8007d3a:	d4ef      	bmi.n	8007d1c <__smakebuf_r+0x18>
 8007d3c:	f023 0303 	bic.w	r3, r3, #3
 8007d40:	f043 0302 	orr.w	r3, r3, #2
 8007d44:	81a3      	strh	r3, [r4, #12]
 8007d46:	e7e3      	b.n	8007d10 <__smakebuf_r+0xc>
 8007d48:	4b0d      	ldr	r3, [pc, #52]	; (8007d80 <__smakebuf_r+0x7c>)
 8007d4a:	62b3      	str	r3, [r6, #40]	; 0x28
 8007d4c:	89a3      	ldrh	r3, [r4, #12]
 8007d4e:	6020      	str	r0, [r4, #0]
 8007d50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007d54:	81a3      	strh	r3, [r4, #12]
 8007d56:	9b00      	ldr	r3, [sp, #0]
 8007d58:	6120      	str	r0, [r4, #16]
 8007d5a:	6163      	str	r3, [r4, #20]
 8007d5c:	9b01      	ldr	r3, [sp, #4]
 8007d5e:	b15b      	cbz	r3, 8007d78 <__smakebuf_r+0x74>
 8007d60:	4630      	mov	r0, r6
 8007d62:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007d66:	f000 feb3 	bl	8008ad0 <_isatty_r>
 8007d6a:	b128      	cbz	r0, 8007d78 <__smakebuf_r+0x74>
 8007d6c:	89a3      	ldrh	r3, [r4, #12]
 8007d6e:	f023 0303 	bic.w	r3, r3, #3
 8007d72:	f043 0301 	orr.w	r3, r3, #1
 8007d76:	81a3      	strh	r3, [r4, #12]
 8007d78:	89a0      	ldrh	r0, [r4, #12]
 8007d7a:	4305      	orrs	r5, r0
 8007d7c:	81a5      	strh	r5, [r4, #12]
 8007d7e:	e7cd      	b.n	8007d1c <__smakebuf_r+0x18>
 8007d80:	08007b09 	.word	0x08007b09

08007d84 <malloc>:
 8007d84:	4b02      	ldr	r3, [pc, #8]	; (8007d90 <malloc+0xc>)
 8007d86:	4601      	mov	r1, r0
 8007d88:	6818      	ldr	r0, [r3, #0]
 8007d8a:	f000 bc1d 	b.w	80085c8 <_malloc_r>
 8007d8e:	bf00      	nop
 8007d90:	2000000c 	.word	0x2000000c

08007d94 <memchr>:
 8007d94:	4603      	mov	r3, r0
 8007d96:	b510      	push	{r4, lr}
 8007d98:	b2c9      	uxtb	r1, r1
 8007d9a:	4402      	add	r2, r0
 8007d9c:	4293      	cmp	r3, r2
 8007d9e:	4618      	mov	r0, r3
 8007da0:	d101      	bne.n	8007da6 <memchr+0x12>
 8007da2:	2000      	movs	r0, #0
 8007da4:	e003      	b.n	8007dae <memchr+0x1a>
 8007da6:	7804      	ldrb	r4, [r0, #0]
 8007da8:	3301      	adds	r3, #1
 8007daa:	428c      	cmp	r4, r1
 8007dac:	d1f6      	bne.n	8007d9c <memchr+0x8>
 8007dae:	bd10      	pop	{r4, pc}

08007db0 <memcpy>:
 8007db0:	440a      	add	r2, r1
 8007db2:	4291      	cmp	r1, r2
 8007db4:	f100 33ff 	add.w	r3, r0, #4294967295
 8007db8:	d100      	bne.n	8007dbc <memcpy+0xc>
 8007dba:	4770      	bx	lr
 8007dbc:	b510      	push	{r4, lr}
 8007dbe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007dc2:	4291      	cmp	r1, r2
 8007dc4:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007dc8:	d1f9      	bne.n	8007dbe <memcpy+0xe>
 8007dca:	bd10      	pop	{r4, pc}

08007dcc <_Balloc>:
 8007dcc:	b570      	push	{r4, r5, r6, lr}
 8007dce:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007dd0:	4604      	mov	r4, r0
 8007dd2:	460d      	mov	r5, r1
 8007dd4:	b976      	cbnz	r6, 8007df4 <_Balloc+0x28>
 8007dd6:	2010      	movs	r0, #16
 8007dd8:	f7ff ffd4 	bl	8007d84 <malloc>
 8007ddc:	4602      	mov	r2, r0
 8007dde:	6260      	str	r0, [r4, #36]	; 0x24
 8007de0:	b920      	cbnz	r0, 8007dec <_Balloc+0x20>
 8007de2:	2166      	movs	r1, #102	; 0x66
 8007de4:	4b17      	ldr	r3, [pc, #92]	; (8007e44 <_Balloc+0x78>)
 8007de6:	4818      	ldr	r0, [pc, #96]	; (8007e48 <_Balloc+0x7c>)
 8007de8:	f000 fe20 	bl	8008a2c <__assert_func>
 8007dec:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007df0:	6006      	str	r6, [r0, #0]
 8007df2:	60c6      	str	r6, [r0, #12]
 8007df4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8007df6:	68f3      	ldr	r3, [r6, #12]
 8007df8:	b183      	cbz	r3, 8007e1c <_Balloc+0x50>
 8007dfa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007dfc:	68db      	ldr	r3, [r3, #12]
 8007dfe:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007e02:	b9b8      	cbnz	r0, 8007e34 <_Balloc+0x68>
 8007e04:	2101      	movs	r1, #1
 8007e06:	fa01 f605 	lsl.w	r6, r1, r5
 8007e0a:	1d72      	adds	r2, r6, #5
 8007e0c:	4620      	mov	r0, r4
 8007e0e:	0092      	lsls	r2, r2, #2
 8007e10:	f000 fb5e 	bl	80084d0 <_calloc_r>
 8007e14:	b160      	cbz	r0, 8007e30 <_Balloc+0x64>
 8007e16:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007e1a:	e00e      	b.n	8007e3a <_Balloc+0x6e>
 8007e1c:	2221      	movs	r2, #33	; 0x21
 8007e1e:	2104      	movs	r1, #4
 8007e20:	4620      	mov	r0, r4
 8007e22:	f000 fb55 	bl	80084d0 <_calloc_r>
 8007e26:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007e28:	60f0      	str	r0, [r6, #12]
 8007e2a:	68db      	ldr	r3, [r3, #12]
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	d1e4      	bne.n	8007dfa <_Balloc+0x2e>
 8007e30:	2000      	movs	r0, #0
 8007e32:	bd70      	pop	{r4, r5, r6, pc}
 8007e34:	6802      	ldr	r2, [r0, #0]
 8007e36:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007e3a:	2300      	movs	r3, #0
 8007e3c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007e40:	e7f7      	b.n	8007e32 <_Balloc+0x66>
 8007e42:	bf00      	nop
 8007e44:	08009b59 	.word	0x08009b59
 8007e48:	08009c3c 	.word	0x08009c3c

08007e4c <_Bfree>:
 8007e4c:	b570      	push	{r4, r5, r6, lr}
 8007e4e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007e50:	4605      	mov	r5, r0
 8007e52:	460c      	mov	r4, r1
 8007e54:	b976      	cbnz	r6, 8007e74 <_Bfree+0x28>
 8007e56:	2010      	movs	r0, #16
 8007e58:	f7ff ff94 	bl	8007d84 <malloc>
 8007e5c:	4602      	mov	r2, r0
 8007e5e:	6268      	str	r0, [r5, #36]	; 0x24
 8007e60:	b920      	cbnz	r0, 8007e6c <_Bfree+0x20>
 8007e62:	218a      	movs	r1, #138	; 0x8a
 8007e64:	4b08      	ldr	r3, [pc, #32]	; (8007e88 <_Bfree+0x3c>)
 8007e66:	4809      	ldr	r0, [pc, #36]	; (8007e8c <_Bfree+0x40>)
 8007e68:	f000 fde0 	bl	8008a2c <__assert_func>
 8007e6c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007e70:	6006      	str	r6, [r0, #0]
 8007e72:	60c6      	str	r6, [r0, #12]
 8007e74:	b13c      	cbz	r4, 8007e86 <_Bfree+0x3a>
 8007e76:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007e78:	6862      	ldr	r2, [r4, #4]
 8007e7a:	68db      	ldr	r3, [r3, #12]
 8007e7c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007e80:	6021      	str	r1, [r4, #0]
 8007e82:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007e86:	bd70      	pop	{r4, r5, r6, pc}
 8007e88:	08009b59 	.word	0x08009b59
 8007e8c:	08009c3c 	.word	0x08009c3c

08007e90 <__multadd>:
 8007e90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007e94:	4607      	mov	r7, r0
 8007e96:	460c      	mov	r4, r1
 8007e98:	461e      	mov	r6, r3
 8007e9a:	2000      	movs	r0, #0
 8007e9c:	690d      	ldr	r5, [r1, #16]
 8007e9e:	f101 0c14 	add.w	ip, r1, #20
 8007ea2:	f8dc 3000 	ldr.w	r3, [ip]
 8007ea6:	3001      	adds	r0, #1
 8007ea8:	b299      	uxth	r1, r3
 8007eaa:	fb02 6101 	mla	r1, r2, r1, r6
 8007eae:	0c1e      	lsrs	r6, r3, #16
 8007eb0:	0c0b      	lsrs	r3, r1, #16
 8007eb2:	fb02 3306 	mla	r3, r2, r6, r3
 8007eb6:	b289      	uxth	r1, r1
 8007eb8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007ebc:	4285      	cmp	r5, r0
 8007ebe:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007ec2:	f84c 1b04 	str.w	r1, [ip], #4
 8007ec6:	dcec      	bgt.n	8007ea2 <__multadd+0x12>
 8007ec8:	b30e      	cbz	r6, 8007f0e <__multadd+0x7e>
 8007eca:	68a3      	ldr	r3, [r4, #8]
 8007ecc:	42ab      	cmp	r3, r5
 8007ece:	dc19      	bgt.n	8007f04 <__multadd+0x74>
 8007ed0:	6861      	ldr	r1, [r4, #4]
 8007ed2:	4638      	mov	r0, r7
 8007ed4:	3101      	adds	r1, #1
 8007ed6:	f7ff ff79 	bl	8007dcc <_Balloc>
 8007eda:	4680      	mov	r8, r0
 8007edc:	b928      	cbnz	r0, 8007eea <__multadd+0x5a>
 8007ede:	4602      	mov	r2, r0
 8007ee0:	21b5      	movs	r1, #181	; 0xb5
 8007ee2:	4b0c      	ldr	r3, [pc, #48]	; (8007f14 <__multadd+0x84>)
 8007ee4:	480c      	ldr	r0, [pc, #48]	; (8007f18 <__multadd+0x88>)
 8007ee6:	f000 fda1 	bl	8008a2c <__assert_func>
 8007eea:	6922      	ldr	r2, [r4, #16]
 8007eec:	f104 010c 	add.w	r1, r4, #12
 8007ef0:	3202      	adds	r2, #2
 8007ef2:	0092      	lsls	r2, r2, #2
 8007ef4:	300c      	adds	r0, #12
 8007ef6:	f7ff ff5b 	bl	8007db0 <memcpy>
 8007efa:	4621      	mov	r1, r4
 8007efc:	4638      	mov	r0, r7
 8007efe:	f7ff ffa5 	bl	8007e4c <_Bfree>
 8007f02:	4644      	mov	r4, r8
 8007f04:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007f08:	3501      	adds	r5, #1
 8007f0a:	615e      	str	r6, [r3, #20]
 8007f0c:	6125      	str	r5, [r4, #16]
 8007f0e:	4620      	mov	r0, r4
 8007f10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007f14:	08009bcb 	.word	0x08009bcb
 8007f18:	08009c3c 	.word	0x08009c3c

08007f1c <__hi0bits>:
 8007f1c:	0c02      	lsrs	r2, r0, #16
 8007f1e:	0412      	lsls	r2, r2, #16
 8007f20:	4603      	mov	r3, r0
 8007f22:	b9ca      	cbnz	r2, 8007f58 <__hi0bits+0x3c>
 8007f24:	0403      	lsls	r3, r0, #16
 8007f26:	2010      	movs	r0, #16
 8007f28:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8007f2c:	bf04      	itt	eq
 8007f2e:	021b      	lsleq	r3, r3, #8
 8007f30:	3008      	addeq	r0, #8
 8007f32:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8007f36:	bf04      	itt	eq
 8007f38:	011b      	lsleq	r3, r3, #4
 8007f3a:	3004      	addeq	r0, #4
 8007f3c:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8007f40:	bf04      	itt	eq
 8007f42:	009b      	lsleq	r3, r3, #2
 8007f44:	3002      	addeq	r0, #2
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	db05      	blt.n	8007f56 <__hi0bits+0x3a>
 8007f4a:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8007f4e:	f100 0001 	add.w	r0, r0, #1
 8007f52:	bf08      	it	eq
 8007f54:	2020      	moveq	r0, #32
 8007f56:	4770      	bx	lr
 8007f58:	2000      	movs	r0, #0
 8007f5a:	e7e5      	b.n	8007f28 <__hi0bits+0xc>

08007f5c <__lo0bits>:
 8007f5c:	6803      	ldr	r3, [r0, #0]
 8007f5e:	4602      	mov	r2, r0
 8007f60:	f013 0007 	ands.w	r0, r3, #7
 8007f64:	d00b      	beq.n	8007f7e <__lo0bits+0x22>
 8007f66:	07d9      	lsls	r1, r3, #31
 8007f68:	d421      	bmi.n	8007fae <__lo0bits+0x52>
 8007f6a:	0798      	lsls	r0, r3, #30
 8007f6c:	bf49      	itett	mi
 8007f6e:	085b      	lsrmi	r3, r3, #1
 8007f70:	089b      	lsrpl	r3, r3, #2
 8007f72:	2001      	movmi	r0, #1
 8007f74:	6013      	strmi	r3, [r2, #0]
 8007f76:	bf5c      	itt	pl
 8007f78:	2002      	movpl	r0, #2
 8007f7a:	6013      	strpl	r3, [r2, #0]
 8007f7c:	4770      	bx	lr
 8007f7e:	b299      	uxth	r1, r3
 8007f80:	b909      	cbnz	r1, 8007f86 <__lo0bits+0x2a>
 8007f82:	2010      	movs	r0, #16
 8007f84:	0c1b      	lsrs	r3, r3, #16
 8007f86:	b2d9      	uxtb	r1, r3
 8007f88:	b909      	cbnz	r1, 8007f8e <__lo0bits+0x32>
 8007f8a:	3008      	adds	r0, #8
 8007f8c:	0a1b      	lsrs	r3, r3, #8
 8007f8e:	0719      	lsls	r1, r3, #28
 8007f90:	bf04      	itt	eq
 8007f92:	091b      	lsreq	r3, r3, #4
 8007f94:	3004      	addeq	r0, #4
 8007f96:	0799      	lsls	r1, r3, #30
 8007f98:	bf04      	itt	eq
 8007f9a:	089b      	lsreq	r3, r3, #2
 8007f9c:	3002      	addeq	r0, #2
 8007f9e:	07d9      	lsls	r1, r3, #31
 8007fa0:	d403      	bmi.n	8007faa <__lo0bits+0x4e>
 8007fa2:	085b      	lsrs	r3, r3, #1
 8007fa4:	f100 0001 	add.w	r0, r0, #1
 8007fa8:	d003      	beq.n	8007fb2 <__lo0bits+0x56>
 8007faa:	6013      	str	r3, [r2, #0]
 8007fac:	4770      	bx	lr
 8007fae:	2000      	movs	r0, #0
 8007fb0:	4770      	bx	lr
 8007fb2:	2020      	movs	r0, #32
 8007fb4:	4770      	bx	lr
	...

08007fb8 <__i2b>:
 8007fb8:	b510      	push	{r4, lr}
 8007fba:	460c      	mov	r4, r1
 8007fbc:	2101      	movs	r1, #1
 8007fbe:	f7ff ff05 	bl	8007dcc <_Balloc>
 8007fc2:	4602      	mov	r2, r0
 8007fc4:	b928      	cbnz	r0, 8007fd2 <__i2b+0x1a>
 8007fc6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8007fca:	4b04      	ldr	r3, [pc, #16]	; (8007fdc <__i2b+0x24>)
 8007fcc:	4804      	ldr	r0, [pc, #16]	; (8007fe0 <__i2b+0x28>)
 8007fce:	f000 fd2d 	bl	8008a2c <__assert_func>
 8007fd2:	2301      	movs	r3, #1
 8007fd4:	6144      	str	r4, [r0, #20]
 8007fd6:	6103      	str	r3, [r0, #16]
 8007fd8:	bd10      	pop	{r4, pc}
 8007fda:	bf00      	nop
 8007fdc:	08009bcb 	.word	0x08009bcb
 8007fe0:	08009c3c 	.word	0x08009c3c

08007fe4 <__multiply>:
 8007fe4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007fe8:	4691      	mov	r9, r2
 8007fea:	690a      	ldr	r2, [r1, #16]
 8007fec:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007ff0:	460c      	mov	r4, r1
 8007ff2:	429a      	cmp	r2, r3
 8007ff4:	bfbe      	ittt	lt
 8007ff6:	460b      	movlt	r3, r1
 8007ff8:	464c      	movlt	r4, r9
 8007ffa:	4699      	movlt	r9, r3
 8007ffc:	6927      	ldr	r7, [r4, #16]
 8007ffe:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8008002:	68a3      	ldr	r3, [r4, #8]
 8008004:	6861      	ldr	r1, [r4, #4]
 8008006:	eb07 060a 	add.w	r6, r7, sl
 800800a:	42b3      	cmp	r3, r6
 800800c:	b085      	sub	sp, #20
 800800e:	bfb8      	it	lt
 8008010:	3101      	addlt	r1, #1
 8008012:	f7ff fedb 	bl	8007dcc <_Balloc>
 8008016:	b930      	cbnz	r0, 8008026 <__multiply+0x42>
 8008018:	4602      	mov	r2, r0
 800801a:	f240 115d 	movw	r1, #349	; 0x15d
 800801e:	4b43      	ldr	r3, [pc, #268]	; (800812c <__multiply+0x148>)
 8008020:	4843      	ldr	r0, [pc, #268]	; (8008130 <__multiply+0x14c>)
 8008022:	f000 fd03 	bl	8008a2c <__assert_func>
 8008026:	f100 0514 	add.w	r5, r0, #20
 800802a:	462b      	mov	r3, r5
 800802c:	2200      	movs	r2, #0
 800802e:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008032:	4543      	cmp	r3, r8
 8008034:	d321      	bcc.n	800807a <__multiply+0x96>
 8008036:	f104 0314 	add.w	r3, r4, #20
 800803a:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800803e:	f109 0314 	add.w	r3, r9, #20
 8008042:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8008046:	9202      	str	r2, [sp, #8]
 8008048:	1b3a      	subs	r2, r7, r4
 800804a:	3a15      	subs	r2, #21
 800804c:	f022 0203 	bic.w	r2, r2, #3
 8008050:	3204      	adds	r2, #4
 8008052:	f104 0115 	add.w	r1, r4, #21
 8008056:	428f      	cmp	r7, r1
 8008058:	bf38      	it	cc
 800805a:	2204      	movcc	r2, #4
 800805c:	9201      	str	r2, [sp, #4]
 800805e:	9a02      	ldr	r2, [sp, #8]
 8008060:	9303      	str	r3, [sp, #12]
 8008062:	429a      	cmp	r2, r3
 8008064:	d80c      	bhi.n	8008080 <__multiply+0x9c>
 8008066:	2e00      	cmp	r6, #0
 8008068:	dd03      	ble.n	8008072 <__multiply+0x8e>
 800806a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800806e:	2b00      	cmp	r3, #0
 8008070:	d059      	beq.n	8008126 <__multiply+0x142>
 8008072:	6106      	str	r6, [r0, #16]
 8008074:	b005      	add	sp, #20
 8008076:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800807a:	f843 2b04 	str.w	r2, [r3], #4
 800807e:	e7d8      	b.n	8008032 <__multiply+0x4e>
 8008080:	f8b3 a000 	ldrh.w	sl, [r3]
 8008084:	f1ba 0f00 	cmp.w	sl, #0
 8008088:	d023      	beq.n	80080d2 <__multiply+0xee>
 800808a:	46a9      	mov	r9, r5
 800808c:	f04f 0c00 	mov.w	ip, #0
 8008090:	f104 0e14 	add.w	lr, r4, #20
 8008094:	f85e 2b04 	ldr.w	r2, [lr], #4
 8008098:	f8d9 1000 	ldr.w	r1, [r9]
 800809c:	fa1f fb82 	uxth.w	fp, r2
 80080a0:	b289      	uxth	r1, r1
 80080a2:	fb0a 110b 	mla	r1, sl, fp, r1
 80080a6:	4461      	add	r1, ip
 80080a8:	f8d9 c000 	ldr.w	ip, [r9]
 80080ac:	0c12      	lsrs	r2, r2, #16
 80080ae:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 80080b2:	fb0a c202 	mla	r2, sl, r2, ip
 80080b6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80080ba:	b289      	uxth	r1, r1
 80080bc:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80080c0:	4577      	cmp	r7, lr
 80080c2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80080c6:	f849 1b04 	str.w	r1, [r9], #4
 80080ca:	d8e3      	bhi.n	8008094 <__multiply+0xb0>
 80080cc:	9a01      	ldr	r2, [sp, #4]
 80080ce:	f845 c002 	str.w	ip, [r5, r2]
 80080d2:	9a03      	ldr	r2, [sp, #12]
 80080d4:	3304      	adds	r3, #4
 80080d6:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80080da:	f1b9 0f00 	cmp.w	r9, #0
 80080de:	d020      	beq.n	8008122 <__multiply+0x13e>
 80080e0:	46ae      	mov	lr, r5
 80080e2:	f04f 0a00 	mov.w	sl, #0
 80080e6:	6829      	ldr	r1, [r5, #0]
 80080e8:	f104 0c14 	add.w	ip, r4, #20
 80080ec:	f8bc b000 	ldrh.w	fp, [ip]
 80080f0:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80080f4:	b289      	uxth	r1, r1
 80080f6:	fb09 220b 	mla	r2, r9, fp, r2
 80080fa:	4492      	add	sl, r2
 80080fc:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8008100:	f84e 1b04 	str.w	r1, [lr], #4
 8008104:	f85c 2b04 	ldr.w	r2, [ip], #4
 8008108:	f8be 1000 	ldrh.w	r1, [lr]
 800810c:	0c12      	lsrs	r2, r2, #16
 800810e:	fb09 1102 	mla	r1, r9, r2, r1
 8008112:	4567      	cmp	r7, ip
 8008114:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8008118:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800811c:	d8e6      	bhi.n	80080ec <__multiply+0x108>
 800811e:	9a01      	ldr	r2, [sp, #4]
 8008120:	50a9      	str	r1, [r5, r2]
 8008122:	3504      	adds	r5, #4
 8008124:	e79b      	b.n	800805e <__multiply+0x7a>
 8008126:	3e01      	subs	r6, #1
 8008128:	e79d      	b.n	8008066 <__multiply+0x82>
 800812a:	bf00      	nop
 800812c:	08009bcb 	.word	0x08009bcb
 8008130:	08009c3c 	.word	0x08009c3c

08008134 <__pow5mult>:
 8008134:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008138:	4615      	mov	r5, r2
 800813a:	f012 0203 	ands.w	r2, r2, #3
 800813e:	4606      	mov	r6, r0
 8008140:	460f      	mov	r7, r1
 8008142:	d007      	beq.n	8008154 <__pow5mult+0x20>
 8008144:	4c25      	ldr	r4, [pc, #148]	; (80081dc <__pow5mult+0xa8>)
 8008146:	3a01      	subs	r2, #1
 8008148:	2300      	movs	r3, #0
 800814a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800814e:	f7ff fe9f 	bl	8007e90 <__multadd>
 8008152:	4607      	mov	r7, r0
 8008154:	10ad      	asrs	r5, r5, #2
 8008156:	d03d      	beq.n	80081d4 <__pow5mult+0xa0>
 8008158:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800815a:	b97c      	cbnz	r4, 800817c <__pow5mult+0x48>
 800815c:	2010      	movs	r0, #16
 800815e:	f7ff fe11 	bl	8007d84 <malloc>
 8008162:	4602      	mov	r2, r0
 8008164:	6270      	str	r0, [r6, #36]	; 0x24
 8008166:	b928      	cbnz	r0, 8008174 <__pow5mult+0x40>
 8008168:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800816c:	4b1c      	ldr	r3, [pc, #112]	; (80081e0 <__pow5mult+0xac>)
 800816e:	481d      	ldr	r0, [pc, #116]	; (80081e4 <__pow5mult+0xb0>)
 8008170:	f000 fc5c 	bl	8008a2c <__assert_func>
 8008174:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008178:	6004      	str	r4, [r0, #0]
 800817a:	60c4      	str	r4, [r0, #12]
 800817c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8008180:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008184:	b94c      	cbnz	r4, 800819a <__pow5mult+0x66>
 8008186:	f240 2171 	movw	r1, #625	; 0x271
 800818a:	4630      	mov	r0, r6
 800818c:	f7ff ff14 	bl	8007fb8 <__i2b>
 8008190:	2300      	movs	r3, #0
 8008192:	4604      	mov	r4, r0
 8008194:	f8c8 0008 	str.w	r0, [r8, #8]
 8008198:	6003      	str	r3, [r0, #0]
 800819a:	f04f 0900 	mov.w	r9, #0
 800819e:	07eb      	lsls	r3, r5, #31
 80081a0:	d50a      	bpl.n	80081b8 <__pow5mult+0x84>
 80081a2:	4639      	mov	r1, r7
 80081a4:	4622      	mov	r2, r4
 80081a6:	4630      	mov	r0, r6
 80081a8:	f7ff ff1c 	bl	8007fe4 <__multiply>
 80081ac:	4680      	mov	r8, r0
 80081ae:	4639      	mov	r1, r7
 80081b0:	4630      	mov	r0, r6
 80081b2:	f7ff fe4b 	bl	8007e4c <_Bfree>
 80081b6:	4647      	mov	r7, r8
 80081b8:	106d      	asrs	r5, r5, #1
 80081ba:	d00b      	beq.n	80081d4 <__pow5mult+0xa0>
 80081bc:	6820      	ldr	r0, [r4, #0]
 80081be:	b938      	cbnz	r0, 80081d0 <__pow5mult+0x9c>
 80081c0:	4622      	mov	r2, r4
 80081c2:	4621      	mov	r1, r4
 80081c4:	4630      	mov	r0, r6
 80081c6:	f7ff ff0d 	bl	8007fe4 <__multiply>
 80081ca:	6020      	str	r0, [r4, #0]
 80081cc:	f8c0 9000 	str.w	r9, [r0]
 80081d0:	4604      	mov	r4, r0
 80081d2:	e7e4      	b.n	800819e <__pow5mult+0x6a>
 80081d4:	4638      	mov	r0, r7
 80081d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80081da:	bf00      	nop
 80081dc:	08009d88 	.word	0x08009d88
 80081e0:	08009b59 	.word	0x08009b59
 80081e4:	08009c3c 	.word	0x08009c3c

080081e8 <__lshift>:
 80081e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80081ec:	460c      	mov	r4, r1
 80081ee:	4607      	mov	r7, r0
 80081f0:	4691      	mov	r9, r2
 80081f2:	6923      	ldr	r3, [r4, #16]
 80081f4:	6849      	ldr	r1, [r1, #4]
 80081f6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80081fa:	68a3      	ldr	r3, [r4, #8]
 80081fc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008200:	f108 0601 	add.w	r6, r8, #1
 8008204:	42b3      	cmp	r3, r6
 8008206:	db0b      	blt.n	8008220 <__lshift+0x38>
 8008208:	4638      	mov	r0, r7
 800820a:	f7ff fddf 	bl	8007dcc <_Balloc>
 800820e:	4605      	mov	r5, r0
 8008210:	b948      	cbnz	r0, 8008226 <__lshift+0x3e>
 8008212:	4602      	mov	r2, r0
 8008214:	f240 11d9 	movw	r1, #473	; 0x1d9
 8008218:	4b29      	ldr	r3, [pc, #164]	; (80082c0 <__lshift+0xd8>)
 800821a:	482a      	ldr	r0, [pc, #168]	; (80082c4 <__lshift+0xdc>)
 800821c:	f000 fc06 	bl	8008a2c <__assert_func>
 8008220:	3101      	adds	r1, #1
 8008222:	005b      	lsls	r3, r3, #1
 8008224:	e7ee      	b.n	8008204 <__lshift+0x1c>
 8008226:	2300      	movs	r3, #0
 8008228:	f100 0114 	add.w	r1, r0, #20
 800822c:	f100 0210 	add.w	r2, r0, #16
 8008230:	4618      	mov	r0, r3
 8008232:	4553      	cmp	r3, sl
 8008234:	db37      	blt.n	80082a6 <__lshift+0xbe>
 8008236:	6920      	ldr	r0, [r4, #16]
 8008238:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800823c:	f104 0314 	add.w	r3, r4, #20
 8008240:	f019 091f 	ands.w	r9, r9, #31
 8008244:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008248:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800824c:	d02f      	beq.n	80082ae <__lshift+0xc6>
 800824e:	468a      	mov	sl, r1
 8008250:	f04f 0c00 	mov.w	ip, #0
 8008254:	f1c9 0e20 	rsb	lr, r9, #32
 8008258:	681a      	ldr	r2, [r3, #0]
 800825a:	fa02 f209 	lsl.w	r2, r2, r9
 800825e:	ea42 020c 	orr.w	r2, r2, ip
 8008262:	f84a 2b04 	str.w	r2, [sl], #4
 8008266:	f853 2b04 	ldr.w	r2, [r3], #4
 800826a:	4298      	cmp	r0, r3
 800826c:	fa22 fc0e 	lsr.w	ip, r2, lr
 8008270:	d8f2      	bhi.n	8008258 <__lshift+0x70>
 8008272:	1b03      	subs	r3, r0, r4
 8008274:	3b15      	subs	r3, #21
 8008276:	f023 0303 	bic.w	r3, r3, #3
 800827a:	3304      	adds	r3, #4
 800827c:	f104 0215 	add.w	r2, r4, #21
 8008280:	4290      	cmp	r0, r2
 8008282:	bf38      	it	cc
 8008284:	2304      	movcc	r3, #4
 8008286:	f841 c003 	str.w	ip, [r1, r3]
 800828a:	f1bc 0f00 	cmp.w	ip, #0
 800828e:	d001      	beq.n	8008294 <__lshift+0xac>
 8008290:	f108 0602 	add.w	r6, r8, #2
 8008294:	3e01      	subs	r6, #1
 8008296:	4638      	mov	r0, r7
 8008298:	4621      	mov	r1, r4
 800829a:	612e      	str	r6, [r5, #16]
 800829c:	f7ff fdd6 	bl	8007e4c <_Bfree>
 80082a0:	4628      	mov	r0, r5
 80082a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80082a6:	f842 0f04 	str.w	r0, [r2, #4]!
 80082aa:	3301      	adds	r3, #1
 80082ac:	e7c1      	b.n	8008232 <__lshift+0x4a>
 80082ae:	3904      	subs	r1, #4
 80082b0:	f853 2b04 	ldr.w	r2, [r3], #4
 80082b4:	4298      	cmp	r0, r3
 80082b6:	f841 2f04 	str.w	r2, [r1, #4]!
 80082ba:	d8f9      	bhi.n	80082b0 <__lshift+0xc8>
 80082bc:	e7ea      	b.n	8008294 <__lshift+0xac>
 80082be:	bf00      	nop
 80082c0:	08009bcb 	.word	0x08009bcb
 80082c4:	08009c3c 	.word	0x08009c3c

080082c8 <__mcmp>:
 80082c8:	4603      	mov	r3, r0
 80082ca:	690a      	ldr	r2, [r1, #16]
 80082cc:	6900      	ldr	r0, [r0, #16]
 80082ce:	b530      	push	{r4, r5, lr}
 80082d0:	1a80      	subs	r0, r0, r2
 80082d2:	d10d      	bne.n	80082f0 <__mcmp+0x28>
 80082d4:	3314      	adds	r3, #20
 80082d6:	3114      	adds	r1, #20
 80082d8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80082dc:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80082e0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80082e4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80082e8:	4295      	cmp	r5, r2
 80082ea:	d002      	beq.n	80082f2 <__mcmp+0x2a>
 80082ec:	d304      	bcc.n	80082f8 <__mcmp+0x30>
 80082ee:	2001      	movs	r0, #1
 80082f0:	bd30      	pop	{r4, r5, pc}
 80082f2:	42a3      	cmp	r3, r4
 80082f4:	d3f4      	bcc.n	80082e0 <__mcmp+0x18>
 80082f6:	e7fb      	b.n	80082f0 <__mcmp+0x28>
 80082f8:	f04f 30ff 	mov.w	r0, #4294967295
 80082fc:	e7f8      	b.n	80082f0 <__mcmp+0x28>
	...

08008300 <__mdiff>:
 8008300:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008304:	460d      	mov	r5, r1
 8008306:	4607      	mov	r7, r0
 8008308:	4611      	mov	r1, r2
 800830a:	4628      	mov	r0, r5
 800830c:	4614      	mov	r4, r2
 800830e:	f7ff ffdb 	bl	80082c8 <__mcmp>
 8008312:	1e06      	subs	r6, r0, #0
 8008314:	d111      	bne.n	800833a <__mdiff+0x3a>
 8008316:	4631      	mov	r1, r6
 8008318:	4638      	mov	r0, r7
 800831a:	f7ff fd57 	bl	8007dcc <_Balloc>
 800831e:	4602      	mov	r2, r0
 8008320:	b928      	cbnz	r0, 800832e <__mdiff+0x2e>
 8008322:	f240 2132 	movw	r1, #562	; 0x232
 8008326:	4b3a      	ldr	r3, [pc, #232]	; (8008410 <__mdiff+0x110>)
 8008328:	483a      	ldr	r0, [pc, #232]	; (8008414 <__mdiff+0x114>)
 800832a:	f000 fb7f 	bl	8008a2c <__assert_func>
 800832e:	2301      	movs	r3, #1
 8008330:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8008334:	4610      	mov	r0, r2
 8008336:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800833a:	bfa4      	itt	ge
 800833c:	4623      	movge	r3, r4
 800833e:	462c      	movge	r4, r5
 8008340:	4638      	mov	r0, r7
 8008342:	6861      	ldr	r1, [r4, #4]
 8008344:	bfa6      	itte	ge
 8008346:	461d      	movge	r5, r3
 8008348:	2600      	movge	r6, #0
 800834a:	2601      	movlt	r6, #1
 800834c:	f7ff fd3e 	bl	8007dcc <_Balloc>
 8008350:	4602      	mov	r2, r0
 8008352:	b918      	cbnz	r0, 800835c <__mdiff+0x5c>
 8008354:	f44f 7110 	mov.w	r1, #576	; 0x240
 8008358:	4b2d      	ldr	r3, [pc, #180]	; (8008410 <__mdiff+0x110>)
 800835a:	e7e5      	b.n	8008328 <__mdiff+0x28>
 800835c:	f102 0814 	add.w	r8, r2, #20
 8008360:	46c2      	mov	sl, r8
 8008362:	f04f 0c00 	mov.w	ip, #0
 8008366:	6927      	ldr	r7, [r4, #16]
 8008368:	60c6      	str	r6, [r0, #12]
 800836a:	692e      	ldr	r6, [r5, #16]
 800836c:	f104 0014 	add.w	r0, r4, #20
 8008370:	f105 0914 	add.w	r9, r5, #20
 8008374:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 8008378:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800837c:	3410      	adds	r4, #16
 800837e:	f854 bf04 	ldr.w	fp, [r4, #4]!
 8008382:	f859 3b04 	ldr.w	r3, [r9], #4
 8008386:	fa1f f18b 	uxth.w	r1, fp
 800838a:	448c      	add	ip, r1
 800838c:	b299      	uxth	r1, r3
 800838e:	0c1b      	lsrs	r3, r3, #16
 8008390:	ebac 0101 	sub.w	r1, ip, r1
 8008394:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8008398:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800839c:	b289      	uxth	r1, r1
 800839e:	ea4f 4c23 	mov.w	ip, r3, asr #16
 80083a2:	454e      	cmp	r6, r9
 80083a4:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80083a8:	f84a 3b04 	str.w	r3, [sl], #4
 80083ac:	d8e7      	bhi.n	800837e <__mdiff+0x7e>
 80083ae:	1b73      	subs	r3, r6, r5
 80083b0:	3b15      	subs	r3, #21
 80083b2:	f023 0303 	bic.w	r3, r3, #3
 80083b6:	3515      	adds	r5, #21
 80083b8:	3304      	adds	r3, #4
 80083ba:	42ae      	cmp	r6, r5
 80083bc:	bf38      	it	cc
 80083be:	2304      	movcc	r3, #4
 80083c0:	4418      	add	r0, r3
 80083c2:	4443      	add	r3, r8
 80083c4:	461e      	mov	r6, r3
 80083c6:	4605      	mov	r5, r0
 80083c8:	4575      	cmp	r5, lr
 80083ca:	d30e      	bcc.n	80083ea <__mdiff+0xea>
 80083cc:	f10e 0103 	add.w	r1, lr, #3
 80083d0:	1a09      	subs	r1, r1, r0
 80083d2:	f021 0103 	bic.w	r1, r1, #3
 80083d6:	3803      	subs	r0, #3
 80083d8:	4586      	cmp	lr, r0
 80083da:	bf38      	it	cc
 80083dc:	2100      	movcc	r1, #0
 80083de:	4419      	add	r1, r3
 80083e0:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 80083e4:	b18b      	cbz	r3, 800840a <__mdiff+0x10a>
 80083e6:	6117      	str	r7, [r2, #16]
 80083e8:	e7a4      	b.n	8008334 <__mdiff+0x34>
 80083ea:	f855 8b04 	ldr.w	r8, [r5], #4
 80083ee:	fa1f f188 	uxth.w	r1, r8
 80083f2:	4461      	add	r1, ip
 80083f4:	140c      	asrs	r4, r1, #16
 80083f6:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80083fa:	b289      	uxth	r1, r1
 80083fc:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8008400:	ea4f 4c24 	mov.w	ip, r4, asr #16
 8008404:	f846 1b04 	str.w	r1, [r6], #4
 8008408:	e7de      	b.n	80083c8 <__mdiff+0xc8>
 800840a:	3f01      	subs	r7, #1
 800840c:	e7e8      	b.n	80083e0 <__mdiff+0xe0>
 800840e:	bf00      	nop
 8008410:	08009bcb 	.word	0x08009bcb
 8008414:	08009c3c 	.word	0x08009c3c

08008418 <__d2b>:
 8008418:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800841c:	2101      	movs	r1, #1
 800841e:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 8008422:	4690      	mov	r8, r2
 8008424:	461d      	mov	r5, r3
 8008426:	f7ff fcd1 	bl	8007dcc <_Balloc>
 800842a:	4604      	mov	r4, r0
 800842c:	b930      	cbnz	r0, 800843c <__d2b+0x24>
 800842e:	4602      	mov	r2, r0
 8008430:	f240 310a 	movw	r1, #778	; 0x30a
 8008434:	4b24      	ldr	r3, [pc, #144]	; (80084c8 <__d2b+0xb0>)
 8008436:	4825      	ldr	r0, [pc, #148]	; (80084cc <__d2b+0xb4>)
 8008438:	f000 faf8 	bl	8008a2c <__assert_func>
 800843c:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8008440:	f3c5 550a 	ubfx	r5, r5, #20, #11
 8008444:	bb2d      	cbnz	r5, 8008492 <__d2b+0x7a>
 8008446:	9301      	str	r3, [sp, #4]
 8008448:	f1b8 0300 	subs.w	r3, r8, #0
 800844c:	d026      	beq.n	800849c <__d2b+0x84>
 800844e:	4668      	mov	r0, sp
 8008450:	9300      	str	r3, [sp, #0]
 8008452:	f7ff fd83 	bl	8007f5c <__lo0bits>
 8008456:	9900      	ldr	r1, [sp, #0]
 8008458:	b1f0      	cbz	r0, 8008498 <__d2b+0x80>
 800845a:	9a01      	ldr	r2, [sp, #4]
 800845c:	f1c0 0320 	rsb	r3, r0, #32
 8008460:	fa02 f303 	lsl.w	r3, r2, r3
 8008464:	430b      	orrs	r3, r1
 8008466:	40c2      	lsrs	r2, r0
 8008468:	6163      	str	r3, [r4, #20]
 800846a:	9201      	str	r2, [sp, #4]
 800846c:	9b01      	ldr	r3, [sp, #4]
 800846e:	2b00      	cmp	r3, #0
 8008470:	bf14      	ite	ne
 8008472:	2102      	movne	r1, #2
 8008474:	2101      	moveq	r1, #1
 8008476:	61a3      	str	r3, [r4, #24]
 8008478:	6121      	str	r1, [r4, #16]
 800847a:	b1c5      	cbz	r5, 80084ae <__d2b+0x96>
 800847c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8008480:	4405      	add	r5, r0
 8008482:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008486:	603d      	str	r5, [r7, #0]
 8008488:	6030      	str	r0, [r6, #0]
 800848a:	4620      	mov	r0, r4
 800848c:	b002      	add	sp, #8
 800848e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008492:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008496:	e7d6      	b.n	8008446 <__d2b+0x2e>
 8008498:	6161      	str	r1, [r4, #20]
 800849a:	e7e7      	b.n	800846c <__d2b+0x54>
 800849c:	a801      	add	r0, sp, #4
 800849e:	f7ff fd5d 	bl	8007f5c <__lo0bits>
 80084a2:	2101      	movs	r1, #1
 80084a4:	9b01      	ldr	r3, [sp, #4]
 80084a6:	6121      	str	r1, [r4, #16]
 80084a8:	6163      	str	r3, [r4, #20]
 80084aa:	3020      	adds	r0, #32
 80084ac:	e7e5      	b.n	800847a <__d2b+0x62>
 80084ae:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 80084b2:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80084b6:	6038      	str	r0, [r7, #0]
 80084b8:	6918      	ldr	r0, [r3, #16]
 80084ba:	f7ff fd2f 	bl	8007f1c <__hi0bits>
 80084be:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 80084c2:	6031      	str	r1, [r6, #0]
 80084c4:	e7e1      	b.n	800848a <__d2b+0x72>
 80084c6:	bf00      	nop
 80084c8:	08009bcb 	.word	0x08009bcb
 80084cc:	08009c3c 	.word	0x08009c3c

080084d0 <_calloc_r>:
 80084d0:	b570      	push	{r4, r5, r6, lr}
 80084d2:	fba1 5402 	umull	r5, r4, r1, r2
 80084d6:	b934      	cbnz	r4, 80084e6 <_calloc_r+0x16>
 80084d8:	4629      	mov	r1, r5
 80084da:	f000 f875 	bl	80085c8 <_malloc_r>
 80084de:	4606      	mov	r6, r0
 80084e0:	b928      	cbnz	r0, 80084ee <_calloc_r+0x1e>
 80084e2:	4630      	mov	r0, r6
 80084e4:	bd70      	pop	{r4, r5, r6, pc}
 80084e6:	220c      	movs	r2, #12
 80084e8:	2600      	movs	r6, #0
 80084ea:	6002      	str	r2, [r0, #0]
 80084ec:	e7f9      	b.n	80084e2 <_calloc_r+0x12>
 80084ee:	462a      	mov	r2, r5
 80084f0:	4621      	mov	r1, r4
 80084f2:	f7fd fdf7 	bl	80060e4 <memset>
 80084f6:	e7f4      	b.n	80084e2 <_calloc_r+0x12>

080084f8 <_free_r>:
 80084f8:	b538      	push	{r3, r4, r5, lr}
 80084fa:	4605      	mov	r5, r0
 80084fc:	2900      	cmp	r1, #0
 80084fe:	d040      	beq.n	8008582 <_free_r+0x8a>
 8008500:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008504:	1f0c      	subs	r4, r1, #4
 8008506:	2b00      	cmp	r3, #0
 8008508:	bfb8      	it	lt
 800850a:	18e4      	addlt	r4, r4, r3
 800850c:	f000 fb14 	bl	8008b38 <__malloc_lock>
 8008510:	4a1c      	ldr	r2, [pc, #112]	; (8008584 <_free_r+0x8c>)
 8008512:	6813      	ldr	r3, [r2, #0]
 8008514:	b933      	cbnz	r3, 8008524 <_free_r+0x2c>
 8008516:	6063      	str	r3, [r4, #4]
 8008518:	6014      	str	r4, [r2, #0]
 800851a:	4628      	mov	r0, r5
 800851c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008520:	f000 bb10 	b.w	8008b44 <__malloc_unlock>
 8008524:	42a3      	cmp	r3, r4
 8008526:	d908      	bls.n	800853a <_free_r+0x42>
 8008528:	6820      	ldr	r0, [r4, #0]
 800852a:	1821      	adds	r1, r4, r0
 800852c:	428b      	cmp	r3, r1
 800852e:	bf01      	itttt	eq
 8008530:	6819      	ldreq	r1, [r3, #0]
 8008532:	685b      	ldreq	r3, [r3, #4]
 8008534:	1809      	addeq	r1, r1, r0
 8008536:	6021      	streq	r1, [r4, #0]
 8008538:	e7ed      	b.n	8008516 <_free_r+0x1e>
 800853a:	461a      	mov	r2, r3
 800853c:	685b      	ldr	r3, [r3, #4]
 800853e:	b10b      	cbz	r3, 8008544 <_free_r+0x4c>
 8008540:	42a3      	cmp	r3, r4
 8008542:	d9fa      	bls.n	800853a <_free_r+0x42>
 8008544:	6811      	ldr	r1, [r2, #0]
 8008546:	1850      	adds	r0, r2, r1
 8008548:	42a0      	cmp	r0, r4
 800854a:	d10b      	bne.n	8008564 <_free_r+0x6c>
 800854c:	6820      	ldr	r0, [r4, #0]
 800854e:	4401      	add	r1, r0
 8008550:	1850      	adds	r0, r2, r1
 8008552:	4283      	cmp	r3, r0
 8008554:	6011      	str	r1, [r2, #0]
 8008556:	d1e0      	bne.n	800851a <_free_r+0x22>
 8008558:	6818      	ldr	r0, [r3, #0]
 800855a:	685b      	ldr	r3, [r3, #4]
 800855c:	4401      	add	r1, r0
 800855e:	6011      	str	r1, [r2, #0]
 8008560:	6053      	str	r3, [r2, #4]
 8008562:	e7da      	b.n	800851a <_free_r+0x22>
 8008564:	d902      	bls.n	800856c <_free_r+0x74>
 8008566:	230c      	movs	r3, #12
 8008568:	602b      	str	r3, [r5, #0]
 800856a:	e7d6      	b.n	800851a <_free_r+0x22>
 800856c:	6820      	ldr	r0, [r4, #0]
 800856e:	1821      	adds	r1, r4, r0
 8008570:	428b      	cmp	r3, r1
 8008572:	bf01      	itttt	eq
 8008574:	6819      	ldreq	r1, [r3, #0]
 8008576:	685b      	ldreq	r3, [r3, #4]
 8008578:	1809      	addeq	r1, r1, r0
 800857a:	6021      	streq	r1, [r4, #0]
 800857c:	6063      	str	r3, [r4, #4]
 800857e:	6054      	str	r4, [r2, #4]
 8008580:	e7cb      	b.n	800851a <_free_r+0x22>
 8008582:	bd38      	pop	{r3, r4, r5, pc}
 8008584:	20000384 	.word	0x20000384

08008588 <sbrk_aligned>:
 8008588:	b570      	push	{r4, r5, r6, lr}
 800858a:	4e0e      	ldr	r6, [pc, #56]	; (80085c4 <sbrk_aligned+0x3c>)
 800858c:	460c      	mov	r4, r1
 800858e:	6831      	ldr	r1, [r6, #0]
 8008590:	4605      	mov	r5, r0
 8008592:	b911      	cbnz	r1, 800859a <sbrk_aligned+0x12>
 8008594:	f000 f9e4 	bl	8008960 <_sbrk_r>
 8008598:	6030      	str	r0, [r6, #0]
 800859a:	4621      	mov	r1, r4
 800859c:	4628      	mov	r0, r5
 800859e:	f000 f9df 	bl	8008960 <_sbrk_r>
 80085a2:	1c43      	adds	r3, r0, #1
 80085a4:	d00a      	beq.n	80085bc <sbrk_aligned+0x34>
 80085a6:	1cc4      	adds	r4, r0, #3
 80085a8:	f024 0403 	bic.w	r4, r4, #3
 80085ac:	42a0      	cmp	r0, r4
 80085ae:	d007      	beq.n	80085c0 <sbrk_aligned+0x38>
 80085b0:	1a21      	subs	r1, r4, r0
 80085b2:	4628      	mov	r0, r5
 80085b4:	f000 f9d4 	bl	8008960 <_sbrk_r>
 80085b8:	3001      	adds	r0, #1
 80085ba:	d101      	bne.n	80085c0 <sbrk_aligned+0x38>
 80085bc:	f04f 34ff 	mov.w	r4, #4294967295
 80085c0:	4620      	mov	r0, r4
 80085c2:	bd70      	pop	{r4, r5, r6, pc}
 80085c4:	20000388 	.word	0x20000388

080085c8 <_malloc_r>:
 80085c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80085cc:	1ccd      	adds	r5, r1, #3
 80085ce:	f025 0503 	bic.w	r5, r5, #3
 80085d2:	3508      	adds	r5, #8
 80085d4:	2d0c      	cmp	r5, #12
 80085d6:	bf38      	it	cc
 80085d8:	250c      	movcc	r5, #12
 80085da:	2d00      	cmp	r5, #0
 80085dc:	4607      	mov	r7, r0
 80085de:	db01      	blt.n	80085e4 <_malloc_r+0x1c>
 80085e0:	42a9      	cmp	r1, r5
 80085e2:	d905      	bls.n	80085f0 <_malloc_r+0x28>
 80085e4:	230c      	movs	r3, #12
 80085e6:	2600      	movs	r6, #0
 80085e8:	603b      	str	r3, [r7, #0]
 80085ea:	4630      	mov	r0, r6
 80085ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80085f0:	4e2e      	ldr	r6, [pc, #184]	; (80086ac <_malloc_r+0xe4>)
 80085f2:	f000 faa1 	bl	8008b38 <__malloc_lock>
 80085f6:	6833      	ldr	r3, [r6, #0]
 80085f8:	461c      	mov	r4, r3
 80085fa:	bb34      	cbnz	r4, 800864a <_malloc_r+0x82>
 80085fc:	4629      	mov	r1, r5
 80085fe:	4638      	mov	r0, r7
 8008600:	f7ff ffc2 	bl	8008588 <sbrk_aligned>
 8008604:	1c43      	adds	r3, r0, #1
 8008606:	4604      	mov	r4, r0
 8008608:	d14d      	bne.n	80086a6 <_malloc_r+0xde>
 800860a:	6834      	ldr	r4, [r6, #0]
 800860c:	4626      	mov	r6, r4
 800860e:	2e00      	cmp	r6, #0
 8008610:	d140      	bne.n	8008694 <_malloc_r+0xcc>
 8008612:	6823      	ldr	r3, [r4, #0]
 8008614:	4631      	mov	r1, r6
 8008616:	4638      	mov	r0, r7
 8008618:	eb04 0803 	add.w	r8, r4, r3
 800861c:	f000 f9a0 	bl	8008960 <_sbrk_r>
 8008620:	4580      	cmp	r8, r0
 8008622:	d13a      	bne.n	800869a <_malloc_r+0xd2>
 8008624:	6821      	ldr	r1, [r4, #0]
 8008626:	3503      	adds	r5, #3
 8008628:	1a6d      	subs	r5, r5, r1
 800862a:	f025 0503 	bic.w	r5, r5, #3
 800862e:	3508      	adds	r5, #8
 8008630:	2d0c      	cmp	r5, #12
 8008632:	bf38      	it	cc
 8008634:	250c      	movcc	r5, #12
 8008636:	4638      	mov	r0, r7
 8008638:	4629      	mov	r1, r5
 800863a:	f7ff ffa5 	bl	8008588 <sbrk_aligned>
 800863e:	3001      	adds	r0, #1
 8008640:	d02b      	beq.n	800869a <_malloc_r+0xd2>
 8008642:	6823      	ldr	r3, [r4, #0]
 8008644:	442b      	add	r3, r5
 8008646:	6023      	str	r3, [r4, #0]
 8008648:	e00e      	b.n	8008668 <_malloc_r+0xa0>
 800864a:	6822      	ldr	r2, [r4, #0]
 800864c:	1b52      	subs	r2, r2, r5
 800864e:	d41e      	bmi.n	800868e <_malloc_r+0xc6>
 8008650:	2a0b      	cmp	r2, #11
 8008652:	d916      	bls.n	8008682 <_malloc_r+0xba>
 8008654:	1961      	adds	r1, r4, r5
 8008656:	42a3      	cmp	r3, r4
 8008658:	6025      	str	r5, [r4, #0]
 800865a:	bf18      	it	ne
 800865c:	6059      	strne	r1, [r3, #4]
 800865e:	6863      	ldr	r3, [r4, #4]
 8008660:	bf08      	it	eq
 8008662:	6031      	streq	r1, [r6, #0]
 8008664:	5162      	str	r2, [r4, r5]
 8008666:	604b      	str	r3, [r1, #4]
 8008668:	4638      	mov	r0, r7
 800866a:	f104 060b 	add.w	r6, r4, #11
 800866e:	f000 fa69 	bl	8008b44 <__malloc_unlock>
 8008672:	f026 0607 	bic.w	r6, r6, #7
 8008676:	1d23      	adds	r3, r4, #4
 8008678:	1af2      	subs	r2, r6, r3
 800867a:	d0b6      	beq.n	80085ea <_malloc_r+0x22>
 800867c:	1b9b      	subs	r3, r3, r6
 800867e:	50a3      	str	r3, [r4, r2]
 8008680:	e7b3      	b.n	80085ea <_malloc_r+0x22>
 8008682:	6862      	ldr	r2, [r4, #4]
 8008684:	42a3      	cmp	r3, r4
 8008686:	bf0c      	ite	eq
 8008688:	6032      	streq	r2, [r6, #0]
 800868a:	605a      	strne	r2, [r3, #4]
 800868c:	e7ec      	b.n	8008668 <_malloc_r+0xa0>
 800868e:	4623      	mov	r3, r4
 8008690:	6864      	ldr	r4, [r4, #4]
 8008692:	e7b2      	b.n	80085fa <_malloc_r+0x32>
 8008694:	4634      	mov	r4, r6
 8008696:	6876      	ldr	r6, [r6, #4]
 8008698:	e7b9      	b.n	800860e <_malloc_r+0x46>
 800869a:	230c      	movs	r3, #12
 800869c:	4638      	mov	r0, r7
 800869e:	603b      	str	r3, [r7, #0]
 80086a0:	f000 fa50 	bl	8008b44 <__malloc_unlock>
 80086a4:	e7a1      	b.n	80085ea <_malloc_r+0x22>
 80086a6:	6025      	str	r5, [r4, #0]
 80086a8:	e7de      	b.n	8008668 <_malloc_r+0xa0>
 80086aa:	bf00      	nop
 80086ac:	20000384 	.word	0x20000384

080086b0 <__sfputc_r>:
 80086b0:	6893      	ldr	r3, [r2, #8]
 80086b2:	b410      	push	{r4}
 80086b4:	3b01      	subs	r3, #1
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	6093      	str	r3, [r2, #8]
 80086ba:	da07      	bge.n	80086cc <__sfputc_r+0x1c>
 80086bc:	6994      	ldr	r4, [r2, #24]
 80086be:	42a3      	cmp	r3, r4
 80086c0:	db01      	blt.n	80086c6 <__sfputc_r+0x16>
 80086c2:	290a      	cmp	r1, #10
 80086c4:	d102      	bne.n	80086cc <__sfputc_r+0x1c>
 80086c6:	bc10      	pop	{r4}
 80086c8:	f7fe ba02 	b.w	8006ad0 <__swbuf_r>
 80086cc:	6813      	ldr	r3, [r2, #0]
 80086ce:	1c58      	adds	r0, r3, #1
 80086d0:	6010      	str	r0, [r2, #0]
 80086d2:	7019      	strb	r1, [r3, #0]
 80086d4:	4608      	mov	r0, r1
 80086d6:	bc10      	pop	{r4}
 80086d8:	4770      	bx	lr

080086da <__sfputs_r>:
 80086da:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80086dc:	4606      	mov	r6, r0
 80086de:	460f      	mov	r7, r1
 80086e0:	4614      	mov	r4, r2
 80086e2:	18d5      	adds	r5, r2, r3
 80086e4:	42ac      	cmp	r4, r5
 80086e6:	d101      	bne.n	80086ec <__sfputs_r+0x12>
 80086e8:	2000      	movs	r0, #0
 80086ea:	e007      	b.n	80086fc <__sfputs_r+0x22>
 80086ec:	463a      	mov	r2, r7
 80086ee:	4630      	mov	r0, r6
 80086f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80086f4:	f7ff ffdc 	bl	80086b0 <__sfputc_r>
 80086f8:	1c43      	adds	r3, r0, #1
 80086fa:	d1f3      	bne.n	80086e4 <__sfputs_r+0xa>
 80086fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008700 <_vfiprintf_r>:
 8008700:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008704:	460d      	mov	r5, r1
 8008706:	4614      	mov	r4, r2
 8008708:	4698      	mov	r8, r3
 800870a:	4606      	mov	r6, r0
 800870c:	b09d      	sub	sp, #116	; 0x74
 800870e:	b118      	cbz	r0, 8008718 <_vfiprintf_r+0x18>
 8008710:	6983      	ldr	r3, [r0, #24]
 8008712:	b90b      	cbnz	r3, 8008718 <_vfiprintf_r+0x18>
 8008714:	f7ff fa2c 	bl	8007b70 <__sinit>
 8008718:	4b89      	ldr	r3, [pc, #548]	; (8008940 <_vfiprintf_r+0x240>)
 800871a:	429d      	cmp	r5, r3
 800871c:	d11b      	bne.n	8008756 <_vfiprintf_r+0x56>
 800871e:	6875      	ldr	r5, [r6, #4]
 8008720:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008722:	07d9      	lsls	r1, r3, #31
 8008724:	d405      	bmi.n	8008732 <_vfiprintf_r+0x32>
 8008726:	89ab      	ldrh	r3, [r5, #12]
 8008728:	059a      	lsls	r2, r3, #22
 800872a:	d402      	bmi.n	8008732 <_vfiprintf_r+0x32>
 800872c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800872e:	f7ff fac2 	bl	8007cb6 <__retarget_lock_acquire_recursive>
 8008732:	89ab      	ldrh	r3, [r5, #12]
 8008734:	071b      	lsls	r3, r3, #28
 8008736:	d501      	bpl.n	800873c <_vfiprintf_r+0x3c>
 8008738:	692b      	ldr	r3, [r5, #16]
 800873a:	b9eb      	cbnz	r3, 8008778 <_vfiprintf_r+0x78>
 800873c:	4629      	mov	r1, r5
 800873e:	4630      	mov	r0, r6
 8008740:	f7fe fa18 	bl	8006b74 <__swsetup_r>
 8008744:	b1c0      	cbz	r0, 8008778 <_vfiprintf_r+0x78>
 8008746:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008748:	07dc      	lsls	r4, r3, #31
 800874a:	d50e      	bpl.n	800876a <_vfiprintf_r+0x6a>
 800874c:	f04f 30ff 	mov.w	r0, #4294967295
 8008750:	b01d      	add	sp, #116	; 0x74
 8008752:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008756:	4b7b      	ldr	r3, [pc, #492]	; (8008944 <_vfiprintf_r+0x244>)
 8008758:	429d      	cmp	r5, r3
 800875a:	d101      	bne.n	8008760 <_vfiprintf_r+0x60>
 800875c:	68b5      	ldr	r5, [r6, #8]
 800875e:	e7df      	b.n	8008720 <_vfiprintf_r+0x20>
 8008760:	4b79      	ldr	r3, [pc, #484]	; (8008948 <_vfiprintf_r+0x248>)
 8008762:	429d      	cmp	r5, r3
 8008764:	bf08      	it	eq
 8008766:	68f5      	ldreq	r5, [r6, #12]
 8008768:	e7da      	b.n	8008720 <_vfiprintf_r+0x20>
 800876a:	89ab      	ldrh	r3, [r5, #12]
 800876c:	0598      	lsls	r0, r3, #22
 800876e:	d4ed      	bmi.n	800874c <_vfiprintf_r+0x4c>
 8008770:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008772:	f7ff faa1 	bl	8007cb8 <__retarget_lock_release_recursive>
 8008776:	e7e9      	b.n	800874c <_vfiprintf_r+0x4c>
 8008778:	2300      	movs	r3, #0
 800877a:	9309      	str	r3, [sp, #36]	; 0x24
 800877c:	2320      	movs	r3, #32
 800877e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008782:	2330      	movs	r3, #48	; 0x30
 8008784:	f04f 0901 	mov.w	r9, #1
 8008788:	f8cd 800c 	str.w	r8, [sp, #12]
 800878c:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800894c <_vfiprintf_r+0x24c>
 8008790:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008794:	4623      	mov	r3, r4
 8008796:	469a      	mov	sl, r3
 8008798:	f813 2b01 	ldrb.w	r2, [r3], #1
 800879c:	b10a      	cbz	r2, 80087a2 <_vfiprintf_r+0xa2>
 800879e:	2a25      	cmp	r2, #37	; 0x25
 80087a0:	d1f9      	bne.n	8008796 <_vfiprintf_r+0x96>
 80087a2:	ebba 0b04 	subs.w	fp, sl, r4
 80087a6:	d00b      	beq.n	80087c0 <_vfiprintf_r+0xc0>
 80087a8:	465b      	mov	r3, fp
 80087aa:	4622      	mov	r2, r4
 80087ac:	4629      	mov	r1, r5
 80087ae:	4630      	mov	r0, r6
 80087b0:	f7ff ff93 	bl	80086da <__sfputs_r>
 80087b4:	3001      	adds	r0, #1
 80087b6:	f000 80aa 	beq.w	800890e <_vfiprintf_r+0x20e>
 80087ba:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80087bc:	445a      	add	r2, fp
 80087be:	9209      	str	r2, [sp, #36]	; 0x24
 80087c0:	f89a 3000 	ldrb.w	r3, [sl]
 80087c4:	2b00      	cmp	r3, #0
 80087c6:	f000 80a2 	beq.w	800890e <_vfiprintf_r+0x20e>
 80087ca:	2300      	movs	r3, #0
 80087cc:	f04f 32ff 	mov.w	r2, #4294967295
 80087d0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80087d4:	f10a 0a01 	add.w	sl, sl, #1
 80087d8:	9304      	str	r3, [sp, #16]
 80087da:	9307      	str	r3, [sp, #28]
 80087dc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80087e0:	931a      	str	r3, [sp, #104]	; 0x68
 80087e2:	4654      	mov	r4, sl
 80087e4:	2205      	movs	r2, #5
 80087e6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80087ea:	4858      	ldr	r0, [pc, #352]	; (800894c <_vfiprintf_r+0x24c>)
 80087ec:	f7ff fad2 	bl	8007d94 <memchr>
 80087f0:	9a04      	ldr	r2, [sp, #16]
 80087f2:	b9d8      	cbnz	r0, 800882c <_vfiprintf_r+0x12c>
 80087f4:	06d1      	lsls	r1, r2, #27
 80087f6:	bf44      	itt	mi
 80087f8:	2320      	movmi	r3, #32
 80087fa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80087fe:	0713      	lsls	r3, r2, #28
 8008800:	bf44      	itt	mi
 8008802:	232b      	movmi	r3, #43	; 0x2b
 8008804:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008808:	f89a 3000 	ldrb.w	r3, [sl]
 800880c:	2b2a      	cmp	r3, #42	; 0x2a
 800880e:	d015      	beq.n	800883c <_vfiprintf_r+0x13c>
 8008810:	4654      	mov	r4, sl
 8008812:	2000      	movs	r0, #0
 8008814:	f04f 0c0a 	mov.w	ip, #10
 8008818:	9a07      	ldr	r2, [sp, #28]
 800881a:	4621      	mov	r1, r4
 800881c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008820:	3b30      	subs	r3, #48	; 0x30
 8008822:	2b09      	cmp	r3, #9
 8008824:	d94e      	bls.n	80088c4 <_vfiprintf_r+0x1c4>
 8008826:	b1b0      	cbz	r0, 8008856 <_vfiprintf_r+0x156>
 8008828:	9207      	str	r2, [sp, #28]
 800882a:	e014      	b.n	8008856 <_vfiprintf_r+0x156>
 800882c:	eba0 0308 	sub.w	r3, r0, r8
 8008830:	fa09 f303 	lsl.w	r3, r9, r3
 8008834:	4313      	orrs	r3, r2
 8008836:	46a2      	mov	sl, r4
 8008838:	9304      	str	r3, [sp, #16]
 800883a:	e7d2      	b.n	80087e2 <_vfiprintf_r+0xe2>
 800883c:	9b03      	ldr	r3, [sp, #12]
 800883e:	1d19      	adds	r1, r3, #4
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	9103      	str	r1, [sp, #12]
 8008844:	2b00      	cmp	r3, #0
 8008846:	bfbb      	ittet	lt
 8008848:	425b      	neglt	r3, r3
 800884a:	f042 0202 	orrlt.w	r2, r2, #2
 800884e:	9307      	strge	r3, [sp, #28]
 8008850:	9307      	strlt	r3, [sp, #28]
 8008852:	bfb8      	it	lt
 8008854:	9204      	strlt	r2, [sp, #16]
 8008856:	7823      	ldrb	r3, [r4, #0]
 8008858:	2b2e      	cmp	r3, #46	; 0x2e
 800885a:	d10c      	bne.n	8008876 <_vfiprintf_r+0x176>
 800885c:	7863      	ldrb	r3, [r4, #1]
 800885e:	2b2a      	cmp	r3, #42	; 0x2a
 8008860:	d135      	bne.n	80088ce <_vfiprintf_r+0x1ce>
 8008862:	9b03      	ldr	r3, [sp, #12]
 8008864:	3402      	adds	r4, #2
 8008866:	1d1a      	adds	r2, r3, #4
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	9203      	str	r2, [sp, #12]
 800886c:	2b00      	cmp	r3, #0
 800886e:	bfb8      	it	lt
 8008870:	f04f 33ff 	movlt.w	r3, #4294967295
 8008874:	9305      	str	r3, [sp, #20]
 8008876:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8008950 <_vfiprintf_r+0x250>
 800887a:	2203      	movs	r2, #3
 800887c:	4650      	mov	r0, sl
 800887e:	7821      	ldrb	r1, [r4, #0]
 8008880:	f7ff fa88 	bl	8007d94 <memchr>
 8008884:	b140      	cbz	r0, 8008898 <_vfiprintf_r+0x198>
 8008886:	2340      	movs	r3, #64	; 0x40
 8008888:	eba0 000a 	sub.w	r0, r0, sl
 800888c:	fa03 f000 	lsl.w	r0, r3, r0
 8008890:	9b04      	ldr	r3, [sp, #16]
 8008892:	3401      	adds	r4, #1
 8008894:	4303      	orrs	r3, r0
 8008896:	9304      	str	r3, [sp, #16]
 8008898:	f814 1b01 	ldrb.w	r1, [r4], #1
 800889c:	2206      	movs	r2, #6
 800889e:	482d      	ldr	r0, [pc, #180]	; (8008954 <_vfiprintf_r+0x254>)
 80088a0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80088a4:	f7ff fa76 	bl	8007d94 <memchr>
 80088a8:	2800      	cmp	r0, #0
 80088aa:	d03f      	beq.n	800892c <_vfiprintf_r+0x22c>
 80088ac:	4b2a      	ldr	r3, [pc, #168]	; (8008958 <_vfiprintf_r+0x258>)
 80088ae:	bb1b      	cbnz	r3, 80088f8 <_vfiprintf_r+0x1f8>
 80088b0:	9b03      	ldr	r3, [sp, #12]
 80088b2:	3307      	adds	r3, #7
 80088b4:	f023 0307 	bic.w	r3, r3, #7
 80088b8:	3308      	adds	r3, #8
 80088ba:	9303      	str	r3, [sp, #12]
 80088bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80088be:	443b      	add	r3, r7
 80088c0:	9309      	str	r3, [sp, #36]	; 0x24
 80088c2:	e767      	b.n	8008794 <_vfiprintf_r+0x94>
 80088c4:	460c      	mov	r4, r1
 80088c6:	2001      	movs	r0, #1
 80088c8:	fb0c 3202 	mla	r2, ip, r2, r3
 80088cc:	e7a5      	b.n	800881a <_vfiprintf_r+0x11a>
 80088ce:	2300      	movs	r3, #0
 80088d0:	f04f 0c0a 	mov.w	ip, #10
 80088d4:	4619      	mov	r1, r3
 80088d6:	3401      	adds	r4, #1
 80088d8:	9305      	str	r3, [sp, #20]
 80088da:	4620      	mov	r0, r4
 80088dc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80088e0:	3a30      	subs	r2, #48	; 0x30
 80088e2:	2a09      	cmp	r2, #9
 80088e4:	d903      	bls.n	80088ee <_vfiprintf_r+0x1ee>
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	d0c5      	beq.n	8008876 <_vfiprintf_r+0x176>
 80088ea:	9105      	str	r1, [sp, #20]
 80088ec:	e7c3      	b.n	8008876 <_vfiprintf_r+0x176>
 80088ee:	4604      	mov	r4, r0
 80088f0:	2301      	movs	r3, #1
 80088f2:	fb0c 2101 	mla	r1, ip, r1, r2
 80088f6:	e7f0      	b.n	80088da <_vfiprintf_r+0x1da>
 80088f8:	ab03      	add	r3, sp, #12
 80088fa:	9300      	str	r3, [sp, #0]
 80088fc:	462a      	mov	r2, r5
 80088fe:	4630      	mov	r0, r6
 8008900:	4b16      	ldr	r3, [pc, #88]	; (800895c <_vfiprintf_r+0x25c>)
 8008902:	a904      	add	r1, sp, #16
 8008904:	f7fd fc94 	bl	8006230 <_printf_float>
 8008908:	4607      	mov	r7, r0
 800890a:	1c78      	adds	r0, r7, #1
 800890c:	d1d6      	bne.n	80088bc <_vfiprintf_r+0x1bc>
 800890e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008910:	07d9      	lsls	r1, r3, #31
 8008912:	d405      	bmi.n	8008920 <_vfiprintf_r+0x220>
 8008914:	89ab      	ldrh	r3, [r5, #12]
 8008916:	059a      	lsls	r2, r3, #22
 8008918:	d402      	bmi.n	8008920 <_vfiprintf_r+0x220>
 800891a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800891c:	f7ff f9cc 	bl	8007cb8 <__retarget_lock_release_recursive>
 8008920:	89ab      	ldrh	r3, [r5, #12]
 8008922:	065b      	lsls	r3, r3, #25
 8008924:	f53f af12 	bmi.w	800874c <_vfiprintf_r+0x4c>
 8008928:	9809      	ldr	r0, [sp, #36]	; 0x24
 800892a:	e711      	b.n	8008750 <_vfiprintf_r+0x50>
 800892c:	ab03      	add	r3, sp, #12
 800892e:	9300      	str	r3, [sp, #0]
 8008930:	462a      	mov	r2, r5
 8008932:	4630      	mov	r0, r6
 8008934:	4b09      	ldr	r3, [pc, #36]	; (800895c <_vfiprintf_r+0x25c>)
 8008936:	a904      	add	r1, sp, #16
 8008938:	f7fd ff16 	bl	8006768 <_printf_i>
 800893c:	e7e4      	b.n	8008908 <_vfiprintf_r+0x208>
 800893e:	bf00      	nop
 8008940:	08009bfc 	.word	0x08009bfc
 8008944:	08009c1c 	.word	0x08009c1c
 8008948:	08009bdc 	.word	0x08009bdc
 800894c:	08009d94 	.word	0x08009d94
 8008950:	08009d9a 	.word	0x08009d9a
 8008954:	08009d9e 	.word	0x08009d9e
 8008958:	08006231 	.word	0x08006231
 800895c:	080086db 	.word	0x080086db

08008960 <_sbrk_r>:
 8008960:	b538      	push	{r3, r4, r5, lr}
 8008962:	2300      	movs	r3, #0
 8008964:	4d05      	ldr	r5, [pc, #20]	; (800897c <_sbrk_r+0x1c>)
 8008966:	4604      	mov	r4, r0
 8008968:	4608      	mov	r0, r1
 800896a:	602b      	str	r3, [r5, #0]
 800896c:	f7fa f90c 	bl	8002b88 <_sbrk>
 8008970:	1c43      	adds	r3, r0, #1
 8008972:	d102      	bne.n	800897a <_sbrk_r+0x1a>
 8008974:	682b      	ldr	r3, [r5, #0]
 8008976:	b103      	cbz	r3, 800897a <_sbrk_r+0x1a>
 8008978:	6023      	str	r3, [r4, #0]
 800897a:	bd38      	pop	{r3, r4, r5, pc}
 800897c:	2000038c 	.word	0x2000038c

08008980 <__sread>:
 8008980:	b510      	push	{r4, lr}
 8008982:	460c      	mov	r4, r1
 8008984:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008988:	f000 f8e2 	bl	8008b50 <_read_r>
 800898c:	2800      	cmp	r0, #0
 800898e:	bfab      	itete	ge
 8008990:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008992:	89a3      	ldrhlt	r3, [r4, #12]
 8008994:	181b      	addge	r3, r3, r0
 8008996:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800899a:	bfac      	ite	ge
 800899c:	6563      	strge	r3, [r4, #84]	; 0x54
 800899e:	81a3      	strhlt	r3, [r4, #12]
 80089a0:	bd10      	pop	{r4, pc}

080089a2 <__swrite>:
 80089a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80089a6:	461f      	mov	r7, r3
 80089a8:	898b      	ldrh	r3, [r1, #12]
 80089aa:	4605      	mov	r5, r0
 80089ac:	05db      	lsls	r3, r3, #23
 80089ae:	460c      	mov	r4, r1
 80089b0:	4616      	mov	r6, r2
 80089b2:	d505      	bpl.n	80089c0 <__swrite+0x1e>
 80089b4:	2302      	movs	r3, #2
 80089b6:	2200      	movs	r2, #0
 80089b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80089bc:	f000 f898 	bl	8008af0 <_lseek_r>
 80089c0:	89a3      	ldrh	r3, [r4, #12]
 80089c2:	4632      	mov	r2, r6
 80089c4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80089c8:	81a3      	strh	r3, [r4, #12]
 80089ca:	4628      	mov	r0, r5
 80089cc:	463b      	mov	r3, r7
 80089ce:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80089d2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80089d6:	f000 b817 	b.w	8008a08 <_write_r>

080089da <__sseek>:
 80089da:	b510      	push	{r4, lr}
 80089dc:	460c      	mov	r4, r1
 80089de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80089e2:	f000 f885 	bl	8008af0 <_lseek_r>
 80089e6:	1c43      	adds	r3, r0, #1
 80089e8:	89a3      	ldrh	r3, [r4, #12]
 80089ea:	bf15      	itete	ne
 80089ec:	6560      	strne	r0, [r4, #84]	; 0x54
 80089ee:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80089f2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80089f6:	81a3      	strheq	r3, [r4, #12]
 80089f8:	bf18      	it	ne
 80089fa:	81a3      	strhne	r3, [r4, #12]
 80089fc:	bd10      	pop	{r4, pc}

080089fe <__sclose>:
 80089fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008a02:	f000 b831 	b.w	8008a68 <_close_r>
	...

08008a08 <_write_r>:
 8008a08:	b538      	push	{r3, r4, r5, lr}
 8008a0a:	4604      	mov	r4, r0
 8008a0c:	4608      	mov	r0, r1
 8008a0e:	4611      	mov	r1, r2
 8008a10:	2200      	movs	r2, #0
 8008a12:	4d05      	ldr	r5, [pc, #20]	; (8008a28 <_write_r+0x20>)
 8008a14:	602a      	str	r2, [r5, #0]
 8008a16:	461a      	mov	r2, r3
 8008a18:	f7fa f869 	bl	8002aee <_write>
 8008a1c:	1c43      	adds	r3, r0, #1
 8008a1e:	d102      	bne.n	8008a26 <_write_r+0x1e>
 8008a20:	682b      	ldr	r3, [r5, #0]
 8008a22:	b103      	cbz	r3, 8008a26 <_write_r+0x1e>
 8008a24:	6023      	str	r3, [r4, #0]
 8008a26:	bd38      	pop	{r3, r4, r5, pc}
 8008a28:	2000038c 	.word	0x2000038c

08008a2c <__assert_func>:
 8008a2c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008a2e:	4614      	mov	r4, r2
 8008a30:	461a      	mov	r2, r3
 8008a32:	4b09      	ldr	r3, [pc, #36]	; (8008a58 <__assert_func+0x2c>)
 8008a34:	4605      	mov	r5, r0
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	68d8      	ldr	r0, [r3, #12]
 8008a3a:	b14c      	cbz	r4, 8008a50 <__assert_func+0x24>
 8008a3c:	4b07      	ldr	r3, [pc, #28]	; (8008a5c <__assert_func+0x30>)
 8008a3e:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008a42:	9100      	str	r1, [sp, #0]
 8008a44:	462b      	mov	r3, r5
 8008a46:	4906      	ldr	r1, [pc, #24]	; (8008a60 <__assert_func+0x34>)
 8008a48:	f000 f81e 	bl	8008a88 <fiprintf>
 8008a4c:	f000 f89f 	bl	8008b8e <abort>
 8008a50:	4b04      	ldr	r3, [pc, #16]	; (8008a64 <__assert_func+0x38>)
 8008a52:	461c      	mov	r4, r3
 8008a54:	e7f3      	b.n	8008a3e <__assert_func+0x12>
 8008a56:	bf00      	nop
 8008a58:	2000000c 	.word	0x2000000c
 8008a5c:	08009da5 	.word	0x08009da5
 8008a60:	08009db2 	.word	0x08009db2
 8008a64:	08009de0 	.word	0x08009de0

08008a68 <_close_r>:
 8008a68:	b538      	push	{r3, r4, r5, lr}
 8008a6a:	2300      	movs	r3, #0
 8008a6c:	4d05      	ldr	r5, [pc, #20]	; (8008a84 <_close_r+0x1c>)
 8008a6e:	4604      	mov	r4, r0
 8008a70:	4608      	mov	r0, r1
 8008a72:	602b      	str	r3, [r5, #0]
 8008a74:	f7fa f857 	bl	8002b26 <_close>
 8008a78:	1c43      	adds	r3, r0, #1
 8008a7a:	d102      	bne.n	8008a82 <_close_r+0x1a>
 8008a7c:	682b      	ldr	r3, [r5, #0]
 8008a7e:	b103      	cbz	r3, 8008a82 <_close_r+0x1a>
 8008a80:	6023      	str	r3, [r4, #0]
 8008a82:	bd38      	pop	{r3, r4, r5, pc}
 8008a84:	2000038c 	.word	0x2000038c

08008a88 <fiprintf>:
 8008a88:	b40e      	push	{r1, r2, r3}
 8008a8a:	b503      	push	{r0, r1, lr}
 8008a8c:	4601      	mov	r1, r0
 8008a8e:	ab03      	add	r3, sp, #12
 8008a90:	4805      	ldr	r0, [pc, #20]	; (8008aa8 <fiprintf+0x20>)
 8008a92:	f853 2b04 	ldr.w	r2, [r3], #4
 8008a96:	6800      	ldr	r0, [r0, #0]
 8008a98:	9301      	str	r3, [sp, #4]
 8008a9a:	f7ff fe31 	bl	8008700 <_vfiprintf_r>
 8008a9e:	b002      	add	sp, #8
 8008aa0:	f85d eb04 	ldr.w	lr, [sp], #4
 8008aa4:	b003      	add	sp, #12
 8008aa6:	4770      	bx	lr
 8008aa8:	2000000c 	.word	0x2000000c

08008aac <_fstat_r>:
 8008aac:	b538      	push	{r3, r4, r5, lr}
 8008aae:	2300      	movs	r3, #0
 8008ab0:	4d06      	ldr	r5, [pc, #24]	; (8008acc <_fstat_r+0x20>)
 8008ab2:	4604      	mov	r4, r0
 8008ab4:	4608      	mov	r0, r1
 8008ab6:	4611      	mov	r1, r2
 8008ab8:	602b      	str	r3, [r5, #0]
 8008aba:	f7fa f83f 	bl	8002b3c <_fstat>
 8008abe:	1c43      	adds	r3, r0, #1
 8008ac0:	d102      	bne.n	8008ac8 <_fstat_r+0x1c>
 8008ac2:	682b      	ldr	r3, [r5, #0]
 8008ac4:	b103      	cbz	r3, 8008ac8 <_fstat_r+0x1c>
 8008ac6:	6023      	str	r3, [r4, #0]
 8008ac8:	bd38      	pop	{r3, r4, r5, pc}
 8008aca:	bf00      	nop
 8008acc:	2000038c 	.word	0x2000038c

08008ad0 <_isatty_r>:
 8008ad0:	b538      	push	{r3, r4, r5, lr}
 8008ad2:	2300      	movs	r3, #0
 8008ad4:	4d05      	ldr	r5, [pc, #20]	; (8008aec <_isatty_r+0x1c>)
 8008ad6:	4604      	mov	r4, r0
 8008ad8:	4608      	mov	r0, r1
 8008ada:	602b      	str	r3, [r5, #0]
 8008adc:	f7fa f83d 	bl	8002b5a <_isatty>
 8008ae0:	1c43      	adds	r3, r0, #1
 8008ae2:	d102      	bne.n	8008aea <_isatty_r+0x1a>
 8008ae4:	682b      	ldr	r3, [r5, #0]
 8008ae6:	b103      	cbz	r3, 8008aea <_isatty_r+0x1a>
 8008ae8:	6023      	str	r3, [r4, #0]
 8008aea:	bd38      	pop	{r3, r4, r5, pc}
 8008aec:	2000038c 	.word	0x2000038c

08008af0 <_lseek_r>:
 8008af0:	b538      	push	{r3, r4, r5, lr}
 8008af2:	4604      	mov	r4, r0
 8008af4:	4608      	mov	r0, r1
 8008af6:	4611      	mov	r1, r2
 8008af8:	2200      	movs	r2, #0
 8008afa:	4d05      	ldr	r5, [pc, #20]	; (8008b10 <_lseek_r+0x20>)
 8008afc:	602a      	str	r2, [r5, #0]
 8008afe:	461a      	mov	r2, r3
 8008b00:	f7fa f835 	bl	8002b6e <_lseek>
 8008b04:	1c43      	adds	r3, r0, #1
 8008b06:	d102      	bne.n	8008b0e <_lseek_r+0x1e>
 8008b08:	682b      	ldr	r3, [r5, #0]
 8008b0a:	b103      	cbz	r3, 8008b0e <_lseek_r+0x1e>
 8008b0c:	6023      	str	r3, [r4, #0]
 8008b0e:	bd38      	pop	{r3, r4, r5, pc}
 8008b10:	2000038c 	.word	0x2000038c

08008b14 <__ascii_mbtowc>:
 8008b14:	b082      	sub	sp, #8
 8008b16:	b901      	cbnz	r1, 8008b1a <__ascii_mbtowc+0x6>
 8008b18:	a901      	add	r1, sp, #4
 8008b1a:	b142      	cbz	r2, 8008b2e <__ascii_mbtowc+0x1a>
 8008b1c:	b14b      	cbz	r3, 8008b32 <__ascii_mbtowc+0x1e>
 8008b1e:	7813      	ldrb	r3, [r2, #0]
 8008b20:	600b      	str	r3, [r1, #0]
 8008b22:	7812      	ldrb	r2, [r2, #0]
 8008b24:	1e10      	subs	r0, r2, #0
 8008b26:	bf18      	it	ne
 8008b28:	2001      	movne	r0, #1
 8008b2a:	b002      	add	sp, #8
 8008b2c:	4770      	bx	lr
 8008b2e:	4610      	mov	r0, r2
 8008b30:	e7fb      	b.n	8008b2a <__ascii_mbtowc+0x16>
 8008b32:	f06f 0001 	mvn.w	r0, #1
 8008b36:	e7f8      	b.n	8008b2a <__ascii_mbtowc+0x16>

08008b38 <__malloc_lock>:
 8008b38:	4801      	ldr	r0, [pc, #4]	; (8008b40 <__malloc_lock+0x8>)
 8008b3a:	f7ff b8bc 	b.w	8007cb6 <__retarget_lock_acquire_recursive>
 8008b3e:	bf00      	nop
 8008b40:	20000380 	.word	0x20000380

08008b44 <__malloc_unlock>:
 8008b44:	4801      	ldr	r0, [pc, #4]	; (8008b4c <__malloc_unlock+0x8>)
 8008b46:	f7ff b8b7 	b.w	8007cb8 <__retarget_lock_release_recursive>
 8008b4a:	bf00      	nop
 8008b4c:	20000380 	.word	0x20000380

08008b50 <_read_r>:
 8008b50:	b538      	push	{r3, r4, r5, lr}
 8008b52:	4604      	mov	r4, r0
 8008b54:	4608      	mov	r0, r1
 8008b56:	4611      	mov	r1, r2
 8008b58:	2200      	movs	r2, #0
 8008b5a:	4d05      	ldr	r5, [pc, #20]	; (8008b70 <_read_r+0x20>)
 8008b5c:	602a      	str	r2, [r5, #0]
 8008b5e:	461a      	mov	r2, r3
 8008b60:	f7f9 ffa8 	bl	8002ab4 <_read>
 8008b64:	1c43      	adds	r3, r0, #1
 8008b66:	d102      	bne.n	8008b6e <_read_r+0x1e>
 8008b68:	682b      	ldr	r3, [r5, #0]
 8008b6a:	b103      	cbz	r3, 8008b6e <_read_r+0x1e>
 8008b6c:	6023      	str	r3, [r4, #0]
 8008b6e:	bd38      	pop	{r3, r4, r5, pc}
 8008b70:	2000038c 	.word	0x2000038c

08008b74 <__ascii_wctomb>:
 8008b74:	4603      	mov	r3, r0
 8008b76:	4608      	mov	r0, r1
 8008b78:	b141      	cbz	r1, 8008b8c <__ascii_wctomb+0x18>
 8008b7a:	2aff      	cmp	r2, #255	; 0xff
 8008b7c:	d904      	bls.n	8008b88 <__ascii_wctomb+0x14>
 8008b7e:	228a      	movs	r2, #138	; 0x8a
 8008b80:	f04f 30ff 	mov.w	r0, #4294967295
 8008b84:	601a      	str	r2, [r3, #0]
 8008b86:	4770      	bx	lr
 8008b88:	2001      	movs	r0, #1
 8008b8a:	700a      	strb	r2, [r1, #0]
 8008b8c:	4770      	bx	lr

08008b8e <abort>:
 8008b8e:	2006      	movs	r0, #6
 8008b90:	b508      	push	{r3, lr}
 8008b92:	f000 f82b 	bl	8008bec <raise>
 8008b96:	2001      	movs	r0, #1
 8008b98:	f7f9 ff82 	bl	8002aa0 <_exit>

08008b9c <_raise_r>:
 8008b9c:	291f      	cmp	r1, #31
 8008b9e:	b538      	push	{r3, r4, r5, lr}
 8008ba0:	4604      	mov	r4, r0
 8008ba2:	460d      	mov	r5, r1
 8008ba4:	d904      	bls.n	8008bb0 <_raise_r+0x14>
 8008ba6:	2316      	movs	r3, #22
 8008ba8:	6003      	str	r3, [r0, #0]
 8008baa:	f04f 30ff 	mov.w	r0, #4294967295
 8008bae:	bd38      	pop	{r3, r4, r5, pc}
 8008bb0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8008bb2:	b112      	cbz	r2, 8008bba <_raise_r+0x1e>
 8008bb4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008bb8:	b94b      	cbnz	r3, 8008bce <_raise_r+0x32>
 8008bba:	4620      	mov	r0, r4
 8008bbc:	f000 f830 	bl	8008c20 <_getpid_r>
 8008bc0:	462a      	mov	r2, r5
 8008bc2:	4601      	mov	r1, r0
 8008bc4:	4620      	mov	r0, r4
 8008bc6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008bca:	f000 b817 	b.w	8008bfc <_kill_r>
 8008bce:	2b01      	cmp	r3, #1
 8008bd0:	d00a      	beq.n	8008be8 <_raise_r+0x4c>
 8008bd2:	1c59      	adds	r1, r3, #1
 8008bd4:	d103      	bne.n	8008bde <_raise_r+0x42>
 8008bd6:	2316      	movs	r3, #22
 8008bd8:	6003      	str	r3, [r0, #0]
 8008bda:	2001      	movs	r0, #1
 8008bdc:	e7e7      	b.n	8008bae <_raise_r+0x12>
 8008bde:	2400      	movs	r4, #0
 8008be0:	4628      	mov	r0, r5
 8008be2:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008be6:	4798      	blx	r3
 8008be8:	2000      	movs	r0, #0
 8008bea:	e7e0      	b.n	8008bae <_raise_r+0x12>

08008bec <raise>:
 8008bec:	4b02      	ldr	r3, [pc, #8]	; (8008bf8 <raise+0xc>)
 8008bee:	4601      	mov	r1, r0
 8008bf0:	6818      	ldr	r0, [r3, #0]
 8008bf2:	f7ff bfd3 	b.w	8008b9c <_raise_r>
 8008bf6:	bf00      	nop
 8008bf8:	2000000c 	.word	0x2000000c

08008bfc <_kill_r>:
 8008bfc:	b538      	push	{r3, r4, r5, lr}
 8008bfe:	2300      	movs	r3, #0
 8008c00:	4d06      	ldr	r5, [pc, #24]	; (8008c1c <_kill_r+0x20>)
 8008c02:	4604      	mov	r4, r0
 8008c04:	4608      	mov	r0, r1
 8008c06:	4611      	mov	r1, r2
 8008c08:	602b      	str	r3, [r5, #0]
 8008c0a:	f7f9 ff39 	bl	8002a80 <_kill>
 8008c0e:	1c43      	adds	r3, r0, #1
 8008c10:	d102      	bne.n	8008c18 <_kill_r+0x1c>
 8008c12:	682b      	ldr	r3, [r5, #0]
 8008c14:	b103      	cbz	r3, 8008c18 <_kill_r+0x1c>
 8008c16:	6023      	str	r3, [r4, #0]
 8008c18:	bd38      	pop	{r3, r4, r5, pc}
 8008c1a:	bf00      	nop
 8008c1c:	2000038c 	.word	0x2000038c

08008c20 <_getpid_r>:
 8008c20:	f7f9 bf27 	b.w	8002a72 <_getpid>

08008c24 <pow>:
 8008c24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008c28:	4614      	mov	r4, r2
 8008c2a:	461d      	mov	r5, r3
 8008c2c:	4680      	mov	r8, r0
 8008c2e:	4689      	mov	r9, r1
 8008c30:	f000 f862 	bl	8008cf8 <__ieee754_pow>
 8008c34:	4622      	mov	r2, r4
 8008c36:	4606      	mov	r6, r0
 8008c38:	460f      	mov	r7, r1
 8008c3a:	462b      	mov	r3, r5
 8008c3c:	4620      	mov	r0, r4
 8008c3e:	4629      	mov	r1, r5
 8008c40:	f7f7 fee4 	bl	8000a0c <__aeabi_dcmpun>
 8008c44:	bbc8      	cbnz	r0, 8008cba <pow+0x96>
 8008c46:	2200      	movs	r2, #0
 8008c48:	2300      	movs	r3, #0
 8008c4a:	4640      	mov	r0, r8
 8008c4c:	4649      	mov	r1, r9
 8008c4e:	f7f7 feab 	bl	80009a8 <__aeabi_dcmpeq>
 8008c52:	b1b8      	cbz	r0, 8008c84 <pow+0x60>
 8008c54:	2200      	movs	r2, #0
 8008c56:	2300      	movs	r3, #0
 8008c58:	4620      	mov	r0, r4
 8008c5a:	4629      	mov	r1, r5
 8008c5c:	f7f7 fea4 	bl	80009a8 <__aeabi_dcmpeq>
 8008c60:	2800      	cmp	r0, #0
 8008c62:	d141      	bne.n	8008ce8 <pow+0xc4>
 8008c64:	4620      	mov	r0, r4
 8008c66:	4629      	mov	r1, r5
 8008c68:	f000 fe3b 	bl	80098e2 <finite>
 8008c6c:	b328      	cbz	r0, 8008cba <pow+0x96>
 8008c6e:	2200      	movs	r2, #0
 8008c70:	2300      	movs	r3, #0
 8008c72:	4620      	mov	r0, r4
 8008c74:	4629      	mov	r1, r5
 8008c76:	f7f7 fea1 	bl	80009bc <__aeabi_dcmplt>
 8008c7a:	b1f0      	cbz	r0, 8008cba <pow+0x96>
 8008c7c:	f7fd fa08 	bl	8006090 <__errno>
 8008c80:	2322      	movs	r3, #34	; 0x22
 8008c82:	e019      	b.n	8008cb8 <pow+0x94>
 8008c84:	4630      	mov	r0, r6
 8008c86:	4639      	mov	r1, r7
 8008c88:	f000 fe2b 	bl	80098e2 <finite>
 8008c8c:	b9c8      	cbnz	r0, 8008cc2 <pow+0x9e>
 8008c8e:	4640      	mov	r0, r8
 8008c90:	4649      	mov	r1, r9
 8008c92:	f000 fe26 	bl	80098e2 <finite>
 8008c96:	b1a0      	cbz	r0, 8008cc2 <pow+0x9e>
 8008c98:	4620      	mov	r0, r4
 8008c9a:	4629      	mov	r1, r5
 8008c9c:	f000 fe21 	bl	80098e2 <finite>
 8008ca0:	b178      	cbz	r0, 8008cc2 <pow+0x9e>
 8008ca2:	4632      	mov	r2, r6
 8008ca4:	463b      	mov	r3, r7
 8008ca6:	4630      	mov	r0, r6
 8008ca8:	4639      	mov	r1, r7
 8008caa:	f7f7 feaf 	bl	8000a0c <__aeabi_dcmpun>
 8008cae:	2800      	cmp	r0, #0
 8008cb0:	d0e4      	beq.n	8008c7c <pow+0x58>
 8008cb2:	f7fd f9ed 	bl	8006090 <__errno>
 8008cb6:	2321      	movs	r3, #33	; 0x21
 8008cb8:	6003      	str	r3, [r0, #0]
 8008cba:	4630      	mov	r0, r6
 8008cbc:	4639      	mov	r1, r7
 8008cbe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008cc2:	2200      	movs	r2, #0
 8008cc4:	2300      	movs	r3, #0
 8008cc6:	4630      	mov	r0, r6
 8008cc8:	4639      	mov	r1, r7
 8008cca:	f7f7 fe6d 	bl	80009a8 <__aeabi_dcmpeq>
 8008cce:	2800      	cmp	r0, #0
 8008cd0:	d0f3      	beq.n	8008cba <pow+0x96>
 8008cd2:	4640      	mov	r0, r8
 8008cd4:	4649      	mov	r1, r9
 8008cd6:	f000 fe04 	bl	80098e2 <finite>
 8008cda:	2800      	cmp	r0, #0
 8008cdc:	d0ed      	beq.n	8008cba <pow+0x96>
 8008cde:	4620      	mov	r0, r4
 8008ce0:	4629      	mov	r1, r5
 8008ce2:	f000 fdfe 	bl	80098e2 <finite>
 8008ce6:	e7c8      	b.n	8008c7a <pow+0x56>
 8008ce8:	2600      	movs	r6, #0
 8008cea:	4f01      	ldr	r7, [pc, #4]	; (8008cf0 <pow+0xcc>)
 8008cec:	e7e5      	b.n	8008cba <pow+0x96>
 8008cee:	bf00      	nop
 8008cf0:	3ff00000 	.word	0x3ff00000
 8008cf4:	00000000 	.word	0x00000000

08008cf8 <__ieee754_pow>:
 8008cf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008cfc:	b093      	sub	sp, #76	; 0x4c
 8008cfe:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008d02:	e9dd 2702 	ldrd	r2, r7, [sp, #8]
 8008d06:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 8008d0a:	4689      	mov	r9, r1
 8008d0c:	ea56 0102 	orrs.w	r1, r6, r2
 8008d10:	4680      	mov	r8, r0
 8008d12:	d111      	bne.n	8008d38 <__ieee754_pow+0x40>
 8008d14:	1803      	adds	r3, r0, r0
 8008d16:	f489 2200 	eor.w	r2, r9, #524288	; 0x80000
 8008d1a:	4152      	adcs	r2, r2
 8008d1c:	4299      	cmp	r1, r3
 8008d1e:	4b82      	ldr	r3, [pc, #520]	; (8008f28 <__ieee754_pow+0x230>)
 8008d20:	4193      	sbcs	r3, r2
 8008d22:	f080 84b9 	bcs.w	8009698 <__ieee754_pow+0x9a0>
 8008d26:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008d2a:	4640      	mov	r0, r8
 8008d2c:	4649      	mov	r1, r9
 8008d2e:	f7f7 fa1d 	bl	800016c <__adddf3>
 8008d32:	4683      	mov	fp, r0
 8008d34:	468c      	mov	ip, r1
 8008d36:	e06f      	b.n	8008e18 <__ieee754_pow+0x120>
 8008d38:	4b7c      	ldr	r3, [pc, #496]	; (8008f2c <__ieee754_pow+0x234>)
 8008d3a:	f029 4400 	bic.w	r4, r9, #2147483648	; 0x80000000
 8008d3e:	429c      	cmp	r4, r3
 8008d40:	464d      	mov	r5, r9
 8008d42:	4682      	mov	sl, r0
 8008d44:	dc06      	bgt.n	8008d54 <__ieee754_pow+0x5c>
 8008d46:	d101      	bne.n	8008d4c <__ieee754_pow+0x54>
 8008d48:	2800      	cmp	r0, #0
 8008d4a:	d1ec      	bne.n	8008d26 <__ieee754_pow+0x2e>
 8008d4c:	429e      	cmp	r6, r3
 8008d4e:	dc01      	bgt.n	8008d54 <__ieee754_pow+0x5c>
 8008d50:	d10f      	bne.n	8008d72 <__ieee754_pow+0x7a>
 8008d52:	b172      	cbz	r2, 8008d72 <__ieee754_pow+0x7a>
 8008d54:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 8008d58:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 8008d5c:	ea55 050a 	orrs.w	r5, r5, sl
 8008d60:	d1e1      	bne.n	8008d26 <__ieee754_pow+0x2e>
 8008d62:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8008d66:	18db      	adds	r3, r3, r3
 8008d68:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 8008d6c:	4152      	adcs	r2, r2
 8008d6e:	429d      	cmp	r5, r3
 8008d70:	e7d5      	b.n	8008d1e <__ieee754_pow+0x26>
 8008d72:	2d00      	cmp	r5, #0
 8008d74:	da39      	bge.n	8008dea <__ieee754_pow+0xf2>
 8008d76:	4b6e      	ldr	r3, [pc, #440]	; (8008f30 <__ieee754_pow+0x238>)
 8008d78:	429e      	cmp	r6, r3
 8008d7a:	dc52      	bgt.n	8008e22 <__ieee754_pow+0x12a>
 8008d7c:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8008d80:	429e      	cmp	r6, r3
 8008d82:	f340 849c 	ble.w	80096be <__ieee754_pow+0x9c6>
 8008d86:	1533      	asrs	r3, r6, #20
 8008d88:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8008d8c:	2b14      	cmp	r3, #20
 8008d8e:	dd0f      	ble.n	8008db0 <__ieee754_pow+0xb8>
 8008d90:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8008d94:	fa22 f103 	lsr.w	r1, r2, r3
 8008d98:	fa01 f303 	lsl.w	r3, r1, r3
 8008d9c:	4293      	cmp	r3, r2
 8008d9e:	f040 848e 	bne.w	80096be <__ieee754_pow+0x9c6>
 8008da2:	f001 0101 	and.w	r1, r1, #1
 8008da6:	f1c1 0302 	rsb	r3, r1, #2
 8008daa:	9300      	str	r3, [sp, #0]
 8008dac:	b182      	cbz	r2, 8008dd0 <__ieee754_pow+0xd8>
 8008dae:	e05d      	b.n	8008e6c <__ieee754_pow+0x174>
 8008db0:	2a00      	cmp	r2, #0
 8008db2:	d159      	bne.n	8008e68 <__ieee754_pow+0x170>
 8008db4:	f1c3 0314 	rsb	r3, r3, #20
 8008db8:	fa46 f103 	asr.w	r1, r6, r3
 8008dbc:	fa01 f303 	lsl.w	r3, r1, r3
 8008dc0:	42b3      	cmp	r3, r6
 8008dc2:	f040 8479 	bne.w	80096b8 <__ieee754_pow+0x9c0>
 8008dc6:	f001 0101 	and.w	r1, r1, #1
 8008dca:	f1c1 0302 	rsb	r3, r1, #2
 8008dce:	9300      	str	r3, [sp, #0]
 8008dd0:	4b58      	ldr	r3, [pc, #352]	; (8008f34 <__ieee754_pow+0x23c>)
 8008dd2:	429e      	cmp	r6, r3
 8008dd4:	d132      	bne.n	8008e3c <__ieee754_pow+0x144>
 8008dd6:	2f00      	cmp	r7, #0
 8008dd8:	f280 846a 	bge.w	80096b0 <__ieee754_pow+0x9b8>
 8008ddc:	4642      	mov	r2, r8
 8008dde:	464b      	mov	r3, r9
 8008de0:	2000      	movs	r0, #0
 8008de2:	4954      	ldr	r1, [pc, #336]	; (8008f34 <__ieee754_pow+0x23c>)
 8008de4:	f7f7 fca2 	bl	800072c <__aeabi_ddiv>
 8008de8:	e7a3      	b.n	8008d32 <__ieee754_pow+0x3a>
 8008dea:	2300      	movs	r3, #0
 8008dec:	9300      	str	r3, [sp, #0]
 8008dee:	2a00      	cmp	r2, #0
 8008df0:	d13c      	bne.n	8008e6c <__ieee754_pow+0x174>
 8008df2:	4b4e      	ldr	r3, [pc, #312]	; (8008f2c <__ieee754_pow+0x234>)
 8008df4:	429e      	cmp	r6, r3
 8008df6:	d1eb      	bne.n	8008dd0 <__ieee754_pow+0xd8>
 8008df8:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8008dfc:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8008e00:	ea53 030a 	orrs.w	r3, r3, sl
 8008e04:	f000 8448 	beq.w	8009698 <__ieee754_pow+0x9a0>
 8008e08:	4b4b      	ldr	r3, [pc, #300]	; (8008f38 <__ieee754_pow+0x240>)
 8008e0a:	429c      	cmp	r4, r3
 8008e0c:	dd0b      	ble.n	8008e26 <__ieee754_pow+0x12e>
 8008e0e:	2f00      	cmp	r7, #0
 8008e10:	f2c0 8448 	blt.w	80096a4 <__ieee754_pow+0x9ac>
 8008e14:	e9dd bc02 	ldrd	fp, ip, [sp, #8]
 8008e18:	4658      	mov	r0, fp
 8008e1a:	4661      	mov	r1, ip
 8008e1c:	b013      	add	sp, #76	; 0x4c
 8008e1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e22:	2302      	movs	r3, #2
 8008e24:	e7e2      	b.n	8008dec <__ieee754_pow+0xf4>
 8008e26:	2f00      	cmp	r7, #0
 8008e28:	f04f 0b00 	mov.w	fp, #0
 8008e2c:	f04f 0c00 	mov.w	ip, #0
 8008e30:	daf2      	bge.n	8008e18 <__ieee754_pow+0x120>
 8008e32:	e9dd b302 	ldrd	fp, r3, [sp, #8]
 8008e36:	f103 4c00 	add.w	ip, r3, #2147483648	; 0x80000000
 8008e3a:	e7ed      	b.n	8008e18 <__ieee754_pow+0x120>
 8008e3c:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 8008e40:	d106      	bne.n	8008e50 <__ieee754_pow+0x158>
 8008e42:	4642      	mov	r2, r8
 8008e44:	464b      	mov	r3, r9
 8008e46:	4640      	mov	r0, r8
 8008e48:	4649      	mov	r1, r9
 8008e4a:	f7f7 fb45 	bl	80004d8 <__aeabi_dmul>
 8008e4e:	e770      	b.n	8008d32 <__ieee754_pow+0x3a>
 8008e50:	4b3a      	ldr	r3, [pc, #232]	; (8008f3c <__ieee754_pow+0x244>)
 8008e52:	429f      	cmp	r7, r3
 8008e54:	d10a      	bne.n	8008e6c <__ieee754_pow+0x174>
 8008e56:	2d00      	cmp	r5, #0
 8008e58:	db08      	blt.n	8008e6c <__ieee754_pow+0x174>
 8008e5a:	4640      	mov	r0, r8
 8008e5c:	4649      	mov	r1, r9
 8008e5e:	b013      	add	sp, #76	; 0x4c
 8008e60:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e64:	f000 bc5e 	b.w	8009724 <__ieee754_sqrt>
 8008e68:	2300      	movs	r3, #0
 8008e6a:	9300      	str	r3, [sp, #0]
 8008e6c:	4640      	mov	r0, r8
 8008e6e:	4649      	mov	r1, r9
 8008e70:	f000 fd34 	bl	80098dc <fabs>
 8008e74:	4683      	mov	fp, r0
 8008e76:	468c      	mov	ip, r1
 8008e78:	f1ba 0f00 	cmp.w	sl, #0
 8008e7c:	d128      	bne.n	8008ed0 <__ieee754_pow+0x1d8>
 8008e7e:	b124      	cbz	r4, 8008e8a <__ieee754_pow+0x192>
 8008e80:	4b2c      	ldr	r3, [pc, #176]	; (8008f34 <__ieee754_pow+0x23c>)
 8008e82:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8008e86:	429a      	cmp	r2, r3
 8008e88:	d122      	bne.n	8008ed0 <__ieee754_pow+0x1d8>
 8008e8a:	2f00      	cmp	r7, #0
 8008e8c:	da07      	bge.n	8008e9e <__ieee754_pow+0x1a6>
 8008e8e:	465a      	mov	r2, fp
 8008e90:	4663      	mov	r3, ip
 8008e92:	2000      	movs	r0, #0
 8008e94:	4927      	ldr	r1, [pc, #156]	; (8008f34 <__ieee754_pow+0x23c>)
 8008e96:	f7f7 fc49 	bl	800072c <__aeabi_ddiv>
 8008e9a:	4683      	mov	fp, r0
 8008e9c:	468c      	mov	ip, r1
 8008e9e:	2d00      	cmp	r5, #0
 8008ea0:	daba      	bge.n	8008e18 <__ieee754_pow+0x120>
 8008ea2:	9b00      	ldr	r3, [sp, #0]
 8008ea4:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8008ea8:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8008eac:	4323      	orrs	r3, r4
 8008eae:	d108      	bne.n	8008ec2 <__ieee754_pow+0x1ca>
 8008eb0:	465a      	mov	r2, fp
 8008eb2:	4663      	mov	r3, ip
 8008eb4:	4658      	mov	r0, fp
 8008eb6:	4661      	mov	r1, ip
 8008eb8:	f7f7 f956 	bl	8000168 <__aeabi_dsub>
 8008ebc:	4602      	mov	r2, r0
 8008ebe:	460b      	mov	r3, r1
 8008ec0:	e790      	b.n	8008de4 <__ieee754_pow+0xec>
 8008ec2:	9b00      	ldr	r3, [sp, #0]
 8008ec4:	2b01      	cmp	r3, #1
 8008ec6:	d1a7      	bne.n	8008e18 <__ieee754_pow+0x120>
 8008ec8:	f10c 4300 	add.w	r3, ip, #2147483648	; 0x80000000
 8008ecc:	469c      	mov	ip, r3
 8008ece:	e7a3      	b.n	8008e18 <__ieee754_pow+0x120>
 8008ed0:	0feb      	lsrs	r3, r5, #31
 8008ed2:	3b01      	subs	r3, #1
 8008ed4:	930c      	str	r3, [sp, #48]	; 0x30
 8008ed6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008ed8:	9b00      	ldr	r3, [sp, #0]
 8008eda:	4313      	orrs	r3, r2
 8008edc:	d104      	bne.n	8008ee8 <__ieee754_pow+0x1f0>
 8008ede:	4642      	mov	r2, r8
 8008ee0:	464b      	mov	r3, r9
 8008ee2:	4640      	mov	r0, r8
 8008ee4:	4649      	mov	r1, r9
 8008ee6:	e7e7      	b.n	8008eb8 <__ieee754_pow+0x1c0>
 8008ee8:	4b15      	ldr	r3, [pc, #84]	; (8008f40 <__ieee754_pow+0x248>)
 8008eea:	429e      	cmp	r6, r3
 8008eec:	f340 80f6 	ble.w	80090dc <__ieee754_pow+0x3e4>
 8008ef0:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8008ef4:	429e      	cmp	r6, r3
 8008ef6:	4b10      	ldr	r3, [pc, #64]	; (8008f38 <__ieee754_pow+0x240>)
 8008ef8:	dd09      	ble.n	8008f0e <__ieee754_pow+0x216>
 8008efa:	429c      	cmp	r4, r3
 8008efc:	dc0c      	bgt.n	8008f18 <__ieee754_pow+0x220>
 8008efe:	2f00      	cmp	r7, #0
 8008f00:	da0c      	bge.n	8008f1c <__ieee754_pow+0x224>
 8008f02:	2000      	movs	r0, #0
 8008f04:	b013      	add	sp, #76	; 0x4c
 8008f06:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f0a:	f000 bce2 	b.w	80098d2 <__math_oflow>
 8008f0e:	429c      	cmp	r4, r3
 8008f10:	dbf5      	blt.n	8008efe <__ieee754_pow+0x206>
 8008f12:	4b08      	ldr	r3, [pc, #32]	; (8008f34 <__ieee754_pow+0x23c>)
 8008f14:	429c      	cmp	r4, r3
 8008f16:	dd15      	ble.n	8008f44 <__ieee754_pow+0x24c>
 8008f18:	2f00      	cmp	r7, #0
 8008f1a:	dcf2      	bgt.n	8008f02 <__ieee754_pow+0x20a>
 8008f1c:	2000      	movs	r0, #0
 8008f1e:	b013      	add	sp, #76	; 0x4c
 8008f20:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f24:	f000 bcd0 	b.w	80098c8 <__math_uflow>
 8008f28:	fff00000 	.word	0xfff00000
 8008f2c:	7ff00000 	.word	0x7ff00000
 8008f30:	433fffff 	.word	0x433fffff
 8008f34:	3ff00000 	.word	0x3ff00000
 8008f38:	3fefffff 	.word	0x3fefffff
 8008f3c:	3fe00000 	.word	0x3fe00000
 8008f40:	41e00000 	.word	0x41e00000
 8008f44:	4661      	mov	r1, ip
 8008f46:	2200      	movs	r2, #0
 8008f48:	4658      	mov	r0, fp
 8008f4a:	4b5f      	ldr	r3, [pc, #380]	; (80090c8 <__ieee754_pow+0x3d0>)
 8008f4c:	f7f7 f90c 	bl	8000168 <__aeabi_dsub>
 8008f50:	a355      	add	r3, pc, #340	; (adr r3, 80090a8 <__ieee754_pow+0x3b0>)
 8008f52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f56:	4604      	mov	r4, r0
 8008f58:	460d      	mov	r5, r1
 8008f5a:	f7f7 fabd 	bl	80004d8 <__aeabi_dmul>
 8008f5e:	a354      	add	r3, pc, #336	; (adr r3, 80090b0 <__ieee754_pow+0x3b8>)
 8008f60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f64:	4606      	mov	r6, r0
 8008f66:	460f      	mov	r7, r1
 8008f68:	4620      	mov	r0, r4
 8008f6a:	4629      	mov	r1, r5
 8008f6c:	f7f7 fab4 	bl	80004d8 <__aeabi_dmul>
 8008f70:	2200      	movs	r2, #0
 8008f72:	4682      	mov	sl, r0
 8008f74:	468b      	mov	fp, r1
 8008f76:	4620      	mov	r0, r4
 8008f78:	4629      	mov	r1, r5
 8008f7a:	4b54      	ldr	r3, [pc, #336]	; (80090cc <__ieee754_pow+0x3d4>)
 8008f7c:	f7f7 faac 	bl	80004d8 <__aeabi_dmul>
 8008f80:	4602      	mov	r2, r0
 8008f82:	460b      	mov	r3, r1
 8008f84:	a14c      	add	r1, pc, #304	; (adr r1, 80090b8 <__ieee754_pow+0x3c0>)
 8008f86:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008f8a:	f7f7 f8ed 	bl	8000168 <__aeabi_dsub>
 8008f8e:	4622      	mov	r2, r4
 8008f90:	462b      	mov	r3, r5
 8008f92:	f7f7 faa1 	bl	80004d8 <__aeabi_dmul>
 8008f96:	4602      	mov	r2, r0
 8008f98:	460b      	mov	r3, r1
 8008f9a:	2000      	movs	r0, #0
 8008f9c:	494c      	ldr	r1, [pc, #304]	; (80090d0 <__ieee754_pow+0x3d8>)
 8008f9e:	f7f7 f8e3 	bl	8000168 <__aeabi_dsub>
 8008fa2:	4622      	mov	r2, r4
 8008fa4:	462b      	mov	r3, r5
 8008fa6:	4680      	mov	r8, r0
 8008fa8:	4689      	mov	r9, r1
 8008faa:	4620      	mov	r0, r4
 8008fac:	4629      	mov	r1, r5
 8008fae:	f7f7 fa93 	bl	80004d8 <__aeabi_dmul>
 8008fb2:	4602      	mov	r2, r0
 8008fb4:	460b      	mov	r3, r1
 8008fb6:	4640      	mov	r0, r8
 8008fb8:	4649      	mov	r1, r9
 8008fba:	f7f7 fa8d 	bl	80004d8 <__aeabi_dmul>
 8008fbe:	a340      	add	r3, pc, #256	; (adr r3, 80090c0 <__ieee754_pow+0x3c8>)
 8008fc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fc4:	f7f7 fa88 	bl	80004d8 <__aeabi_dmul>
 8008fc8:	4602      	mov	r2, r0
 8008fca:	460b      	mov	r3, r1
 8008fcc:	4650      	mov	r0, sl
 8008fce:	4659      	mov	r1, fp
 8008fd0:	f7f7 f8ca 	bl	8000168 <__aeabi_dsub>
 8008fd4:	f04f 0a00 	mov.w	sl, #0
 8008fd8:	4602      	mov	r2, r0
 8008fda:	460b      	mov	r3, r1
 8008fdc:	4604      	mov	r4, r0
 8008fde:	460d      	mov	r5, r1
 8008fe0:	4630      	mov	r0, r6
 8008fe2:	4639      	mov	r1, r7
 8008fe4:	f7f7 f8c2 	bl	800016c <__adddf3>
 8008fe8:	4632      	mov	r2, r6
 8008fea:	463b      	mov	r3, r7
 8008fec:	4650      	mov	r0, sl
 8008fee:	468b      	mov	fp, r1
 8008ff0:	f7f7 f8ba 	bl	8000168 <__aeabi_dsub>
 8008ff4:	4602      	mov	r2, r0
 8008ff6:	460b      	mov	r3, r1
 8008ff8:	4620      	mov	r0, r4
 8008ffa:	4629      	mov	r1, r5
 8008ffc:	f7f7 f8b4 	bl	8000168 <__aeabi_dsub>
 8009000:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8009004:	9b00      	ldr	r3, [sp, #0]
 8009006:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009008:	3b01      	subs	r3, #1
 800900a:	4313      	orrs	r3, r2
 800900c:	f04f 0600 	mov.w	r6, #0
 8009010:	f04f 0200 	mov.w	r2, #0
 8009014:	bf0c      	ite	eq
 8009016:	4b2f      	ldreq	r3, [pc, #188]	; (80090d4 <__ieee754_pow+0x3dc>)
 8009018:	4b2b      	ldrne	r3, [pc, #172]	; (80090c8 <__ieee754_pow+0x3d0>)
 800901a:	4604      	mov	r4, r0
 800901c:	460d      	mov	r5, r1
 800901e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009022:	e9cd 2300 	strd	r2, r3, [sp]
 8009026:	4632      	mov	r2, r6
 8009028:	463b      	mov	r3, r7
 800902a:	f7f7 f89d 	bl	8000168 <__aeabi_dsub>
 800902e:	4652      	mov	r2, sl
 8009030:	465b      	mov	r3, fp
 8009032:	f7f7 fa51 	bl	80004d8 <__aeabi_dmul>
 8009036:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800903a:	4680      	mov	r8, r0
 800903c:	4689      	mov	r9, r1
 800903e:	4620      	mov	r0, r4
 8009040:	4629      	mov	r1, r5
 8009042:	f7f7 fa49 	bl	80004d8 <__aeabi_dmul>
 8009046:	4602      	mov	r2, r0
 8009048:	460b      	mov	r3, r1
 800904a:	4640      	mov	r0, r8
 800904c:	4649      	mov	r1, r9
 800904e:	f7f7 f88d 	bl	800016c <__adddf3>
 8009052:	4632      	mov	r2, r6
 8009054:	463b      	mov	r3, r7
 8009056:	4680      	mov	r8, r0
 8009058:	4689      	mov	r9, r1
 800905a:	4650      	mov	r0, sl
 800905c:	4659      	mov	r1, fp
 800905e:	f7f7 fa3b 	bl	80004d8 <__aeabi_dmul>
 8009062:	4604      	mov	r4, r0
 8009064:	460d      	mov	r5, r1
 8009066:	460b      	mov	r3, r1
 8009068:	4602      	mov	r2, r0
 800906a:	4649      	mov	r1, r9
 800906c:	4640      	mov	r0, r8
 800906e:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8009072:	f7f7 f87b 	bl	800016c <__adddf3>
 8009076:	4b18      	ldr	r3, [pc, #96]	; (80090d8 <__ieee754_pow+0x3e0>)
 8009078:	4682      	mov	sl, r0
 800907a:	4299      	cmp	r1, r3
 800907c:	460f      	mov	r7, r1
 800907e:	460e      	mov	r6, r1
 8009080:	f340 82e5 	ble.w	800964e <__ieee754_pow+0x956>
 8009084:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8009088:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800908c:	4303      	orrs	r3, r0
 800908e:	f000 81df 	beq.w	8009450 <__ieee754_pow+0x758>
 8009092:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009096:	2200      	movs	r2, #0
 8009098:	2300      	movs	r3, #0
 800909a:	f7f7 fc8f 	bl	80009bc <__aeabi_dcmplt>
 800909e:	3800      	subs	r0, #0
 80090a0:	bf18      	it	ne
 80090a2:	2001      	movne	r0, #1
 80090a4:	e72e      	b.n	8008f04 <__ieee754_pow+0x20c>
 80090a6:	bf00      	nop
 80090a8:	60000000 	.word	0x60000000
 80090ac:	3ff71547 	.word	0x3ff71547
 80090b0:	f85ddf44 	.word	0xf85ddf44
 80090b4:	3e54ae0b 	.word	0x3e54ae0b
 80090b8:	55555555 	.word	0x55555555
 80090bc:	3fd55555 	.word	0x3fd55555
 80090c0:	652b82fe 	.word	0x652b82fe
 80090c4:	3ff71547 	.word	0x3ff71547
 80090c8:	3ff00000 	.word	0x3ff00000
 80090cc:	3fd00000 	.word	0x3fd00000
 80090d0:	3fe00000 	.word	0x3fe00000
 80090d4:	bff00000 	.word	0xbff00000
 80090d8:	408fffff 	.word	0x408fffff
 80090dc:	4bd2      	ldr	r3, [pc, #840]	; (8009428 <__ieee754_pow+0x730>)
 80090de:	2200      	movs	r2, #0
 80090e0:	402b      	ands	r3, r5
 80090e2:	b943      	cbnz	r3, 80090f6 <__ieee754_pow+0x3fe>
 80090e4:	4658      	mov	r0, fp
 80090e6:	4661      	mov	r1, ip
 80090e8:	4bd0      	ldr	r3, [pc, #832]	; (800942c <__ieee754_pow+0x734>)
 80090ea:	f7f7 f9f5 	bl	80004d8 <__aeabi_dmul>
 80090ee:	f06f 0234 	mvn.w	r2, #52	; 0x34
 80090f2:	4683      	mov	fp, r0
 80090f4:	460c      	mov	r4, r1
 80090f6:	1523      	asrs	r3, r4, #20
 80090f8:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80090fc:	4413      	add	r3, r2
 80090fe:	930b      	str	r3, [sp, #44]	; 0x2c
 8009100:	4bcb      	ldr	r3, [pc, #812]	; (8009430 <__ieee754_pow+0x738>)
 8009102:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8009106:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800910a:	429c      	cmp	r4, r3
 800910c:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8009110:	dd08      	ble.n	8009124 <__ieee754_pow+0x42c>
 8009112:	4bc8      	ldr	r3, [pc, #800]	; (8009434 <__ieee754_pow+0x73c>)
 8009114:	429c      	cmp	r4, r3
 8009116:	f340 8199 	ble.w	800944c <__ieee754_pow+0x754>
 800911a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800911c:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8009120:	3301      	adds	r3, #1
 8009122:	930b      	str	r3, [sp, #44]	; 0x2c
 8009124:	2600      	movs	r6, #0
 8009126:	00f3      	lsls	r3, r6, #3
 8009128:	930d      	str	r3, [sp, #52]	; 0x34
 800912a:	4bc3      	ldr	r3, [pc, #780]	; (8009438 <__ieee754_pow+0x740>)
 800912c:	4658      	mov	r0, fp
 800912e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8009132:	e9d3 3400 	ldrd	r3, r4, [r3]
 8009136:	4629      	mov	r1, r5
 8009138:	461a      	mov	r2, r3
 800913a:	e9cd 3408 	strd	r3, r4, [sp, #32]
 800913e:	4623      	mov	r3, r4
 8009140:	f7f7 f812 	bl	8000168 <__aeabi_dsub>
 8009144:	46da      	mov	sl, fp
 8009146:	462b      	mov	r3, r5
 8009148:	4652      	mov	r2, sl
 800914a:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800914e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8009152:	f7f7 f80b 	bl	800016c <__adddf3>
 8009156:	4602      	mov	r2, r0
 8009158:	460b      	mov	r3, r1
 800915a:	2000      	movs	r0, #0
 800915c:	49b7      	ldr	r1, [pc, #732]	; (800943c <__ieee754_pow+0x744>)
 800915e:	f7f7 fae5 	bl	800072c <__aeabi_ddiv>
 8009162:	4602      	mov	r2, r0
 8009164:	460b      	mov	r3, r1
 8009166:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800916a:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800916e:	f7f7 f9b3 	bl	80004d8 <__aeabi_dmul>
 8009172:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8009176:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 800917a:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800917e:	2300      	movs	r3, #0
 8009180:	2200      	movs	r2, #0
 8009182:	46ab      	mov	fp, r5
 8009184:	106d      	asrs	r5, r5, #1
 8009186:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800918a:	9304      	str	r3, [sp, #16]
 800918c:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8009190:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8009194:	eb05 4386 	add.w	r3, r5, r6, lsl #18
 8009198:	4640      	mov	r0, r8
 800919a:	4649      	mov	r1, r9
 800919c:	4614      	mov	r4, r2
 800919e:	461d      	mov	r5, r3
 80091a0:	f7f7 f99a 	bl	80004d8 <__aeabi_dmul>
 80091a4:	4602      	mov	r2, r0
 80091a6:	460b      	mov	r3, r1
 80091a8:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80091ac:	f7f6 ffdc 	bl	8000168 <__aeabi_dsub>
 80091b0:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80091b4:	4606      	mov	r6, r0
 80091b6:	460f      	mov	r7, r1
 80091b8:	4620      	mov	r0, r4
 80091ba:	4629      	mov	r1, r5
 80091bc:	f7f6 ffd4 	bl	8000168 <__aeabi_dsub>
 80091c0:	4602      	mov	r2, r0
 80091c2:	460b      	mov	r3, r1
 80091c4:	4650      	mov	r0, sl
 80091c6:	4659      	mov	r1, fp
 80091c8:	f7f6 ffce 	bl	8000168 <__aeabi_dsub>
 80091cc:	4642      	mov	r2, r8
 80091ce:	464b      	mov	r3, r9
 80091d0:	f7f7 f982 	bl	80004d8 <__aeabi_dmul>
 80091d4:	4602      	mov	r2, r0
 80091d6:	460b      	mov	r3, r1
 80091d8:	4630      	mov	r0, r6
 80091da:	4639      	mov	r1, r7
 80091dc:	f7f6 ffc4 	bl	8000168 <__aeabi_dsub>
 80091e0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80091e4:	f7f7 f978 	bl	80004d8 <__aeabi_dmul>
 80091e8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80091ec:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80091f0:	4610      	mov	r0, r2
 80091f2:	4619      	mov	r1, r3
 80091f4:	f7f7 f970 	bl	80004d8 <__aeabi_dmul>
 80091f8:	a379      	add	r3, pc, #484	; (adr r3, 80093e0 <__ieee754_pow+0x6e8>)
 80091fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091fe:	4604      	mov	r4, r0
 8009200:	460d      	mov	r5, r1
 8009202:	f7f7 f969 	bl	80004d8 <__aeabi_dmul>
 8009206:	a378      	add	r3, pc, #480	; (adr r3, 80093e8 <__ieee754_pow+0x6f0>)
 8009208:	e9d3 2300 	ldrd	r2, r3, [r3]
 800920c:	f7f6 ffae 	bl	800016c <__adddf3>
 8009210:	4622      	mov	r2, r4
 8009212:	462b      	mov	r3, r5
 8009214:	f7f7 f960 	bl	80004d8 <__aeabi_dmul>
 8009218:	a375      	add	r3, pc, #468	; (adr r3, 80093f0 <__ieee754_pow+0x6f8>)
 800921a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800921e:	f7f6 ffa5 	bl	800016c <__adddf3>
 8009222:	4622      	mov	r2, r4
 8009224:	462b      	mov	r3, r5
 8009226:	f7f7 f957 	bl	80004d8 <__aeabi_dmul>
 800922a:	a373      	add	r3, pc, #460	; (adr r3, 80093f8 <__ieee754_pow+0x700>)
 800922c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009230:	f7f6 ff9c 	bl	800016c <__adddf3>
 8009234:	4622      	mov	r2, r4
 8009236:	462b      	mov	r3, r5
 8009238:	f7f7 f94e 	bl	80004d8 <__aeabi_dmul>
 800923c:	a370      	add	r3, pc, #448	; (adr r3, 8009400 <__ieee754_pow+0x708>)
 800923e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009242:	f7f6 ff93 	bl	800016c <__adddf3>
 8009246:	4622      	mov	r2, r4
 8009248:	462b      	mov	r3, r5
 800924a:	f7f7 f945 	bl	80004d8 <__aeabi_dmul>
 800924e:	a36e      	add	r3, pc, #440	; (adr r3, 8009408 <__ieee754_pow+0x710>)
 8009250:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009254:	f7f6 ff8a 	bl	800016c <__adddf3>
 8009258:	4622      	mov	r2, r4
 800925a:	4606      	mov	r6, r0
 800925c:	460f      	mov	r7, r1
 800925e:	462b      	mov	r3, r5
 8009260:	4620      	mov	r0, r4
 8009262:	4629      	mov	r1, r5
 8009264:	f7f7 f938 	bl	80004d8 <__aeabi_dmul>
 8009268:	4602      	mov	r2, r0
 800926a:	460b      	mov	r3, r1
 800926c:	4630      	mov	r0, r6
 800926e:	4639      	mov	r1, r7
 8009270:	f7f7 f932 	bl	80004d8 <__aeabi_dmul>
 8009274:	4604      	mov	r4, r0
 8009276:	460d      	mov	r5, r1
 8009278:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800927c:	4642      	mov	r2, r8
 800927e:	464b      	mov	r3, r9
 8009280:	f7f6 ff74 	bl	800016c <__adddf3>
 8009284:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8009288:	f7f7 f926 	bl	80004d8 <__aeabi_dmul>
 800928c:	4622      	mov	r2, r4
 800928e:	462b      	mov	r3, r5
 8009290:	f7f6 ff6c 	bl	800016c <__adddf3>
 8009294:	4642      	mov	r2, r8
 8009296:	4606      	mov	r6, r0
 8009298:	460f      	mov	r7, r1
 800929a:	464b      	mov	r3, r9
 800929c:	4640      	mov	r0, r8
 800929e:	4649      	mov	r1, r9
 80092a0:	f7f7 f91a 	bl	80004d8 <__aeabi_dmul>
 80092a4:	2200      	movs	r2, #0
 80092a6:	4b66      	ldr	r3, [pc, #408]	; (8009440 <__ieee754_pow+0x748>)
 80092a8:	4682      	mov	sl, r0
 80092aa:	468b      	mov	fp, r1
 80092ac:	f7f6 ff5e 	bl	800016c <__adddf3>
 80092b0:	4632      	mov	r2, r6
 80092b2:	463b      	mov	r3, r7
 80092b4:	f7f6 ff5a 	bl	800016c <__adddf3>
 80092b8:	2400      	movs	r4, #0
 80092ba:	460d      	mov	r5, r1
 80092bc:	4622      	mov	r2, r4
 80092be:	460b      	mov	r3, r1
 80092c0:	4640      	mov	r0, r8
 80092c2:	4649      	mov	r1, r9
 80092c4:	f7f7 f908 	bl	80004d8 <__aeabi_dmul>
 80092c8:	2200      	movs	r2, #0
 80092ca:	4680      	mov	r8, r0
 80092cc:	4689      	mov	r9, r1
 80092ce:	4620      	mov	r0, r4
 80092d0:	4629      	mov	r1, r5
 80092d2:	4b5b      	ldr	r3, [pc, #364]	; (8009440 <__ieee754_pow+0x748>)
 80092d4:	f7f6 ff48 	bl	8000168 <__aeabi_dsub>
 80092d8:	4652      	mov	r2, sl
 80092da:	465b      	mov	r3, fp
 80092dc:	f7f6 ff44 	bl	8000168 <__aeabi_dsub>
 80092e0:	4602      	mov	r2, r0
 80092e2:	460b      	mov	r3, r1
 80092e4:	4630      	mov	r0, r6
 80092e6:	4639      	mov	r1, r7
 80092e8:	f7f6 ff3e 	bl	8000168 <__aeabi_dsub>
 80092ec:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80092f0:	f7f7 f8f2 	bl	80004d8 <__aeabi_dmul>
 80092f4:	4622      	mov	r2, r4
 80092f6:	4606      	mov	r6, r0
 80092f8:	460f      	mov	r7, r1
 80092fa:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80092fe:	462b      	mov	r3, r5
 8009300:	f7f7 f8ea 	bl	80004d8 <__aeabi_dmul>
 8009304:	4602      	mov	r2, r0
 8009306:	460b      	mov	r3, r1
 8009308:	4630      	mov	r0, r6
 800930a:	4639      	mov	r1, r7
 800930c:	f7f6 ff2e 	bl	800016c <__adddf3>
 8009310:	2400      	movs	r4, #0
 8009312:	4606      	mov	r6, r0
 8009314:	460f      	mov	r7, r1
 8009316:	4602      	mov	r2, r0
 8009318:	460b      	mov	r3, r1
 800931a:	4640      	mov	r0, r8
 800931c:	4649      	mov	r1, r9
 800931e:	f7f6 ff25 	bl	800016c <__adddf3>
 8009322:	a33b      	add	r3, pc, #236	; (adr r3, 8009410 <__ieee754_pow+0x718>)
 8009324:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009328:	4620      	mov	r0, r4
 800932a:	460d      	mov	r5, r1
 800932c:	f7f7 f8d4 	bl	80004d8 <__aeabi_dmul>
 8009330:	4642      	mov	r2, r8
 8009332:	464b      	mov	r3, r9
 8009334:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8009338:	4620      	mov	r0, r4
 800933a:	4629      	mov	r1, r5
 800933c:	f7f6 ff14 	bl	8000168 <__aeabi_dsub>
 8009340:	4602      	mov	r2, r0
 8009342:	460b      	mov	r3, r1
 8009344:	4630      	mov	r0, r6
 8009346:	4639      	mov	r1, r7
 8009348:	f7f6 ff0e 	bl	8000168 <__aeabi_dsub>
 800934c:	a332      	add	r3, pc, #200	; (adr r3, 8009418 <__ieee754_pow+0x720>)
 800934e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009352:	f7f7 f8c1 	bl	80004d8 <__aeabi_dmul>
 8009356:	a332      	add	r3, pc, #200	; (adr r3, 8009420 <__ieee754_pow+0x728>)
 8009358:	e9d3 2300 	ldrd	r2, r3, [r3]
 800935c:	4606      	mov	r6, r0
 800935e:	460f      	mov	r7, r1
 8009360:	4620      	mov	r0, r4
 8009362:	4629      	mov	r1, r5
 8009364:	f7f7 f8b8 	bl	80004d8 <__aeabi_dmul>
 8009368:	4602      	mov	r2, r0
 800936a:	460b      	mov	r3, r1
 800936c:	4630      	mov	r0, r6
 800936e:	4639      	mov	r1, r7
 8009370:	f7f6 fefc 	bl	800016c <__adddf3>
 8009374:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009376:	4b33      	ldr	r3, [pc, #204]	; (8009444 <__ieee754_pow+0x74c>)
 8009378:	f04f 0a00 	mov.w	sl, #0
 800937c:	4413      	add	r3, r2
 800937e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009382:	f7f6 fef3 	bl	800016c <__adddf3>
 8009386:	4680      	mov	r8, r0
 8009388:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800938a:	4689      	mov	r9, r1
 800938c:	f7f7 f83a 	bl	8000404 <__aeabi_i2d>
 8009390:	4604      	mov	r4, r0
 8009392:	460d      	mov	r5, r1
 8009394:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009396:	4b2c      	ldr	r3, [pc, #176]	; (8009448 <__ieee754_pow+0x750>)
 8009398:	4413      	add	r3, r2
 800939a:	e9d3 6700 	ldrd	r6, r7, [r3]
 800939e:	4642      	mov	r2, r8
 80093a0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80093a4:	464b      	mov	r3, r9
 80093a6:	f7f6 fee1 	bl	800016c <__adddf3>
 80093aa:	4632      	mov	r2, r6
 80093ac:	463b      	mov	r3, r7
 80093ae:	f7f6 fedd 	bl	800016c <__adddf3>
 80093b2:	4622      	mov	r2, r4
 80093b4:	462b      	mov	r3, r5
 80093b6:	f7f6 fed9 	bl	800016c <__adddf3>
 80093ba:	4622      	mov	r2, r4
 80093bc:	462b      	mov	r3, r5
 80093be:	4650      	mov	r0, sl
 80093c0:	468b      	mov	fp, r1
 80093c2:	f7f6 fed1 	bl	8000168 <__aeabi_dsub>
 80093c6:	4632      	mov	r2, r6
 80093c8:	463b      	mov	r3, r7
 80093ca:	f7f6 fecd 	bl	8000168 <__aeabi_dsub>
 80093ce:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80093d2:	f7f6 fec9 	bl	8000168 <__aeabi_dsub>
 80093d6:	4602      	mov	r2, r0
 80093d8:	460b      	mov	r3, r1
 80093da:	4640      	mov	r0, r8
 80093dc:	4649      	mov	r1, r9
 80093de:	e60d      	b.n	8008ffc <__ieee754_pow+0x304>
 80093e0:	4a454eef 	.word	0x4a454eef
 80093e4:	3fca7e28 	.word	0x3fca7e28
 80093e8:	93c9db65 	.word	0x93c9db65
 80093ec:	3fcd864a 	.word	0x3fcd864a
 80093f0:	a91d4101 	.word	0xa91d4101
 80093f4:	3fd17460 	.word	0x3fd17460
 80093f8:	518f264d 	.word	0x518f264d
 80093fc:	3fd55555 	.word	0x3fd55555
 8009400:	db6fabff 	.word	0xdb6fabff
 8009404:	3fdb6db6 	.word	0x3fdb6db6
 8009408:	33333303 	.word	0x33333303
 800940c:	3fe33333 	.word	0x3fe33333
 8009410:	e0000000 	.word	0xe0000000
 8009414:	3feec709 	.word	0x3feec709
 8009418:	dc3a03fd 	.word	0xdc3a03fd
 800941c:	3feec709 	.word	0x3feec709
 8009420:	145b01f5 	.word	0x145b01f5
 8009424:	be3e2fe0 	.word	0xbe3e2fe0
 8009428:	7ff00000 	.word	0x7ff00000
 800942c:	43400000 	.word	0x43400000
 8009430:	0003988e 	.word	0x0003988e
 8009434:	000bb679 	.word	0x000bb679
 8009438:	08009ef0 	.word	0x08009ef0
 800943c:	3ff00000 	.word	0x3ff00000
 8009440:	40080000 	.word	0x40080000
 8009444:	08009f10 	.word	0x08009f10
 8009448:	08009f00 	.word	0x08009f00
 800944c:	2601      	movs	r6, #1
 800944e:	e66a      	b.n	8009126 <__ieee754_pow+0x42e>
 8009450:	a39d      	add	r3, pc, #628	; (adr r3, 80096c8 <__ieee754_pow+0x9d0>)
 8009452:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009456:	4640      	mov	r0, r8
 8009458:	4649      	mov	r1, r9
 800945a:	f7f6 fe87 	bl	800016c <__adddf3>
 800945e:	4622      	mov	r2, r4
 8009460:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009464:	462b      	mov	r3, r5
 8009466:	4650      	mov	r0, sl
 8009468:	4639      	mov	r1, r7
 800946a:	f7f6 fe7d 	bl	8000168 <__aeabi_dsub>
 800946e:	4602      	mov	r2, r0
 8009470:	460b      	mov	r3, r1
 8009472:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009476:	f7f7 fabf 	bl	80009f8 <__aeabi_dcmpgt>
 800947a:	2800      	cmp	r0, #0
 800947c:	f47f ae09 	bne.w	8009092 <__ieee754_pow+0x39a>
 8009480:	4aa3      	ldr	r2, [pc, #652]	; (8009710 <__ieee754_pow+0xa18>)
 8009482:	f026 4300 	bic.w	r3, r6, #2147483648	; 0x80000000
 8009486:	4293      	cmp	r3, r2
 8009488:	f340 8101 	ble.w	800968e <__ieee754_pow+0x996>
 800948c:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8009490:	2000      	movs	r0, #0
 8009492:	151b      	asrs	r3, r3, #20
 8009494:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8009498:	fa4a f303 	asr.w	r3, sl, r3
 800949c:	4433      	add	r3, r6
 800949e:	f3c3 520a 	ubfx	r2, r3, #20, #11
 80094a2:	4f9c      	ldr	r7, [pc, #624]	; (8009714 <__ieee754_pow+0xa1c>)
 80094a4:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 80094a8:	4117      	asrs	r7, r2
 80094aa:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 80094ae:	ea23 0107 	bic.w	r1, r3, r7
 80094b2:	f1c2 0214 	rsb	r2, r2, #20
 80094b6:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 80094ba:	460b      	mov	r3, r1
 80094bc:	fa4a fa02 	asr.w	sl, sl, r2
 80094c0:	2e00      	cmp	r6, #0
 80094c2:	4602      	mov	r2, r0
 80094c4:	4629      	mov	r1, r5
 80094c6:	4620      	mov	r0, r4
 80094c8:	bfb8      	it	lt
 80094ca:	f1ca 0a00 	rsblt	sl, sl, #0
 80094ce:	f7f6 fe4b 	bl	8000168 <__aeabi_dsub>
 80094d2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80094d6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80094da:	2400      	movs	r4, #0
 80094dc:	4642      	mov	r2, r8
 80094de:	464b      	mov	r3, r9
 80094e0:	f7f6 fe44 	bl	800016c <__adddf3>
 80094e4:	a37a      	add	r3, pc, #488	; (adr r3, 80096d0 <__ieee754_pow+0x9d8>)
 80094e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094ea:	4620      	mov	r0, r4
 80094ec:	460d      	mov	r5, r1
 80094ee:	f7f6 fff3 	bl	80004d8 <__aeabi_dmul>
 80094f2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80094f6:	4606      	mov	r6, r0
 80094f8:	460f      	mov	r7, r1
 80094fa:	4620      	mov	r0, r4
 80094fc:	4629      	mov	r1, r5
 80094fe:	f7f6 fe33 	bl	8000168 <__aeabi_dsub>
 8009502:	4602      	mov	r2, r0
 8009504:	460b      	mov	r3, r1
 8009506:	4640      	mov	r0, r8
 8009508:	4649      	mov	r1, r9
 800950a:	f7f6 fe2d 	bl	8000168 <__aeabi_dsub>
 800950e:	a372      	add	r3, pc, #456	; (adr r3, 80096d8 <__ieee754_pow+0x9e0>)
 8009510:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009514:	f7f6 ffe0 	bl	80004d8 <__aeabi_dmul>
 8009518:	a371      	add	r3, pc, #452	; (adr r3, 80096e0 <__ieee754_pow+0x9e8>)
 800951a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800951e:	4680      	mov	r8, r0
 8009520:	4689      	mov	r9, r1
 8009522:	4620      	mov	r0, r4
 8009524:	4629      	mov	r1, r5
 8009526:	f7f6 ffd7 	bl	80004d8 <__aeabi_dmul>
 800952a:	4602      	mov	r2, r0
 800952c:	460b      	mov	r3, r1
 800952e:	4640      	mov	r0, r8
 8009530:	4649      	mov	r1, r9
 8009532:	f7f6 fe1b 	bl	800016c <__adddf3>
 8009536:	4604      	mov	r4, r0
 8009538:	460d      	mov	r5, r1
 800953a:	4602      	mov	r2, r0
 800953c:	460b      	mov	r3, r1
 800953e:	4630      	mov	r0, r6
 8009540:	4639      	mov	r1, r7
 8009542:	f7f6 fe13 	bl	800016c <__adddf3>
 8009546:	4632      	mov	r2, r6
 8009548:	463b      	mov	r3, r7
 800954a:	4680      	mov	r8, r0
 800954c:	4689      	mov	r9, r1
 800954e:	f7f6 fe0b 	bl	8000168 <__aeabi_dsub>
 8009552:	4602      	mov	r2, r0
 8009554:	460b      	mov	r3, r1
 8009556:	4620      	mov	r0, r4
 8009558:	4629      	mov	r1, r5
 800955a:	f7f6 fe05 	bl	8000168 <__aeabi_dsub>
 800955e:	4642      	mov	r2, r8
 8009560:	4606      	mov	r6, r0
 8009562:	460f      	mov	r7, r1
 8009564:	464b      	mov	r3, r9
 8009566:	4640      	mov	r0, r8
 8009568:	4649      	mov	r1, r9
 800956a:	f7f6 ffb5 	bl	80004d8 <__aeabi_dmul>
 800956e:	a35e      	add	r3, pc, #376	; (adr r3, 80096e8 <__ieee754_pow+0x9f0>)
 8009570:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009574:	4604      	mov	r4, r0
 8009576:	460d      	mov	r5, r1
 8009578:	f7f6 ffae 	bl	80004d8 <__aeabi_dmul>
 800957c:	a35c      	add	r3, pc, #368	; (adr r3, 80096f0 <__ieee754_pow+0x9f8>)
 800957e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009582:	f7f6 fdf1 	bl	8000168 <__aeabi_dsub>
 8009586:	4622      	mov	r2, r4
 8009588:	462b      	mov	r3, r5
 800958a:	f7f6 ffa5 	bl	80004d8 <__aeabi_dmul>
 800958e:	a35a      	add	r3, pc, #360	; (adr r3, 80096f8 <__ieee754_pow+0xa00>)
 8009590:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009594:	f7f6 fdea 	bl	800016c <__adddf3>
 8009598:	4622      	mov	r2, r4
 800959a:	462b      	mov	r3, r5
 800959c:	f7f6 ff9c 	bl	80004d8 <__aeabi_dmul>
 80095a0:	a357      	add	r3, pc, #348	; (adr r3, 8009700 <__ieee754_pow+0xa08>)
 80095a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095a6:	f7f6 fddf 	bl	8000168 <__aeabi_dsub>
 80095aa:	4622      	mov	r2, r4
 80095ac:	462b      	mov	r3, r5
 80095ae:	f7f6 ff93 	bl	80004d8 <__aeabi_dmul>
 80095b2:	a355      	add	r3, pc, #340	; (adr r3, 8009708 <__ieee754_pow+0xa10>)
 80095b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095b8:	f7f6 fdd8 	bl	800016c <__adddf3>
 80095bc:	4622      	mov	r2, r4
 80095be:	462b      	mov	r3, r5
 80095c0:	f7f6 ff8a 	bl	80004d8 <__aeabi_dmul>
 80095c4:	4602      	mov	r2, r0
 80095c6:	460b      	mov	r3, r1
 80095c8:	4640      	mov	r0, r8
 80095ca:	4649      	mov	r1, r9
 80095cc:	f7f6 fdcc 	bl	8000168 <__aeabi_dsub>
 80095d0:	4604      	mov	r4, r0
 80095d2:	460d      	mov	r5, r1
 80095d4:	4602      	mov	r2, r0
 80095d6:	460b      	mov	r3, r1
 80095d8:	4640      	mov	r0, r8
 80095da:	4649      	mov	r1, r9
 80095dc:	f7f6 ff7c 	bl	80004d8 <__aeabi_dmul>
 80095e0:	2200      	movs	r2, #0
 80095e2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80095e6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80095ea:	4620      	mov	r0, r4
 80095ec:	4629      	mov	r1, r5
 80095ee:	f7f6 fdbb 	bl	8000168 <__aeabi_dsub>
 80095f2:	4602      	mov	r2, r0
 80095f4:	460b      	mov	r3, r1
 80095f6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80095fa:	f7f7 f897 	bl	800072c <__aeabi_ddiv>
 80095fe:	4632      	mov	r2, r6
 8009600:	4604      	mov	r4, r0
 8009602:	460d      	mov	r5, r1
 8009604:	463b      	mov	r3, r7
 8009606:	4640      	mov	r0, r8
 8009608:	4649      	mov	r1, r9
 800960a:	f7f6 ff65 	bl	80004d8 <__aeabi_dmul>
 800960e:	4632      	mov	r2, r6
 8009610:	463b      	mov	r3, r7
 8009612:	f7f6 fdab 	bl	800016c <__adddf3>
 8009616:	4602      	mov	r2, r0
 8009618:	460b      	mov	r3, r1
 800961a:	4620      	mov	r0, r4
 800961c:	4629      	mov	r1, r5
 800961e:	f7f6 fda3 	bl	8000168 <__aeabi_dsub>
 8009622:	4642      	mov	r2, r8
 8009624:	464b      	mov	r3, r9
 8009626:	f7f6 fd9f 	bl	8000168 <__aeabi_dsub>
 800962a:	4602      	mov	r2, r0
 800962c:	460b      	mov	r3, r1
 800962e:	2000      	movs	r0, #0
 8009630:	4939      	ldr	r1, [pc, #228]	; (8009718 <__ieee754_pow+0xa20>)
 8009632:	f7f6 fd99 	bl	8000168 <__aeabi_dsub>
 8009636:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 800963a:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 800963e:	da29      	bge.n	8009694 <__ieee754_pow+0x99c>
 8009640:	4652      	mov	r2, sl
 8009642:	f000 f955 	bl	80098f0 <scalbn>
 8009646:	e9dd 2300 	ldrd	r2, r3, [sp]
 800964a:	f7ff bbfe 	b.w	8008e4a <__ieee754_pow+0x152>
 800964e:	4b33      	ldr	r3, [pc, #204]	; (800971c <__ieee754_pow+0xa24>)
 8009650:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 8009654:	429f      	cmp	r7, r3
 8009656:	f77f af13 	ble.w	8009480 <__ieee754_pow+0x788>
 800965a:	4b31      	ldr	r3, [pc, #196]	; (8009720 <__ieee754_pow+0xa28>)
 800965c:	440b      	add	r3, r1
 800965e:	4303      	orrs	r3, r0
 8009660:	d009      	beq.n	8009676 <__ieee754_pow+0x97e>
 8009662:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009666:	2200      	movs	r2, #0
 8009668:	2300      	movs	r3, #0
 800966a:	f7f7 f9a7 	bl	80009bc <__aeabi_dcmplt>
 800966e:	3800      	subs	r0, #0
 8009670:	bf18      	it	ne
 8009672:	2001      	movne	r0, #1
 8009674:	e453      	b.n	8008f1e <__ieee754_pow+0x226>
 8009676:	4622      	mov	r2, r4
 8009678:	462b      	mov	r3, r5
 800967a:	f7f6 fd75 	bl	8000168 <__aeabi_dsub>
 800967e:	4642      	mov	r2, r8
 8009680:	464b      	mov	r3, r9
 8009682:	f7f7 f9af 	bl	80009e4 <__aeabi_dcmpge>
 8009686:	2800      	cmp	r0, #0
 8009688:	f43f aefa 	beq.w	8009480 <__ieee754_pow+0x788>
 800968c:	e7e9      	b.n	8009662 <__ieee754_pow+0x96a>
 800968e:	f04f 0a00 	mov.w	sl, #0
 8009692:	e720      	b.n	80094d6 <__ieee754_pow+0x7de>
 8009694:	4621      	mov	r1, r4
 8009696:	e7d6      	b.n	8009646 <__ieee754_pow+0x94e>
 8009698:	f04f 0b00 	mov.w	fp, #0
 800969c:	f8df c078 	ldr.w	ip, [pc, #120]	; 8009718 <__ieee754_pow+0xa20>
 80096a0:	f7ff bbba 	b.w	8008e18 <__ieee754_pow+0x120>
 80096a4:	f04f 0b00 	mov.w	fp, #0
 80096a8:	f04f 0c00 	mov.w	ip, #0
 80096ac:	f7ff bbb4 	b.w	8008e18 <__ieee754_pow+0x120>
 80096b0:	4640      	mov	r0, r8
 80096b2:	4649      	mov	r1, r9
 80096b4:	f7ff bb3d 	b.w	8008d32 <__ieee754_pow+0x3a>
 80096b8:	9200      	str	r2, [sp, #0]
 80096ba:	f7ff bb89 	b.w	8008dd0 <__ieee754_pow+0xd8>
 80096be:	2300      	movs	r3, #0
 80096c0:	f7ff bb73 	b.w	8008daa <__ieee754_pow+0xb2>
 80096c4:	f3af 8000 	nop.w
 80096c8:	652b82fe 	.word	0x652b82fe
 80096cc:	3c971547 	.word	0x3c971547
 80096d0:	00000000 	.word	0x00000000
 80096d4:	3fe62e43 	.word	0x3fe62e43
 80096d8:	fefa39ef 	.word	0xfefa39ef
 80096dc:	3fe62e42 	.word	0x3fe62e42
 80096e0:	0ca86c39 	.word	0x0ca86c39
 80096e4:	be205c61 	.word	0xbe205c61
 80096e8:	72bea4d0 	.word	0x72bea4d0
 80096ec:	3e663769 	.word	0x3e663769
 80096f0:	c5d26bf1 	.word	0xc5d26bf1
 80096f4:	3ebbbd41 	.word	0x3ebbbd41
 80096f8:	af25de2c 	.word	0xaf25de2c
 80096fc:	3f11566a 	.word	0x3f11566a
 8009700:	16bebd93 	.word	0x16bebd93
 8009704:	3f66c16c 	.word	0x3f66c16c
 8009708:	5555553e 	.word	0x5555553e
 800970c:	3fc55555 	.word	0x3fc55555
 8009710:	3fe00000 	.word	0x3fe00000
 8009714:	000fffff 	.word	0x000fffff
 8009718:	3ff00000 	.word	0x3ff00000
 800971c:	4090cbff 	.word	0x4090cbff
 8009720:	3f6f3400 	.word	0x3f6f3400

08009724 <__ieee754_sqrt>:
 8009724:	f8df c158 	ldr.w	ip, [pc, #344]	; 8009880 <__ieee754_sqrt+0x15c>
 8009728:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800972c:	ea3c 0c01 	bics.w	ip, ip, r1
 8009730:	4606      	mov	r6, r0
 8009732:	460d      	mov	r5, r1
 8009734:	460c      	mov	r4, r1
 8009736:	460a      	mov	r2, r1
 8009738:	4607      	mov	r7, r0
 800973a:	4603      	mov	r3, r0
 800973c:	d10f      	bne.n	800975e <__ieee754_sqrt+0x3a>
 800973e:	4602      	mov	r2, r0
 8009740:	460b      	mov	r3, r1
 8009742:	f7f6 fec9 	bl	80004d8 <__aeabi_dmul>
 8009746:	4602      	mov	r2, r0
 8009748:	460b      	mov	r3, r1
 800974a:	4630      	mov	r0, r6
 800974c:	4629      	mov	r1, r5
 800974e:	f7f6 fd0d 	bl	800016c <__adddf3>
 8009752:	4606      	mov	r6, r0
 8009754:	460d      	mov	r5, r1
 8009756:	4630      	mov	r0, r6
 8009758:	4629      	mov	r1, r5
 800975a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800975e:	2900      	cmp	r1, #0
 8009760:	dc0e      	bgt.n	8009780 <__ieee754_sqrt+0x5c>
 8009762:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 8009766:	ea5c 0707 	orrs.w	r7, ip, r7
 800976a:	d0f4      	beq.n	8009756 <__ieee754_sqrt+0x32>
 800976c:	b141      	cbz	r1, 8009780 <__ieee754_sqrt+0x5c>
 800976e:	4602      	mov	r2, r0
 8009770:	460b      	mov	r3, r1
 8009772:	f7f6 fcf9 	bl	8000168 <__aeabi_dsub>
 8009776:	4602      	mov	r2, r0
 8009778:	460b      	mov	r3, r1
 800977a:	f7f6 ffd7 	bl	800072c <__aeabi_ddiv>
 800977e:	e7e8      	b.n	8009752 <__ieee754_sqrt+0x2e>
 8009780:	1521      	asrs	r1, r4, #20
 8009782:	d075      	beq.n	8009870 <__ieee754_sqrt+0x14c>
 8009784:	07cc      	lsls	r4, r1, #31
 8009786:	f04f 0400 	mov.w	r4, #0
 800978a:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800978e:	f2a1 37ff 	subw	r7, r1, #1023	; 0x3ff
 8009792:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8009796:	bf5e      	ittt	pl
 8009798:	0fd9      	lsrpl	r1, r3, #31
 800979a:	005b      	lslpl	r3, r3, #1
 800979c:	eb01 0242 	addpl.w	r2, r1, r2, lsl #1
 80097a0:	0fd9      	lsrs	r1, r3, #31
 80097a2:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 80097a6:	2516      	movs	r5, #22
 80097a8:	4620      	mov	r0, r4
 80097aa:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80097ae:	107f      	asrs	r7, r7, #1
 80097b0:	005b      	lsls	r3, r3, #1
 80097b2:	1846      	adds	r6, r0, r1
 80097b4:	4296      	cmp	r6, r2
 80097b6:	bfde      	ittt	le
 80097b8:	1b92      	suble	r2, r2, r6
 80097ba:	1870      	addle	r0, r6, r1
 80097bc:	1864      	addle	r4, r4, r1
 80097be:	0052      	lsls	r2, r2, #1
 80097c0:	3d01      	subs	r5, #1
 80097c2:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 80097c6:	ea4f 0151 	mov.w	r1, r1, lsr #1
 80097ca:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80097ce:	d1f0      	bne.n	80097b2 <__ieee754_sqrt+0x8e>
 80097d0:	4629      	mov	r1, r5
 80097d2:	f04f 0e20 	mov.w	lr, #32
 80097d6:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 80097da:	4282      	cmp	r2, r0
 80097dc:	eb06 0c05 	add.w	ip, r6, r5
 80097e0:	dc02      	bgt.n	80097e8 <__ieee754_sqrt+0xc4>
 80097e2:	d113      	bne.n	800980c <__ieee754_sqrt+0xe8>
 80097e4:	459c      	cmp	ip, r3
 80097e6:	d811      	bhi.n	800980c <__ieee754_sqrt+0xe8>
 80097e8:	f1bc 0f00 	cmp.w	ip, #0
 80097ec:	eb0c 0506 	add.w	r5, ip, r6
 80097f0:	da43      	bge.n	800987a <__ieee754_sqrt+0x156>
 80097f2:	2d00      	cmp	r5, #0
 80097f4:	db41      	blt.n	800987a <__ieee754_sqrt+0x156>
 80097f6:	f100 0801 	add.w	r8, r0, #1
 80097fa:	1a12      	subs	r2, r2, r0
 80097fc:	4640      	mov	r0, r8
 80097fe:	459c      	cmp	ip, r3
 8009800:	bf88      	it	hi
 8009802:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8009806:	eba3 030c 	sub.w	r3, r3, ip
 800980a:	4431      	add	r1, r6
 800980c:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 8009810:	f1be 0e01 	subs.w	lr, lr, #1
 8009814:	eb0c 0242 	add.w	r2, ip, r2, lsl #1
 8009818:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800981c:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8009820:	d1db      	bne.n	80097da <__ieee754_sqrt+0xb6>
 8009822:	4313      	orrs	r3, r2
 8009824:	d006      	beq.n	8009834 <__ieee754_sqrt+0x110>
 8009826:	1c48      	adds	r0, r1, #1
 8009828:	bf0b      	itete	eq
 800982a:	4671      	moveq	r1, lr
 800982c:	3101      	addne	r1, #1
 800982e:	3401      	addeq	r4, #1
 8009830:	f021 0101 	bicne.w	r1, r1, #1
 8009834:	1063      	asrs	r3, r4, #1
 8009836:	0849      	lsrs	r1, r1, #1
 8009838:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800983c:	07e2      	lsls	r2, r4, #31
 800983e:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8009842:	bf48      	it	mi
 8009844:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 8009848:	460e      	mov	r6, r1
 800984a:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 800984e:	e782      	b.n	8009756 <__ieee754_sqrt+0x32>
 8009850:	0ada      	lsrs	r2, r3, #11
 8009852:	3815      	subs	r0, #21
 8009854:	055b      	lsls	r3, r3, #21
 8009856:	2a00      	cmp	r2, #0
 8009858:	d0fa      	beq.n	8009850 <__ieee754_sqrt+0x12c>
 800985a:	02d5      	lsls	r5, r2, #11
 800985c:	d50a      	bpl.n	8009874 <__ieee754_sqrt+0x150>
 800985e:	f1c1 0420 	rsb	r4, r1, #32
 8009862:	fa23 f404 	lsr.w	r4, r3, r4
 8009866:	1e4d      	subs	r5, r1, #1
 8009868:	408b      	lsls	r3, r1
 800986a:	4322      	orrs	r2, r4
 800986c:	1b41      	subs	r1, r0, r5
 800986e:	e789      	b.n	8009784 <__ieee754_sqrt+0x60>
 8009870:	4608      	mov	r0, r1
 8009872:	e7f0      	b.n	8009856 <__ieee754_sqrt+0x132>
 8009874:	0052      	lsls	r2, r2, #1
 8009876:	3101      	adds	r1, #1
 8009878:	e7ef      	b.n	800985a <__ieee754_sqrt+0x136>
 800987a:	4680      	mov	r8, r0
 800987c:	e7bd      	b.n	80097fa <__ieee754_sqrt+0xd6>
 800987e:	bf00      	nop
 8009880:	7ff00000 	.word	0x7ff00000

08009884 <with_errno>:
 8009884:	b570      	push	{r4, r5, r6, lr}
 8009886:	4604      	mov	r4, r0
 8009888:	460d      	mov	r5, r1
 800988a:	4616      	mov	r6, r2
 800988c:	f7fc fc00 	bl	8006090 <__errno>
 8009890:	4629      	mov	r1, r5
 8009892:	6006      	str	r6, [r0, #0]
 8009894:	4620      	mov	r0, r4
 8009896:	bd70      	pop	{r4, r5, r6, pc}

08009898 <xflow>:
 8009898:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800989a:	4615      	mov	r5, r2
 800989c:	461c      	mov	r4, r3
 800989e:	b180      	cbz	r0, 80098c2 <xflow+0x2a>
 80098a0:	4610      	mov	r0, r2
 80098a2:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80098a6:	e9cd 0100 	strd	r0, r1, [sp]
 80098aa:	e9dd 2300 	ldrd	r2, r3, [sp]
 80098ae:	4628      	mov	r0, r5
 80098b0:	4621      	mov	r1, r4
 80098b2:	f7f6 fe11 	bl	80004d8 <__aeabi_dmul>
 80098b6:	2222      	movs	r2, #34	; 0x22
 80098b8:	b003      	add	sp, #12
 80098ba:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80098be:	f7ff bfe1 	b.w	8009884 <with_errno>
 80098c2:	4610      	mov	r0, r2
 80098c4:	4619      	mov	r1, r3
 80098c6:	e7ee      	b.n	80098a6 <xflow+0xe>

080098c8 <__math_uflow>:
 80098c8:	2200      	movs	r2, #0
 80098ca:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80098ce:	f7ff bfe3 	b.w	8009898 <xflow>

080098d2 <__math_oflow>:
 80098d2:	2200      	movs	r2, #0
 80098d4:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 80098d8:	f7ff bfde 	b.w	8009898 <xflow>

080098dc <fabs>:
 80098dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80098e0:	4770      	bx	lr

080098e2 <finite>:
 80098e2:	f041 4000 	orr.w	r0, r1, #2147483648	; 0x80000000
 80098e6:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 80098ea:	0fc0      	lsrs	r0, r0, #31
 80098ec:	4770      	bx	lr
	...

080098f0 <scalbn>:
 80098f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80098f2:	f3c1 560a 	ubfx	r6, r1, #20, #11
 80098f6:	4604      	mov	r4, r0
 80098f8:	460d      	mov	r5, r1
 80098fa:	4617      	mov	r7, r2
 80098fc:	460b      	mov	r3, r1
 80098fe:	b996      	cbnz	r6, 8009926 <scalbn+0x36>
 8009900:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8009904:	4303      	orrs	r3, r0
 8009906:	d039      	beq.n	800997c <scalbn+0x8c>
 8009908:	4b33      	ldr	r3, [pc, #204]	; (80099d8 <scalbn+0xe8>)
 800990a:	2200      	movs	r2, #0
 800990c:	f7f6 fde4 	bl	80004d8 <__aeabi_dmul>
 8009910:	4b32      	ldr	r3, [pc, #200]	; (80099dc <scalbn+0xec>)
 8009912:	4604      	mov	r4, r0
 8009914:	429f      	cmp	r7, r3
 8009916:	460d      	mov	r5, r1
 8009918:	da0f      	bge.n	800993a <scalbn+0x4a>
 800991a:	a32b      	add	r3, pc, #172	; (adr r3, 80099c8 <scalbn+0xd8>)
 800991c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009920:	f7f6 fdda 	bl	80004d8 <__aeabi_dmul>
 8009924:	e006      	b.n	8009934 <scalbn+0x44>
 8009926:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800992a:	4296      	cmp	r6, r2
 800992c:	d10a      	bne.n	8009944 <scalbn+0x54>
 800992e:	4602      	mov	r2, r0
 8009930:	f7f6 fc1c 	bl	800016c <__adddf3>
 8009934:	4604      	mov	r4, r0
 8009936:	460d      	mov	r5, r1
 8009938:	e020      	b.n	800997c <scalbn+0x8c>
 800993a:	460b      	mov	r3, r1
 800993c:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8009940:	f1a1 0636 	sub.w	r6, r1, #54	; 0x36
 8009944:	f240 72fe 	movw	r2, #2046	; 0x7fe
 8009948:	19b9      	adds	r1, r7, r6
 800994a:	4291      	cmp	r1, r2
 800994c:	dd0e      	ble.n	800996c <scalbn+0x7c>
 800994e:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 8009952:	f044 41fc 	orr.w	r1, r4, #2113929216	; 0x7e000000
 8009956:	f441 115f 	orr.w	r1, r1, #3653632	; 0x37c000
 800995a:	f441 5110 	orr.w	r1, r1, #9216	; 0x2400
 800995e:	4820      	ldr	r0, [pc, #128]	; (80099e0 <scalbn+0xf0>)
 8009960:	f041 013c 	orr.w	r1, r1, #60	; 0x3c
 8009964:	a31a      	add	r3, pc, #104	; (adr r3, 80099d0 <scalbn+0xe0>)
 8009966:	e9d3 2300 	ldrd	r2, r3, [r3]
 800996a:	e7d9      	b.n	8009920 <scalbn+0x30>
 800996c:	2900      	cmp	r1, #0
 800996e:	dd08      	ble.n	8009982 <scalbn+0x92>
 8009970:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8009974:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8009978:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 800997c:	4620      	mov	r0, r4
 800997e:	4629      	mov	r1, r5
 8009980:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009982:	f111 0f35 	cmn.w	r1, #53	; 0x35
 8009986:	da12      	bge.n	80099ae <scalbn+0xbe>
 8009988:	f24c 3350 	movw	r3, #50000	; 0xc350
 800998c:	429f      	cmp	r7, r3
 800998e:	ea4f 73d5 	mov.w	r3, r5, lsr #31
 8009992:	ea4f 74c3 	mov.w	r4, r3, lsl #31
 8009996:	dcdc      	bgt.n	8009952 <scalbn+0x62>
 8009998:	a30b      	add	r3, pc, #44	; (adr r3, 80099c8 <scalbn+0xd8>)
 800999a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800999e:	f044 71d2 	orr.w	r1, r4, #27525120	; 0x1a40000
 80099a2:	f441 31b7 	orr.w	r1, r1, #93696	; 0x16e00
 80099a6:	480f      	ldr	r0, [pc, #60]	; (80099e4 <scalbn+0xf4>)
 80099a8:	f041 011f 	orr.w	r1, r1, #31
 80099ac:	e7b8      	b.n	8009920 <scalbn+0x30>
 80099ae:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80099b2:	3136      	adds	r1, #54	; 0x36
 80099b4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80099b8:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 80099bc:	4620      	mov	r0, r4
 80099be:	4629      	mov	r1, r5
 80099c0:	2200      	movs	r2, #0
 80099c2:	4b09      	ldr	r3, [pc, #36]	; (80099e8 <scalbn+0xf8>)
 80099c4:	e7ac      	b.n	8009920 <scalbn+0x30>
 80099c6:	bf00      	nop
 80099c8:	c2f8f359 	.word	0xc2f8f359
 80099cc:	01a56e1f 	.word	0x01a56e1f
 80099d0:	8800759c 	.word	0x8800759c
 80099d4:	7e37e43c 	.word	0x7e37e43c
 80099d8:	43500000 	.word	0x43500000
 80099dc:	ffff3cb0 	.word	0xffff3cb0
 80099e0:	8800759c 	.word	0x8800759c
 80099e4:	c2f8f359 	.word	0xc2f8f359
 80099e8:	3c900000 	.word	0x3c900000

080099ec <_init>:
 80099ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80099ee:	bf00      	nop
 80099f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80099f2:	bc08      	pop	{r3}
 80099f4:	469e      	mov	lr, r3
 80099f6:	4770      	bx	lr

080099f8 <_fini>:
 80099f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80099fa:	bf00      	nop
 80099fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80099fe:	bc08      	pop	{r3}
 8009a00:	469e      	mov	lr, r3
 8009a02:	4770      	bx	lr
